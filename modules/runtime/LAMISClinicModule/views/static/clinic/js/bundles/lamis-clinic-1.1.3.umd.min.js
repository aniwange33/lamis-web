!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common/http"),require("@lamis/web-core"),require("rxjs/operators"),require("moment"),require("@alfresco/adf-core"),require("@angular/common"),require("@angular/material"),require("@angular/router"),require("@covalent/core"),require("@swimlane/ngx-datatable"),require("rxjs"),require("@mat-datetimepicker/core"),require("@angular/forms"),require("ng2-validation"),require("@stomp/ng2-stompjs"),require("@ng-bootstrap/ng-bootstrap")):"function"==typeof define&&define.amd?define("lamis-clinic-1.1.3",["exports","@angular/core","@angular/common/http","@lamis/web-core","rxjs/operators","moment","@alfresco/adf-core","@angular/common","@angular/material","@angular/router","@covalent/core","@swimlane/ngx-datatable","rxjs","@mat-datetimepicker/core","@angular/forms","ng2-validation","@stomp/ng2-stompjs","@ng-bootstrap/ng-bootstrap"],e):e(((t=t||self)["lamis-clinic-1"]=t["lamis-clinic-1"]||{},t["lamis-clinic-1"][1]=t["lamis-clinic-1"][1]||{},t["lamis-clinic-1"][1][3]={}),t.ng.core,t.ng.common.http,t.webCore,t.rxjs.operators,t.moment_,t.adfCore,t.ng.common,t.ng.material,t.ng.router,t.core$1,t.ngxDatatable,t.rxjs,t.core$2,t.ng.forms,t.ng2Validation,t.ng2Stompjs,t.ngBootstrap)}(this,(function(t,e,n,i,a,r,o,s,l,d,c,m,u,p,h,f,v,g){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */function y(t,e,n,i){var a,r=arguments.length,o=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,i);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(r<3?a(o):r>3?a(e,n,o):a(e,n))||o);return r>3&&o&&Object.defineProperty(e,n,o),o}function b(t,e){return function(n,i){e(n,i,t)}}function M(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function S(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,a,r=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(i=r.next()).done;)o.push(i.value)}catch(t){a={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(a)throw a.error}}return o}function C(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(S(arguments[e]));return t}var I=r,w=function(){function t(t,e){this.http=t,this.serverUrl=e,this.resourceUrl="",this.resourceUrl=e.SERVER_API_URL+"/api/clinics"}return t.prototype.create=function(t){var e=this;return t.clinic=this.convertDateFromClient(t.clinic),t.oiScreened=t.oiList?"Yes":"No",t.adrScreened=t.adrList?"Yes":"No",this.http.post(this.resourceUrl,t,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.update=function(t){var e=this;return t.clinic=this.convertDateFromClient(t.clinic),t.oiScreened=t.oiList?"Yes":"No",t.adrScreened=t.adrList?"Yes":"No",this.http.put(this.resourceUrl,t,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.find=function(t){var e=this;return this.http.get(this.resourceUrl+"/"+t,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.findByUuid=function(t){var e=this;return this.http.get(this.resourceUrl+"/by-uuid/"+t,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.delete=function(t){return this.http.delete(this.resourceUrl+"/"+t,{observe:"response"})},t.prototype.getVisitDatesByPatient=function(t){return this.http.get(this.resourceUrl+"/patient/"+t+"/visit-dates").pipe(a.map((function(t){return t.forEach((function(t){return I(t)})),t})))},t.prototype.getPatient=function(t){return this.http.get("/api/patients/by-uuid/"+t,{observe:"body"}).pipe(a.map((function(t){return t&&(t.dateRegistration=null!=t.dateRegistration?I(t.dateRegistration):null,t.dateBirth=null!=t.dateBirth?I(t.dateBirth):null),t})))},t.prototype.getRegimenLines=function(){return this.http.get(this.resourceUrl+"/regimen-types")},t.prototype.getRegimenByLine=function(t){return this.http.get(this.resourceUrl+"/regimens/regimen-type/"+t)},t.prototype.adverseDrugReactions=function(){return this.http.get(this.resourceUrl+"/adverse-drug-reactions")},t.prototype.opportunisticInfections=function(){return this.http.get(this.resourceUrl+"/opportunistic-infections")},t.prototype.adheres=function(){return this.http.get(this.resourceUrl+"/adheres")},t.prototype.regimes=function(t){return this.http.get(this.resourceUrl+"/regimens/"+t)},t.prototype.latestVisit=function(t){return this.http.get(this.resourceUrl+"/patient/"+t+"/latest")},t.prototype.getOpportunisticInfectionsByClinic=function(t){return this.http.get(this.resourceUrl+"/"+t+"/opportunistic-infections")},t.prototype.getAdverseDrugReactionsByClinic=function(t){return this.http.get(this.resourceUrl+"/"+t+"/adverse-drug-reactions",{observe:"response"})},t.prototype.getAdhereByClinic=function(t){return this.http.get(this.resourceUrl+"/"+t+"/adheres")},t.prototype.convertDateFromClient=function(t){return Object.assign({},t,{dateVisit:null!=t.dateVisit&&t.dateVisit.isValid()?t.dateVisit.format(i.DATE_FORMAT):null,lmp:null!=t.lmp&&t.lmp.isValid()?t.lmp.format(i.DATE_FORMAT):null,nextAppointment:null!=t.nextAppointment&&t.nextAppointment.isValid()?t.nextAppointment.format(i.DATE_FORMAT):null,pregnant:null!=t.pregnancyStatus&&2===t.pregnancyStatus,breastfeeding:null!=t.pregnancyStatus&&3===t.pregnancyStatus,bp:t.bp1>0&&t.bp2>0?t.bp1+"/"+t.bp2:null})},t.prototype.convertDateFromServer=function(t){if(t.body&&(t.body.nextAppointment=null!=t.body.nextAppointment?I(t.body.nextAppointment):null,t.body.dateVisit=null!=t.body.dateVisit?I(t.body.dateVisit):null,t.body.lmp=null!=t.body.lmp?I(t.body.lmp):null,t.body.pregnancyStatus=t.body.pregnant?2:t.body.breastfeeding?3:1,t.body.bp)){var e=t.body.bp.split("/");t.body.bp1=parseInt(e[0]),t.body.bp2=2===e.length?parseInt(e[1]):null}return t},t.prototype.convertDateArrayFromServer=function(t){return t.body&&t.body.forEach((function(t){t.dateVisit=null!=t.dateVisit?I(t.dateVisit):null,t.lmp=null!=t.lmp?I(t.lmp):null,t.nextAppointment=null!=t.nextAppointment?I(t.nextAppointment):null,t.pregnancyStatus=t.pregnant?2:t.breastfeeding?3:1})),t},t.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[i.SERVER_API_URL_CONFIG]}]}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(n.HttpClient),e.ɵɵinject(i.SERVER_API_URL_CONFIG))},token:t,providedIn:"root"}),t=y([e.Injectable({providedIn:"root"}),b(1,e.Inject(i.SERVER_API_URL_CONFIG)),M("design:paramtypes",[n.HttpClient,Object])],t)}(),k=function(){function t(t,e,n,i,a,r){this.router=t,this.route=e,this.clinicService=n,this.cfr=i,this._dialogService=a,this.notificationService=r,this.properties=[]}return t.prototype.ngOnInit=function(){var t=this;this.route.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n;var i=t.route.snapshot.paramMap.get("patientId");t.clinicService.getPatient(i).subscribe((function(e){return t.entity.patient=e})),t.buildProperties()}))},t.prototype.edit=function(){this.router.navigate(["/","clinics",this.entity.uuid,"patient",this.entity.patient.uuid,"edit"])},t.prototype.delete=function(){var t=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this clinic visit, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(e){e&&t.clinicService.delete(t.entity.id).subscribe((function(e){e.ok?t.router.navigate(["patients"]):t.notificationService.showError("Error deleting visit, please try again")}))}))},t.prototype.buildProperties=function(){this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateVisit,label:this.entity.commence?"ART Start Date":"Date Visit",format:"dd MMM, yyyy"})),this.entity.commence&&(this.properties.push(new o.CardViewIntItemModel({label:"CD4 at start of ART",key:"cd4",value:this.entity.cd4p||null})),this.properties.push(new o.CardViewFloatItemModel({label:"CD4%",key:"cd4p",value:this.entity.cd4p||null})),this.properties.push(new o.CardViewTextItemModel({label:"Original Regimen Line",key:"rl",value:null!=this.entity.regimenType?this.entity.regimenType.description:""})),this.properties.push(new o.CardViewTextItemModel({label:"Original Regimen",key:"rl",value:null!=this.entity.regimen?this.entity.regimen.description:""}))),this.properties.push(new o.CardViewTextItemModel({label:"Clinical Stage",key:"cs",value:this.entity.clinicStage})),this.properties.push(new o.CardViewTextItemModel({label:"Functional Status",key:"fs",value:this.entity.funcStatus})),this.properties.push(new o.CardViewTextItemModel({label:"TB Status",key:"ts",value:this.entity.tbStatus})),this.properties.push(new o.CardViewFloatItemModel({label:"Body Weight(Kg)",key:"bw",value:this.entity.bodyWeight||null})),this.properties.push(new o.CardViewFloatItemModel({label:"Height(m)",key:"h",value:this.entity.height||null})),this.properties.push(new o.CardViewTextItemModel({label:"Blood Pressure",key:"cd4p",value:this.entity.bp})),"Female"===this.entity.patient.gender&&(this.properties.push(new o.CardViewBoolItemModel({label:"Pregnant",key:"pg",value:this.entity.pregnant})),this.properties.push(new o.CardViewBoolItemModel({label:"Breastfeeding",key:"bf",value:this.entity.breastfeeding})),this.properties.push(new o.CardViewDateItemModel({key:"lpm",value:this.entity.lmp,label:"LMP",format:"dd MMM, yyyy"}))),this.properties.push(new o.CardViewTextItemModel({label:"Level of Adherence",key:"ts",value:this.entity.tbStatus})),this.properties.push(new o.CardViewDateItemModel({key:"na",value:this.entity.nextAppointment,label:"Next Appointment Date",format:"dd MMM, yyyy"}))},t.prototype.previousState=function(){window.history.back()},t.prototype.ngOnDestroy=function(){},t.ctorParameters=function(){return[{type:d.Router},{type:d.ActivatedRoute},{type:w},{type:e.ComponentFactoryResolver},{type:c.TdDialogService},{type:o.NotificationService}]},t=y([e.Component({selector:"lamis-clinic",template:'<div class="lamis-edit-form">\r\n    <div class="lamis-edit-form-container">\r\n        <mat-card>\r\n            <mat-card-header>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n                <adf-card-view [properties]="properties" editable="false"></adf-card-view>\r\n            </mat-card-content>\r\n            <mat-card-actions class="lamis-edit-form-actions">\r\n                <button mat-button (click)="previousState()">Back</button>\r\n                <button mat-raised-button color="warn" (click)="delete()">Delete</button>\r\n                <button mat-raised-button color="primary" (click)="edit()">Edit</button>\r\n            </mat-card-actions>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n'}),M("design:paramtypes",[d.Router,d.ActivatedRoute,w,e.ComponentFactoryResolver,c.TdDialogService,o.NotificationService])],t)}(),A=r,R=function(){function t(t,e,n,i){this.clinicService=t,this.notification=e,this.activatedRoute=n,this.appLoaderService=i,this.error=!1,this.today=A(),this.visitDates=[],this.selectedClinicAdr=[],this.oiList=[],this.adhereList=[],this.ColumnMode=m.ColumnMode,this.adr=!1}return t.prototype.createEntity=function(){return{}},t.prototype.ngOnInit=function(){var t=this;this.clinicService.opportunisticInfections().subscribe((function(e){return t.opportunisticInfections=e})),this.clinicService.adheres().subscribe((function(e){return t.adheres=e})),this.isSaving=!1,this.clinicService.getRegimenLines().subscribe((function(e){t.regimenLines=e})),this.activatedRoute.data.subscribe((function(e){var n=e.entity;t.commence=!!t.activatedRoute.snapshot.data.commence,t.entity=n&&n.body?n.body:n,void 0===t.entity&&(t.entity=t.createEntity());var i=t.activatedRoute.snapshot.paramMap.get("patientId");t.clinicService.getPatient(i).subscribe((function(e){t.entity.patient=e,t.entity.facility=e.facility,t.dateBirth=e.dateBirth,t.dateRegistration=e.dateRegistration,t.clinicService.getVisitDatesByPatient(t.entity.patient.id).subscribe((function(e){t.visitDates=e}))})),t.entity.commence&&t.entity.regimenType&&t.regimenLineChange(t.entity.regimenType),t.commence=t.commence||t.entity.commence,t.commence&&(t.entity.commence=!0,t.entity.regimenType&&t.regimenLineChange(t.entity.regimenType),"ART_TRANSFER_IN"===t.entity.patient.statusAtRegistration&&(t.dateRegistration=t.entity.patient.dateRegistration.clone().subtract(10,"years"),t.dateRegistration.isBefore(t.entity.patient.dateBirth)&&(t.dateRegistration=t.entity.patient.dateBirth.clone().add(3,"months")))),t.entity.id?(t.appointmentMin=t.entity.dateVisit.clone().add(14,"days"),t.appointmentMax=t.entity.dateVisit.clone().add(6,"months"),t.clinicService.getAdhereByClinic(t.entity.id).subscribe((function(e){t.adhereList=e.map((function(t){return t.adhere}))})),t.clinicService.adverseDrugReactions().subscribe((function(e){t.adverseDrugReactions=e,t.clinicService.getAdverseDrugReactionsByClinic(t.entity.id).subscribe((function(e){e.body&&e.body.length>0&&(t.adr=!0),t.adverseDrugReactions.forEach((function(n){var i=!1;e.body&&e.body.forEach((function(e){e.adverseDrugReaction.id===n.id&&(i=!0,t.selectedClinicAdr.push(e))})),i||t.selectedClinicAdr.push({adverseDrugReaction:n})})),t.selectedClinicAdr=C(t.selectedClinicAdr)}))})),t.clinicService.getOpportunisticInfectionsByClinic(t.entity.id).subscribe((function(e){t.oiList=e.map((function(t){return t.opportunisticInfection}))}))):(t.clinicService.adverseDrugReactions().subscribe((function(e){t.adverseDrugReactions=e,t.adverseDrugReactions.forEach((function(e){t.selectedClinicAdr.push({adverseDrugReaction:e})}))})),t.selectedClinicAdr=C(t.selectedClinicAdr))}))},t.prototype.updateValue=function(t,e,n){console.log("Edit",t,e,n),this.selectedClinicAdr=C(this.selectedClinicAdr.map((function(e){return e.adverseDrugReaction.id===n.id&&(e.severity=t),e}))),console.log("UPDATED!",n,t)},t.prototype.filterDates=function(t){var e=!1;return this.visitDates.forEach((function(n){0===t.diff(n,"days")&&(e=!0)})),this.entity.id&&0===t.diff(this.entity.dateVisit,"days")||!e},t.prototype.dateChanged=function(t){this.appointmentMax=t.clone().add(6,"months"),this.lmpMin=t.clone().subtract(2,"years"),this.appointmentMin=t.clone().add(14,"days")},t.prototype.entityCompare=function(t,e){return i.entityCompare(t,e)},t.prototype.previousState=function(){window.history.back()},t.prototype.save=function(){this.isSaving=!0;var t={clinic:this.entity,adrList:this.selectedClinicAdr.filter((function(t){return!!t.severity})),oiList:this.oiList,adhereList:this.adhereList};this.appLoaderService.open("Saving clinic visit.."),void 0!==this.entity.id?this.subscribeToSaveResponse(this.clinicService.update(t)):this.subscribeToSaveResponse(this.clinicService.create(t))},t.prototype.regimenLineChange=function(t){var e=this;this.clinicService.getRegimenByLine(t.id).subscribe((function(t){return e.regimens=t}))},t.prototype.subscribeToSaveResponse=function(t){var e=this;t.subscribe((function(t){return e.onSaveSuccess(t.body)}),(function(t){e.onSaveError(),e.onError(t.message)}))},t.prototype.onSaveSuccess=function(t){this.appLoaderService.close(),this.isSaving=!1,this.notification.openSnackMessage("Clinic visit successfully saved"),this.previousState()},t.prototype.onSaveError=function(){this.isSaving=!1,this.appLoaderService.close(),this.error=!0,this.notification.showError("Error occurred saving clinic visit; try again")},t.prototype.onError=function(t){this.appLoaderService.close(),this.notification.showError(t)},t.ctorParameters=function(){return[{type:w},{type:o.NotificationService},{type:d.ActivatedRoute},{type:i.AppLoaderService}]},t=y([e.Component({selector:"lamis-clinic-edit",template:'<div class="lamis-edit-form">\r\n    <div class="lamis-edit-form-container">\r\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #clinicForm="ngForm">\r\n            <mat-card class="default">\r\n                <mat-card-content>\r\n                    <ng-container *ngIf="commence === true">\r\n                        <div>\r\n                            <mat-form-field class="full-width">\r\n                                <input matInput [matDatepicker]="picker"\r\n                                       placeholder="ART Start Date"\r\n                                       [(ngModel)]="entity.dateVisit"\r\n                                       #visit="ngModel"\r\n                                       (dateChange)="dateChanged($event.value)"\r\n                                       [matDatepickerFilter]="filterDates.bind(this)"\r\n                                       [max]="today"\r\n                                       [min]="dateRegistration"\r\n                                       name="visit"\r\n                                       required>\r\n                                <mat-datepicker-toggle\r\n                                        matSuffix\r\n                                        [for]="picker">\r\n                                </mat-datepicker-toggle>\r\n                                <mat-datepicker #picker></mat-datepicker>\r\n                                <mat-error\r\n                                        *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)">\r\n                                    ART Start Date is required\r\n                                </mat-error>\r\n                                <mat-error\r\n                                        *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)">\r\n                                    Date of visit cannot be before {{dateRegistration | date: \'dd MMM, yyyy\'}}\r\n                                </mat-error>\r\n                                <mat-error\r\n                                        *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)">\r\n                                    ART Start Date cannot be in the future\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="row">\r\n                            <div class="col-md-6">\r\n                                <mat-form-field class="full-width">\r\n                                    <input matInput placeholder="CD4 at start of ART" [min]="0" type="number"\r\n                                           #cd4="ngModel" name="cd4" [(ngModel)]="entity.cd4"/>\r\n                                    <mat-error\r\n                                            *ngIf="cd4.errors && (cd4.dirty || cd4.touched) && (cd4.errors.min)">\r\n                                        Minimum CD4 is 0\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div class="col-md-6">\r\n                                <mat-form-field class="full-width">\r\n                                    <input matInput placeholder="CD4 %" [min]="0" [max]="100" type="number"\r\n                                           #cd4p="ngModel" name="cd4p" [(ngModel)]="entity.cd4p"/>\r\n                                    <mat-error\r\n                                            *ngIf="cd4p.errors && (cd4p.dirty || cd4p.touched) && (cd4p.errors.min)">\r\n                                        Minimum CD4 % is 0\r\n                                    </mat-error>\r\n                                    <mat-error\r\n                                            *ngIf="cd4p.errors && (cd4p.dirty || cd4p.touched) && (cd4p.errors.max)">\r\n                                        Maximum CD4 % is 100\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class="row">\r\n                            <div class="col-md-6">\r\n                                <mat-form-field class="full-width">\r\n                                    <mat-select [(ngModel)]="entity.regimenType"\r\n                                                placeholder="Original Regimen Line"\r\n                                                #rtype="ngModel" required name="rt"\r\n                                                [compareWith]="entityCompare"\r\n                                                (selectionChange)="regimenLineChange($event.value)">\r\n                                        <mat-option>None</mat-option>\r\n                                        <mat-option *ngFor="let line of regimenLines"\r\n                                                    [value]="line">{{line.description}}</mat-option>\r\n                                        <mat-error\r\n                                                *ngIf="rtype.errors && (rtype.dirty || rtype.touched) && (rtype.errors.required)">\r\n                                            Regimen Line is required\r\n                                        </mat-error>\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div class="col-md-6">\r\n                                <mat-form-field class="full-width">\r\n                                    <mat-select [(ngModel)]="entity.regimen"\r\n                                                placeholder="Original Regimen"\r\n                                                [compareWith]="entityCompare"\r\n                                                #rm="ngModel" required name="rm">\r\n                                        <mat-option>None</mat-option>\r\n                                        <mat-option *ngFor="let regimen of regimens"\r\n                                                    [value]="regimen">{{regimen.description}}</mat-option>\r\n                                        <mat-error\r\n                                                *ngIf="rm.errors && (rm.dirty || rm.touched) && (rm.errors.required)">\r\n                                            Regimen is required\r\n                                        </mat-error>\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </ng-container>\r\n                    <div *ngIf="commence === false || commence === undefined">\r\n                        <mat-form-field class="full-width">\r\n                            <input matInput [matDatepicker]="picker"\r\n                                   placeholder="Date of Visit"\r\n                                   [(ngModel)]="entity.dateVisit"\r\n                                   [matDatepickerFilter]="filterDates.bind(this)"\r\n                                   #visit="ngModel"\r\n                                   (dateChange)="dateChanged($event.value)"\r\n                                   [max]="today"\r\n                                   [min]="dateRegistration"\r\n                                   name="visit"\r\n                                   required>\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]="picker">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)">\r\n                                Date of visit is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)">\r\n                                Date of visit cannot be before {{dateRegistration | date: \'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)">\r\n                                Date of visit cannot be in the future\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class="full-width">\r\n                            <mat-select [(ngModel)]="entity.clinicStage"\r\n                                        placeholder="Clinical Stage"\r\n                                        #clinicStage="ngModel" name="cs">\r\n                                <mat-option>None</mat-option>\r\n                                <mat-option [value]="\'Stage I\'">Stage I</mat-option>\r\n                                <mat-option [value]="\'Stage II\'">Stage II</mat-option>\r\n                                <mat-option [value]="\'Stage III\'">Stage III</mat-option>\r\n                                <mat-option [value]="\'Stage IV\'">Stage IV</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class="full-width">\r\n                            <mat-select [(ngModel)]="entity.funcStatus"\r\n                                        placeholder="Functional Status"\r\n                                        #funcStatus="ngModel" name="fs">\r\n                                <mat-option>None</mat-option>\r\n                                <mat-option [value]="\'Working\'">Working</mat-option>\r\n                                <mat-option [value]="\'Ambulatory\'">Ambulatory</mat-option>\r\n                                <mat-option [value]="\'Bedridden\'">Bedridden</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class="full-width">\r\n                            <mat-select [(ngModel)]="entity.tbStatus"\r\n                                        placeholder="TB Status"\r\n                                        name="tb"\r\n                                        #tbStatus="ngModel">\r\n                                <mat-option>None</mat-option>\r\n                                <mat-option [value]="\'No sign or symptoms of TB\'">No sign or symptoms of TB</mat-option>\r\n                                <mat-option [value]="\'TB suspected and referred for evaluation\'">TB suspected and\r\n                                    referred\r\n                                    for evaluation\r\n                                </mat-option>\r\n                                <mat-option [value]="\'Currently on INH prophylaxis\'">Currently on INH prophylaxis\r\n                                </mat-option>\r\n                                <mat-option [value]="\'Currently on TB treatment\'">Currently on TB treatment</mat-option>\r\n                                <mat-option [value]="\'TB positive not on TB drugs\'">TB positive not on TB drugs\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class="full-width">\r\n                            <input matInput placeholder="Body weight(Kg)" [min]="0" [max]="250" type="number"\r\n                                   #weight="ngModel" name="weight" [(ngModel)]="entity.bodyWeight"/>\r\n                            <mat-error\r\n                                    *ngIf="weight.errors && (weight.dirty || weight.touched) && (weight.errors.min)">\r\n                                Minimum body weight is 0\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="weight.errors && (weight.dirty || weight.touched) && (weight.errors.max)">\r\n                                Maximum body weight is 250\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class="full-width">\r\n                            <input matInput placeholder="Height (m)" [min]="0" [max]="1.8" type="number"\r\n                                   #height="ngModel" name="height" [(ngModel)]="entity.height"/>\r\n                            <mat-error\r\n                                    *ngIf="height.errors && (height.dirty || height.touched) && (height.errors.min)">\r\n                                Minimum height is 0\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="height.errors && (height.dirty || height.touched) && (height.errors.max)">\r\n                                Maximum height is 1.8m\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <fieldset>\r\n                        <h6>Blood Pressure(mmHg)</h6>\r\n                        <div class="row">\r\n                            <div class="col-md-3">\r\n                                <mat-form-field class="full-width">\r\n                                    <input matInput placeholder="Systolic"\r\n                                           name="bp1" type="number"\r\n                                           [max]="190"\r\n                                           [min]="70"\r\n                                           [required]="!!entity.bp2"\r\n                                           #bp1="ngModel" [(ngModel)]="entity.bp1"/>\r\n                                    <mat-error\r\n                                            *ngIf="bp1.errors && (bp1.dirty || bp1.touched) && (bp1.errors.max)">\r\n                                        Maximum Systolic is 190\r\n                                    </mat-error>\r\n                                    <mat-error\r\n                                            *ngIf="bp1.errors && (bp1.dirty || bp1.touched) && (bp1.errors.min)">\r\n                                        Minimum Systolic is 70\r\n                                    </mat-error>\r\n                                    <mat-error\r\n                                            *ngIf="bp1.errors && (bp1.dirty || bp1.touched) && (bp1.errors.required)">\r\n                                        Systolic is required\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div class="col-md-3">\r\n                                <mat-form-field class="full-width">\r\n                                    <input matInput placeholder="Diastolic"\r\n                                           name="bp2" type="number"\r\n                                           [max]="100"\r\n                                           [min]="40"\r\n                                           [required]="!!entity.bp1"\r\n                                           #bp2="ngModel" [(ngModel)]="entity.bp2"/>\r\n                                    <mat-error\r\n                                            *ngIf="bp2.errors && (bp2.dirty || bp2.touched) && (bp2.errors.max)">\r\n                                        Maximum Diastolic is 100\r\n                                    </mat-error>\r\n                                    <mat-error\r\n                                            *ngIf="bp2.errors && (bp2.dirty || bp2.touched) && (bp2.errors.min)">\r\n                                        Minimum Diastolic is 40\r\n                                    </mat-error>\r\n                                    <mat-error\r\n                                            *ngIf="bp2.errors && (bp2.dirty || bp2.touched) && (bp2.errors.required)">\r\n                                        Diastolic is required\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </fieldset>\r\n                    <div *ngIf="entity.patient && entity.patient.gender === \'FEMALE\'">\r\n                        <mat-form-field class="full-width">\r\n                            <mat-select [(ngModel)]="entity.pregnancyStatus"\r\n                                        placeholder="Pregnancy Status"\r\n                                        #pregStatus="ngModel" name="ps">\r\n                                <mat-option>None</mat-option>\r\n                                <mat-option [value]="1">Not Pregnant</mat-option>\r\n                                <mat-option [value]="2">Pregnant</mat-option>\r\n                                <mat-option [value]="3">Breastfeeding</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf="entity.patient && entity.patient.gender === \'FEMALE\' && lmpMin">\r\n                        <mat-form-field class="full-width">\r\n                            <input matInput [matDatepicker]="picker1"\r\n                                   placeholder="LMP"\r\n                                   [(ngModel)]="entity.lmp"\r\n                                   #lmp="ngModel"\r\n                                   [max]="entity.dateVisit"\r\n                                   [min]="lmpMin"\r\n                                   name="lmp">\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]="picker1">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker1></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf="lmp.errors && (lmp.dirty || lmp.touched) && (lmp.errors.max)">\r\n                                LMP cannot be after {{entity.dateVisit | date: \'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="lmp.errors && (lmp.dirty || lmp.touched) && (lmp.errors.min)">\r\n                                LMP cannot be before {{lmpMin | date: \'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class="full-width">\r\n                            <mat-select [(ngModel)]="oiList"\r\n                                        placeholder="Opportunistic Infections"\r\n                                        [compareWith]="entityCompare"\r\n                                        name="ois"\r\n                                        #oiIds="ngModel" multiple>\r\n                                <mat-option>None</mat-option>\r\n                                <mat-option *ngFor="let oi of opportunisticInfections"\r\n                                            [value]="oi">{{oi.description}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-4">\r\n                            <mat-checkbox [(ngModel)]="adr"\r\n                                          name="ad">Adverse Drug Reaction Screened?\r\n                            </mat-checkbox>\r\n                        </div>\r\n                        <div style="height: 300px; overflow-y: auto;" *ngIf="adr" class="col-md-8">\r\n                            <adf-datatable [rows]="selectedClinicAdr"\r\n                                           [stickyHeader]="true">\r\n                                <data-columns>\r\n                                    <data-column key="adverseDrugReaction.description" title="Description"\r\n                                                 sortable="true"></data-column>\r\n                                    <data-column key="severity" title="Severity" sortable="false">\r\n                                        <ng-template let-context="$implicit">\r\n                                            <mat-form-field class="full-width">\r\n                                                <mat-select autofocus\r\n                                                            [value]="context.row.getValue(\'severity\')"\r\n                                                            name="severity"\r\n                                                            (valueChange)="updateValue($event, \'severity\', context.row.getValue(\'adverseDrugReaction\'))">\r\n                                                    <mat-option>None</mat-option>\r\n                                                    <mat-option [value]="\'Grade 1\'">Grade 1</mat-option>\r\n                                                    <mat-option [value]="\'Grade 2\'">Grade 2</mat-option>\r\n                                                    <mat-option [value]="\'Grade 3\'">Grade 3</mat-option>\r\n                                                    <mat-option [value]="\'Grade 4\'">Grade 4</mat-option>\r\n                                                </mat-select>\r\n                                            </mat-form-field>\r\n                                        </ng-template>\r\n                                    </data-column>\r\n                                </data-columns>\r\n                            </adf-datatable>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-select [(ngModel)]="entity.adherenceLevel"\r\n                                            placeholder="Level of Adherence"\r\n                                            #adherence="ngModel" name="al">\r\n                                    <mat-option>None</mat-option>\r\n                                    <mat-option [value]="\'Good\'">Good</mat-option>\r\n                                    <mat-option [value]="\'Fair\'">Fair</mat-option>\r\n                                    <mat-option [value]="\'Poor\'">Poor</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width"\r\n                                            *ngIf="entity.adherenceLevel === \'Fair\' || entity.adherenceLevel === \'Poor\'">\r\n                                <mat-select [(ngModel)]="adhereList"\r\n                                            placeholder="Adherence"\r\n                                            name="ads"\r\n                                            [compareWith]="entityCompare"\r\n                                            #adrIds="ngModel" multiple>\r\n                                    <mat-option>None</mat-option>\r\n                                    <mat-option *ngFor="let adhere of adheres"\r\n                                                [value]="adhere">{{adhere.description}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div *ngIf="!!appointmentMin">\r\n                        <mat-form-field class="full-width">\r\n                            <input matInput [matDatepicker]="picker2"\r\n                                   placeholder="Date of Next Appointment"\r\n                                   [(ngModel)]="entity.nextAppointment"\r\n                                   #na="ngModel"\r\n                                   [min]="appointmentMin"\r\n                                   [max]="appointmentMax"\r\n                                   name="na"\r\n                                   required>\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]="picker2">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker2></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf="na.errors && (na.dirty || na.touched) && (na.errors.required)">\r\n                                Date of next appointment is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="na.errors && (na.dirty || na.touched) && (na.errors.max)">\r\n                                Date of next appointment cannot be after {{appointmentMax | date: \'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="na.errors && (na.dirty || na.touched) && (na.errors.min)">\r\n                                Date of next appointment cannot be before {{appointmentMin | date: \'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class="full-width">\r\n                            <textarea matInput placeholder="Clinical Notes"\r\n                                      cols="30"\r\n                                      rows="3"\r\n                                      name="notes"\r\n                                      #note="ngModel" [(ngModel)]="entity.notes"></textarea>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <mat-card-actions class="lamis-edit-form-actions">\r\n                        <button mat-raised-button type="button" (click)="previousState()">Back</button>\r\n                        <button mat-raised-button color=\'primary\'\r\n                                [disabled]="clinicForm.invalid || isSaving"\r\n                                type="submit">\r\n                            {{entity.id !== undefined ? \'Update\' : \'Save\'}}\r\n                        </button>\r\n                    </mat-card-actions>\r\n                </mat-card-content>\r\n            </mat-card>\r\n        </form>\r\n    </div>\r\n</div>\r\n'}),M("design:paramtypes",[w,o.NotificationService,d.ActivatedRoute,i.AppLoaderService])],t)}(),E=function(){function t(t){this.service=t}return t.prototype.resolve=function(t,e){var n=t.params.id?t.params.id:null;return n?this.service.findByUuid(n).pipe(a.filter((function(t){return t.ok})),a.map((function(t){return t.body}))):u.of({})},t.ctorParameters=function(){return[{type:w}]},t=y([e.Injectable(),M("design:paramtypes",[w])],t)}(),L=[{path:"",data:{title:"Clinic Visit",breadcrumb:"CLINIC VISIT"},children:[{path:":id/patient/:patientId/view",component:k,resolve:{entity:E},data:{authorities:["ROLE_USER"],title:"Clinic Visit",breadcrumb:"CLINIC VISIT"}},{path:"patient/:patientId/new",component:R,data:{authorities:["ROLE_DEC"],title:"Clinic Visit",breadcrumb:"ADD CLINIC VISIT"}},{path:"art-commencement/patient/:patientId/new",component:R,data:{authorities:["ROLE_DEC"],title:"ART Commencement",breadcrumb:"ADD ART COMMENCEMENT",commence:!0}},{path:":id/patient/:patientId/edit",component:R,resolve:{entity:E},data:{authorities:["ROLE_DEC"],title:"Clinic Visit Edit",breadcrumb:"CLINIC VISIT EDIT"}}]}],x=function(){function t(t){this.clinicService=t,this.properties=[]}return t.prototype.ngOnInit=function(){var t=this;this.clinicService.latestVisit(this.patientId).subscribe((function(e){t.clinic=e,t.buildProperties()}))},t.prototype.buildProperties=function(){this.properties.push(new o.CardViewDateItemModel({key:"dv",value:this.clinic.dateVisit,label:"Last Clinic Visit",format:"dd MMM, yyyy"})),this.properties.push(new o.CardViewDateItemModel({key:"nv",value:this.clinic.nextAppointment,label:"Next Clinic Visit",format:"dd MMM, yyyy"})),this.properties.push(new o.CardViewTextItemModel({label:"Functional Status",key:"fs",value:this.clinic.funcStatus})),this.properties.push(new o.CardViewTextItemModel({label:"Clinical Stage",key:"cs",value:this.clinic.clinicStage})),this.properties.push(new o.CardViewTextItemModel({label:"TB Status",key:"ts",value:this.clinic.tbStatus})),this.properties.push(new o.CardViewFloatItemModel({label:"Body Weight(Kg)",key:"bw",value:this.clinic.bodyWeight}))},t.ctorParameters=function(){return[{type:w}]},y([e.Input(),M("design:type",Number)],t.prototype,"patientId",void 0),t=y([e.Component({selector:"clinic-widget",template:'<adf-card-view [properties]="properties"></adf-card-view>\n'}),M("design:paramtypes",[w])],t)}();
/*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
function D(){return[l.MatAutocompleteModule,l.MatButtonModule,l.MatCardModule,l.MatCheckboxModule,l.MatChipsModule,l.MatDatepickerModule,l.MatDialogModule,l.MatGridListModule,l.MatIconModule,l.MatInputModule,l.MatListModule,l.MatNativeDateModule,l.MatOptionModule,l.MatProgressSpinnerModule,l.MatRadioModule,l.MatRippleModule,l.MatSelectModule,l.MatSlideToggleModule,l.MatTableModule,l.MatTabsModule,l.MatMenuModule,l.MatProgressBarModule,l.MatSidenavModule,l.MatSnackBarModule,l.MatToolbarModule,l.MatTooltipModule,p.MatDatetimepickerModule,p.MatNativeDatetimeModule]}var V=function(){function t(){}return t=y([e.NgModule({imports:D(),exports:D()})],t)}(),T=function(){function t(){}return t=y([e.NgModule({imports:[s.CommonModule,V,o.CoreModule],declarations:[x],entryComponents:[x],exports:[x],providers:[]})],t)}(),P=function(){function t(){}return t=y([e.NgModule({declarations:[k,R],imports:[s.CommonModule,l.MatInputModule,l.MatIconModule,l.MatCardModule,l.MatSelectModule,l.MatButtonModule,d.RouterModule.forChild(L),l.MatProgressBarModule,c.CovalentMessageModule,c.CovalentDialogsModule,l.MatListModule,o.CoreModule,T,h.FormsModule,h.ReactiveFormsModule,i.MatDateFormatModule,f.CustomFormsModule,i.LamisSharedModule,m.NgxDatatableModule],exports:[k,R],entryComponents:[],providers:[E]})],t)}(),N=r,F=function(){function t(t,e){this.http=t,this.serverUrl=e,this.resourceUrl="",this.resourceUrl=e.SERVER_API_URL+"/api/chronic-cares"}return t.prototype.create=function(t){var e=this,n=this.convertDateFromClient(t);return this.http.post(this.resourceUrl,n,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.update=function(t){var e=this,n=this.convertDateFromClient(t);return this.http.put(this.resourceUrl,n,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.find=function(t){var e=this;return this.http.get(this.resourceUrl+"/"+t,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.findByUuid=function(t){var e=this;return this.http.get(this.resourceUrl+"/by-uuid/"+t,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.delete=function(t){return this.http.delete(this.resourceUrl+"/"+t,{observe:"response"})},t.prototype.getDmScreens=function(){return this.http.get(this.resourceUrl+"/dm-screens")},t.prototype.getTbScreens=function(){return this.http.get(this.resourceUrl+"/tb-screens")},t.prototype.getDmScreenByChronicCare=function(t){return this.http.get(this.resourceUrl+"/"+t+"/dm-screens")},t.prototype.getTbScreenByChronicCare=function(t){return this.http.get(this.resourceUrl+"/"+t+"/tb-screens")},t.prototype.getVisitDatesByPatient=function(t){return this.http.get(this.resourceUrl+"/patient/"+t+"/visit-dates").pipe(a.map((function(t){return t.forEach((function(t){return N(t)})),t})))},t.prototype.convertDateFromServer=function(t){return t.body&&(t.body.dateLastCd4=null!=t.body.dateLastCd4?N(t.body.dateLastCd4):null,t.body.dateVisit=null!=t.body.dateVisit?N(t.body.dateVisit):null,t.body.dateLastViralLoad=null!=t.body.dateLastViralLoad?N(t.body.dateLastViralLoad):null,t.body.dateStartedTbTreatment=null!=t.body.dateStartedTbTreatment?N(t.body.dateStartedTbTreatment):null),t},t.prototype.convertDateFromClient=function(t){return t.chronicCare=Object.assign({},t.chronicCare,{dateLastViralLoad:null!=t.chronicCare.dateLastViralLoad&&t.chronicCare.dateLastViralLoad.isValid()?t.chronicCare.dateLastViralLoad.format(i.DATE_FORMAT):null,dateVisit:null!=t.chronicCare.dateVisit&&t.chronicCare.dateVisit.isValid()?t.chronicCare.dateVisit.format(i.DATE_FORMAT):null,dateLastCd4:null!=t.chronicCare.dateLastCd4&&t.chronicCare.dateLastCd4.isValid()?t.chronicCare.dateLastCd4.format(i.DATE_FORMAT):null,dateStartedTbTreatment:null!=t.chronicCare.dateStartedTbTreatment&&t.chronicCare.dateStartedTbTreatment.isValid()?t.chronicCare.dateStartedTbTreatment.format(i.DATE_FORMAT):null}),t},t.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[i.SERVER_API_URL_CONFIG]}]}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(n.HttpClient),e.ɵɵinject(i.SERVER_API_URL_CONFIG))},token:t,providedIn:"root"}),t=y([e.Injectable({providedIn:"root"}),b(1,e.Inject(i.SERVER_API_URL_CONFIG)),M("design:paramtypes",[n.HttpClient,Object])],t)}(),B=function(){function t(t,e,n,i,a,r){this.router=t,this.route=e,this.chronicCareService=n,this._dialogService=i,this.notificationService=a,this.clinicService=r,this.properties=[]}return t.prototype.ngOnInit=function(){var t=this;this.route.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n;var i=t.route.snapshot.paramMap.get("patientId");t.clinicService.getPatient(i).subscribe((function(e){return t.entity.patient=e})),t.buildProperties()}))},t.prototype.edit=function(){this.router.navigate(["/","chronic-cares",this.entity.uuid,"patient",this.entity.patient.uuid,"edit"])},t.prototype.delete=function(){var t=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this chronic care visit, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(e){e&&t.chronicCareService.delete(t.entity.id).subscribe((function(e){e.ok?t.router.navigate(["patients"]):t.notificationService.showError("Error deleting visit, please try again")}))}))},t.prototype.buildProperties=function(){},t.prototype.previousState=function(){window.history.back()},t.ctorParameters=function(){return[{type:d.Router},{type:d.ActivatedRoute},{type:F},{type:c.TdDialogService},{type:o.NotificationService},{type:w}]},t=y([e.Component({selector:"chronic-care-detail",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <mat-card>\n            <mat-card-header>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-card-view [properties]="properties" editable="false"></adf-card-view>\n            </mat-card-content>\n            <mat-card-actions class="lamis-edit-form-actions">\n                <button mat-button (click)="previousState()">Back</button>\n                <button mat-raised-button color="warn" (click)="delete()">Delete</button>\n                <button mat-raised-button color="primary" (click)="edit()">Edit</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n'}),M("design:paramtypes",[d.Router,d.ActivatedRoute,F,c.TdDialogService,o.NotificationService,w])],t)}(),U=r,_=function(){function t(t,e,n,i,a){this.clinicService=t,this.chronicCareService=e,this.notification=n,this.activatedRoute=i,this.appLoaderService=a,this.today=U(),this.tbs=[],this.dms=[],this.visitDates=[],this.isSaving=!1,this.bmi="",this.bmiCalculated=""}return t.prototype.createEntity=function(){return{}},t.prototype.ngOnInit=function(){var t=this;this.activatedRoute.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,void 0===t.entity&&(t.entity=t.createEntity());var i=t.activatedRoute.snapshot.paramMap.get("patientId");t.clinicService.getPatient(i).subscribe((function(e){t.entity.patient=e,t.entity.facility=e.facility,t.chronicCareService.getVisitDatesByPatient(t.entity.patient.id).subscribe((function(e){t.visitDates=e}))})),t.calculateBmi()}))},t.prototype.filterDates=function(t){var e=!1;return this.visitDates.forEach((function(n){0===t.diff(n,"days")&&(e=!0)})),this.entity.id&&0===t.diff(this.entity.dateVisit,"days")||!e},t.prototype.previousState=function(){window.history.back()},t.prototype.calculateBmi=function(){if(this.entity.bodyWeight&&this.entity.height){var t=this.entity.bodyWeight/Math.pow(this.entity.height,2);this.bmi=t<18.5?"<18.5 (Underweight)":t<24.9?"18.5 - 24.9 (Healthy)":t<29.9?"25.0 - 29.9 (Overweight)":t<40?"30 - 40 (Obesity)":">40 (Morbid Obesity)",this.bmiCalculated=t.toFixed(1)}else this.bmi=""},t.prototype.save=function(){this.isSaving=!0,this.appLoaderService.open("Saving chronic care visit.."),void 0!==this.entity.id?this.subscribeToSaveResponse(this.chronicCareService.update({chronicCare:this.entity,tbs:this.tbs,dms:this.dms})):this.subscribeToSaveResponse(this.chronicCareService.create({chronicCare:this.entity,tbs:this.tbs,dms:this.dms}))},t.prototype.subscribeToSaveResponse=function(t){var e=this;t.subscribe((function(t){return e.onSaveSuccess(t.body)}),(function(t){e.onSaveError(),e.onError(t.message)}))},t.prototype.onSaveSuccess=function(t){this.appLoaderService.close(),this.isSaving=!1,this.notification.openSnackMessage("Chronic Care visit successfully saved"),this.previousState()},t.prototype.onSaveError=function(){this.isSaving=!1,this.appLoaderService.close(),this.notification.showError("Error occurred saving chronic care visit; try again")},t.prototype.onError=function(t){this.appLoaderService.close(),this.notification.showError(t)},t.ctorParameters=function(){return[{type:w},{type:F},{type:o.NotificationService},{type:d.ActivatedRoute},{type:i.AppLoaderService}]},t=y([e.Component({selector:"chronic-care-edit",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #careForm="ngForm">\n            <mat-card class="default">\n                <mat-card-content>\n                    <mat-vertical-stepper #stepper *ngIf="entity.patient">\n                        <mat-step>\n                            <ng-template matStepLabel>Details</ng-template>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <input matInput [matDatepicker]="picker"\n                                               placeholder="Date of Visit"\n                                               [(ngModel)]="entity.dateVisit"\n                                               #visit="ngModel"\n                                               [matDatepickerFilter]="filterDates.bind(this)"\n                                               [max]="today"\n                                               [min]="entity.patient.dateRegistration"\n                                               name="visit"\n                                               required>\n                                        <mat-datepicker-toggle\n                                                matSuffix\n                                                [for]="picker">\n                                        </mat-datepicker-toggle>\n                                        <mat-datepicker #picker></mat-datepicker>\n                                        <mat-error\n                                                *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)">\n                                            Date of Visit is required\n                                        </mat-error>\n                                        <mat-error\n                                                *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)">\n                                            Date of Visit cannot be before {{entity.patient.dateRegistration}}\n                                        </mat-error>\n                                        <mat-error\n                                                *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)">\n                                            Date of Visit cannot be in the future\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row ">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <mat-label class="form-label">Type of Client:</mat-label>\n                                        <mat-select name="clinicType" [(ngModel)]="entity.clientType" name="type">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]="\'PLHIV newly enrolled into HIV Care & treatment\'">PLHIV\n                                                newly enrolled into HIV Care & treatment\n                                            </mat-option>\n                                            <mat-option [value]="\'Registered PLHIV on first time visit this FY\'">\n                                                Registered PLHIV on first time visit this FY\n                                            </mat-option>\n                                            <mat-option\n                                                    [value]="\'Registered PLHIV on follow up/subsequent visit this FY\'">\n                                                Registered PLHIV on follow up/subsequent visit this FY\n                                            </mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <mat-label class="form-label">ART Status</mat-label>\n                                        <mat-select name="currentStatus" [(ngModel)]="entity.currentStatus"\n                                                    name="status">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]="\'Pre-ART\'">Pre-ART</mat-option>\n                                            <mat-option [value]="\'ART\'">ART</mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6" *ngIf="entity.patient.gender === \'Female\'">\n                                    <mat-form-field class="full-width">\n                                        <mat-label class="form-label">Pregnancy Status:</mat-label>\n                                        <mat-select name="pregnancyStatus" [(ngModel)]="entity.pregnancyStatus"\n                                                    name="preg">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]="\'Pregnant\'">Pregnant</mat-option>\n                                            <mat-option [value]="\'Non-Pregnant\'">Non-Pregnant</mat-option>\n                                            <mat-option [value]="\'Post Partum\'">Post Partum</mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <mat-label class="form-label">Clinical Stage:</mat-label>\n                                        <mat-select name="clinicStage" [(ngModel)]="entity.clinicStage" name="stage">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]="\'Stage I\'">Stage I</mat-option>\n                                            <mat-option [value]="\'Stage II\'">Stage II</mat-option>\n                                            <mat-option [value]="\'Stage III\'">Stage III</mat-option>\n                                            <mat-option [value]="\'Stage IV\'">Stage IV</mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <mat-label class="form-label">Last CD4 Count:</mat-label>\n                                        <input matInput type="number" name="lastCd4"\n                                               #lastCd4="ngModel"\n                                               [(ngModel)]="entity.lastCd4"\n                                               [required]="!!entity.dateLastCd4"\n                                               [min]="1"/>\n                                        <mat-error\n                                                *ngIf="lastCd4.errors && (lastCd4.dirty || lastCd4.touched) && (lastCd4.errors.min)">\n                                            Minimum value is 1\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <input matInput [matDatepicker]="picker1"\n                                               placeholder="Date of Last CD4"\n                                               [(ngModel)]="entity.dateLastCd4"\n                                               [required]="!!entity.lastCd4"\n                                               #cd4="ngModel"\n                                               name="cd4"\n                                               [max]="today"\n                                               [min]="entity.patient.dateRegistration">\n                                        <mat-datepicker-toggle\n                                                matSuffix\n                                                [for]="picker1">\n                                        </mat-datepicker-toggle>\n                                        <mat-datepicker #picker1></mat-datepicker>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <mat-label class="form-label">Last Viral Load Count:</mat-label>\n                                        <input matInput type="number" name="lastViral"\n                                               #lastViral="ngModel"\n                                               [(ngModel)]="entity.lastViralLoad"\n                                               [required]="!!entity.dateLastViralLoad"\n                                               [min]="1"/>\n                                        <mat-error\n                                                *ngIf="lastViral.errors && (lastViral.dirty || lastViral.touched) && (lastViral.errors.min)">\n                                            Minimum value is 1\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <input matInput [matDatepicker]="picker2"\n                                               placeholder="Date of Last Viral Load"\n                                               [(ngModel)]="entity.dateLastViralLoad"\n                                               [required]="!!entity.lastViralLoad"\n                                               #viral="ngModel"\n                                               name="viral"\n                                               [max]="today"\n                                               [min]="entity.patient.dateRegistration">\n                                        <mat-datepicker-toggle\n                                                matSuffix\n                                                [for]="picker2">\n                                        </mat-datepicker-toggle>\n                                        <mat-datepicker #picker2></mat-datepicker>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.eligibleCd4" [indeterminate]="true" name="cd">\n                                        Eligible for CD4\n                                    </mat-checkbox>\n                                </div>\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.eligibleViralLoad" [indeterminate]="true"\n                                                  name="vr">\n                                        Eligible for Viral Load\n                                    </mat-checkbox>\n                                </div>\n                            </div>\n                            <div>\n                                <button mat-button type="button" matStepperNext>Next</button>\n                            </div>\n                        </mat-step>\n                        <mat-step>\n                            <ng-template matStepLabel>Co-trimoxazole Eligibility Assessment</ng-template>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-list>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.plhivSymtomaticHiv"\n                                                          name="symt"\n                                                          [indeterminate]="true">\n                                                PLHIV with symptomatic HIV\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.plhivAsymtomaticCD4L500"\n                                                          name="sdym"\n                                                          [indeterminate]="true">\n                                                Asymptomatic PLHIV with CD4 count &lt;500 cells/mm<sup>3</sup>\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.plhivActiveTb"\n                                                          name="activeTb"\n                                                          [indeterminate]="true">\n                                                PLHIV with active TB\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item *ngIf="entity.patient.gender === \'Female\'">\n                                            <mat-checkbox [(ngModel)]="entity.plhivPregnantAfter1stTrimester"\n                                                          name="ftm"\n                                                          [indeterminate]="true">\n                                                Pregnant PLHIV after the first trimester\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.plhivL5Years"\n                                                          name="l5"\n                                                          [indeterminate]="true">\n                                                LHIV &le; 5 years\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                    </mat-list>\n                                </div>\n                            </div>\n                            <div>\n                                <button mat-button type="button" matStepperPrevious>Back</button>\n                                <button mat-button type="button" matStepperNext>Next</button>\n                            </div>\n                        </mat-step>\n                        <mat-step>\n                            <ng-template matStepLabel>TB Screening</ng-template>\n                            <div class="row ">\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.tbTreatment" [indeterminate]="true"\n                                                  name="tbTreatment">\n                                        Are you currently on TB Treatment?\n                                    </mat-checkbox>\n                                    <div>\n                                    </div>\n                                </div>\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <input matInput [matDatepicker]="picker3"\n                                               placeholder="Date Started"\n                                               [(ngModel)]="entity.dateStartedTbTreatment"\n                                               [required]="entity.tbTreatment"\n                                               #started="ngModel"\n                                               name="started"\n                                               [max]="today"\n                                               [min]="entity.patient.dateRegistration">\n                                        <mat-datepicker-toggle\n                                                matSuffix\n                                                [for]="picker3">\n                                        </mat-datepicker-toggle>\n                                        <mat-datepicker #picker3></mat-datepicker>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row ">\n                                <div class="col-md-6">\n                                    <mat-list>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.tbReferred"\n                                                          name="tbReferred" [indeterminate]="true">\n                                                Referred for TB Diagnosis\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.ipt"\n                                                          name="ipt"\n                                                          [indeterminate]="true">\n                                                Are you currently on Isoniazid Preventive Therapy (IPT)?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.inh"\n                                                          name="inh"\n                                                          [indeterminate]="true">\n                                                Have you received INH within the past 2 year?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.eligibleIpt"\n                                                          name="iptEl"\n                                                          [indeterminate]="true">\n                                                Eligible for IPT\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                    </mat-list>\n                                </div>\n                            </div>\n                        </mat-step>\n                        <mat-step>\n                            <ng-template matStepLabel>Nutritional Assessment</ng-template>\n                            <div class="row">\n                                <div class="col-md-3">\n                                    <mat-form-field class="full-width">\n                                        <input matInput placeholder="Body weight(Kg)" [min]="1" [max]="250"\n                                               type="number"\n                                               (change)="calculateBmi()"\n                                               #weight="ngModel" name="weight" [(ngModel)]="entity.bodyWeight"/>\n                                        <mat-error\n                                                *ngIf="weight.errors && (weight.dirty || weight.touched) && (weight.errors.min)">\n                                            Minimum body weight is 1\n                                        </mat-error>\n                                        <mat-error\n                                                *ngIf="weight.errors && (weight.dirty || weight.touched) && (weight.errors.max)">\n                                            Maximum body weight is 250\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-3">\n                                    <mat-form-field class="full-width">\n                                        <input matInput placeholder="Height (m)" [min]="0.2" [max]="1.8" type="number"\n                                               #height="ngModel" name="height" [(ngModel)]="entity.height"\n                                               (change)="calculateBmi()"/>\n                                        <mat-error\n                                                *ngIf="height.errors && (height.dirty || height.touched) && (height.errors.min)">\n                                            Minimum height is 0.2\n                                        </mat-error>\n                                        <mat-error\n                                                *ngIf="height.errors && (height.dirty || height.touched) && (height.errors.max)">\n                                            Maximum height is 1.8m\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-3">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>BMI Calculated</mat-label>\n                                        <input matInput disabled [value]="bmiCalculated">\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-3">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>BMI Range</mat-label>\n                                        <input matInput disabled [value]="bmi">\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-4">\n                                    <mat-form-field class="full-width">\n                                        <mat-label> MUAC (cm) (under 5yrs):</mat-label>\n                                        <input matInput [min]="2" [max]="26.5"\n                                               type="number"\n                                               #muac="ngModel" name="muac" [(ngModel)]="entity.muac"/>\n                                        <mat-error\n                                                *ngIf="muac.errors && (muac.dirty || muac.touched) && (muac.errors.min)">\n                                            Minimum Mid Upper Arm Circumference is 2\n                                        </mat-error>\n                                        <mat-error\n                                                *ngIf="muac.errors && (muac.dirty || muac.touched) && (muac.errors.max)">\n                                            Maximum Mid Upper Arm Circumference is 26.5\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-4">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>UAC Pediatrics</mat-label>\n                                        <mat-select name="muacPediatrics"\n                                                    [(ngModel)]="entity.muacPediatrics">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]="\'<11.5cm (Severe Acute Malnutrition)\'">&lt;11.5cm\n                                                (Severe Acute Malnutrition)\n                                            </mat-option>\n                                            <mat-option [value]="\'11.5-12.5cm (Moderate Acute Malnutrition)\'">\n                                                11.5-12.5cm (Moderate Acute Malnutrition)\n                                            </mat-option>\n                                            <mat-option [value]="\'>12.5cm (Well nourished)\'">&gt;12.5cm (Well\n                                                nourished)\n                                            </mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-4" *ngIf="entity.patient.gender === \'Female\'">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>MUAC Pregnant:</mat-label>\n                                        <mat-select name="muacPregnant" [(ngModel)]="entity.muacPregnant">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]="\'<23cm (Underweight)\'">&lt;23cm (Underweight)\n                                            </mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-list>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.supplementaryFood"\n                                                          name="supp"\n                                                          [indeterminate]="true">\n                                                Provided with Therapeutic/Supplementary\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.nutritionalStatusReferred"\n                                                          name="nutr"\n                                                          [indeterminate]="true">\n                                                Referred\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                    </mat-list>\n                                </div>\n                            </div>\n                            <div>\n                                <button mat-button type="button" matStepperPrevious>Back</button>\n                                <button mat-button type="button" matStepperNext>Next</button>\n                            </div>\n                        </mat-step>\n                        <mat-step>\n                            <ng-template matStepLabel>Gender Based Violence Screening</ng-template>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-list>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.sexuallyAbused"\n                                                          name="sexuallyAbused"\n                                                          [indeterminate]="true">\n                                                Have you been beaten, sexually coerced, raped or threatened or any of\n                                                these by your partner or anyone else?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.sexuallyAbusedReferred"\n                                                          *ngIf="entity.sexuallyAbused"\n                                                          name="sexuallyAbusedReferred"\n                                                          [indeterminate]="true">\n                                                Referred for Post GBV Care\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.essentialsDeniedByPartner"\n                                                          name="denied"\n                                                          [indeterminate]="true">\n                                                Does your partner/family deny you food, shelter, freedom of movement,\n                                                livelihood or finance to access health care?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.essentialsDeniedByPartnerReferred"\n                                                          *ngIf="entity.essentialsDeniedByPartner"\n                                                          name="deniedReferred"\n                                                          [indeterminate]="true">\n                                                Referred for Post GBV Care\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                    </mat-list>\n                                </div>\n                            </div>\n                            <div>\n                                <button mat-button type="button" matStepperPrevious>Back</button>\n                                <button mat-button type="button" matStepperNext>Next</button>\n                            </div>\n                        </mat-step>\n                        <mat-step>\n                            <ng-template matStepLabel>Screening for Chronic Conditions</ng-template>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.hypertensive"\n                                                  name="hyper"\n                                                  [indeterminate]="true">\n                                        Known Hypertensive?\n                                    </mat-checkbox>\n                                </div>\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.firstHypertensive"\n                                                  *ngIf="entity.hypertensive"\n                                                  name="hyper1s"\n                                                  [indeterminate]="true">\n                                        First time identified within the programme\n                                    </mat-checkbox>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.bpAbove14090"\n                                                  name="bpAbove"\n                                                  [indeterminate]="true">\n                                        BP above 140/90mmHg\n                                    </mat-checkbox>\n                                </div>\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.bpReferred"\n                                                  *ngIf="entity.bpAbove14090"\n                                                  name="bpReferred"\n                                                  [indeterminate]="true">\n                                        Referred for further care\n                                    </mat-checkbox>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.diabetic"\n                                                  name="diabetic"\n                                                  [indeterminate]="true">\n                                        Known Diabetic?\n                                    </mat-checkbox>\n                                </div>\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.firstDiabetic"\n                                                  *ngIf="entity.diabetic"\n                                                  name="diabetic1st"\n                                                  [indeterminate]="true">\n                                        First Time Identified Within the Programme?\n                                    </mat-checkbox>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.dmReferred"\n                                                  name="dm"\n                                                  [indeterminate]="true">\n                                        Referred for further care\n                                    </mat-checkbox>\n                                </div>\n                            </div>\n                            <div>\n                                <button mat-button type="button" matStepperPrevious>Back</button>\n                                <button mat-button type="button" matStepperNext>Next</button>\n                            </div>\n                        </mat-step>\n                        <mat-step>\n                            <ng-template matStepLabel>Positive Health Dignity and Prevention(PHDP)</ng-template>\n                            <h5>A)Prevent HIV Transmission</h5>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>How many doses of ARVs have you missed since the last appointment?(If\n                                            on ART)\n                                        </mat-label>\n                                        <mat-select name="missed1" [(ngModel)]="entity.missedArvs">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]="\'<=3\'">&le;3</mat-option>\n                                            <mat-option [value]="\'4-8\'">4-8</mat-option>\n                                            <mat-option [value]="\'>=9\'">&ge;9</mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                </div>\n                                <mat-list>\n                                    <mat-list-item>\n                                        <mat-checkbox [(ngModel)]="entity.missedArvsServicesProvided"\n                                                      name="missed1Referred"\n                                                      [indeterminate]="true">\n                                            Medication adherence counselling done?\n                                        </mat-checkbox>\n                                    </mat-list-item>\n                                    <mat-list-item>\n                                        <mat-checkbox [(ngModel)]="entity.statusDisclosedToPartner"\n                                                      name="sdtp"\n                                                      [indeterminate]="true">\n                                            Have you disclosed your status to your partner(s)?\n                                        </mat-checkbox>\n                                    </mat-list-item>\n                                    >\n                                    <mat-list-item>\n                                        <mat-checkbox [(ngModel)]="entity.partnerStatusKnown"\n                                                      name="psk"\n                                                      [indeterminate]="true">\n                                            Do you know the status of your partner(s)?\n                                        </mat-checkbox>\n                                    </mat-list-item>\n                                    <mat-list-item>\n                                        <mat-checkbox [(ngModel)]="entity.useCondomsAlways"\n                                                      name="uca"\n                                                      [indeterminate]="true">\n                                            Do you use condoms during every sexual encounter?\n                                        </mat-checkbox>\n                                    </mat-list-item>\n                                    <mat-list-item>\n                                        <mat-checkbox [(ngModel)]="entity.useCondomsAlwaysServicesProvided"\n                                                      name="ucasp"\n                                                      [indeterminate]="true">\n                                            Condom use counselling done?\n                                        </mat-checkbox>\n                                    </mat-list-item>\n                                </mat-list>\n                            </div>\n                            <mat-divider class="pb-1"></mat-divider>\n                            <h5>B)Prevent Diseases/Opportunistic Infections</h5>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.opportunisticInfections"\n                                                  name="oi"\n                                                  [indeterminate]="true">\n                                        Do you/partner have genital sores/rash/pain/discharge/bleeding?\n                                    </mat-checkbox>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>How many doses of Co-trimoxazole have you missed since the last\n                                            appointment?\n                                        </mat-label>\n                                        <input matInput type="number" [(ngModel)]="entity.missedCotrim" [min]="1"\n                                               #missed="ngModel"\n                                               name="missed"/>\n                                        <mat-error\n                                                *ngIf="missed.errors && (missed.dirty || missed.touched) && (missed.errors.min)">\n                                            Minimum value is 1\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <mat-divider class="pb-1"></mat-divider>\n                            <h5>C)Promote Healthy Living</h5>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>How regularly do you take alcohol in a week?</mat-label>\n                                        <input matInput type="number" [(ngModel)]="entity.weeklyAlcoholConsumption"\n                                               [min]="1" #alcohol="ngModel"\n                                               name="alcohol"/>\n                                        <mat-error\n                                                *ngIf="alcohol.errors && (alcohol.dirty || alcohol.touched) && (alcohol.errors.min)">\n                                            Minimum value is 1\n                                        </mat-error>\n                                    </mat-form-field>\n                                    <mat-list>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.weeklyAlcoholConsumptionServicesProvided"\n                                                          name="alcolR"\n                                                          [indeterminate]="true">\n                                                Nutritional counseling done?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.washServicesProvided"\n                                                          name="wash"\n                                                          [indeterminate]="true">\n                                                WASH counseling done?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                    </mat-list>\n                                </div>\n                            </div>\n                            <mat-divider class="pb-1"></mat-divider>\n                            <h5>Additional PHDP Services provided</h5>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-list>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.useInsecticideNets"\n                                                          name="uin"\n                                                          [indeterminate]="true">\n                                                Insecticide treated nets\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item *ngIf="entity.patient.gender === \'Female\'">\n                                            <mat-checkbox [(ngModel)]="entity.cervicalCancerScreening"\n                                                          name="ccs"\n                                                          [indeterminate]="true">\n                                                Cervical Cancer Screening\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.activeMemberOfSG"\n                                                          name="amsg"\n                                                          [indeterminate]="true">\n                                                Active member of SG\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.familyPlanning"\n                                                          name="fp"\n                                                          [indeterminate]="true">\n                                                Family Planning\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.basicCareKits"\n                                                          name="bck"\n                                                          [indeterminate]="true">\n                                                Basic care kits\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.disclosureCounseling"\n                                                          name="dc"\n                                                          [indeterminate]="true">\n                                                Disclosure counseling\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.socialServices"\n                                                          name="sc"\n                                                          [indeterminate]="true">\n                                                Social Services\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.linkageToIGA"\n                                                          name="liga"\n                                                          [indeterminate]="true">\n                                                Linkage to IGAs\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.legalServices"\n                                                          name="ls"\n                                                          [indeterminate]="true">\n                                                Legal Services\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.otherServices"\n                                                          name="ots"\n                                                          [indeterminate]="true">\n                                                Others\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                    </mat-list>\n                                </div>\n                            </div>\n                            <div>\n                                <button mat-button type="button" matStepperPrevious>Back</button>\n                                <button mat-button type="button" matStepperNext>Next</button>\n                            </div>\n                        </mat-step>\n                        <mat-step>\n                            <ng-template matStepLabel>Reproductive Intentions</ng-template>\n                            <div class="row ">\n                                <div class="col-md-6">\n                                    <mat-list>\n                                        <mat-list-item *ngIf="entity.patient.gender === \'Female\'">\n                                            <mat-checkbox [(ngModel)]="entity.cervicalCancerScreeningWithinPastYear"\n                                                          name="ccswpy"\n                                                          [indeterminate]="true">\n                                                Have you been screened for cervical cancer in the last one year?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item *ngIf="entity.patient.gender === \'Female\'">\n                                            <mat-checkbox\n                                                    [(ngModel)]="entity.cervicalCancerScreeningWithinPastYearReferred"\n                                                    name="ccswpyr"\n                                                    [indeterminate]="true">\n                                                Referred for further care\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item *ngIf="entity.patient.gender === \'Female\'">\n                                            <mat-checkbox [(ngModel)]="entity.wantPregnancyWithinAYear"\n                                                          name="wpwy"\n                                                          [indeterminate]="true">\n                                                Do you want a pregnancy in the next one year?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item *ngIf="entity.patient.gender === \'Female\'">\n                                            <mat-checkbox [(ngModel)]="entity.wantPregnancyWithinAYearReferred"\n                                                          name="wpwar"\n                                                          [indeterminate]="true">\n                                                Referred for further care?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.currentlyUsingContraceptive"\n                                                          name="cuc"\n                                                          [indeterminate]="true">\n                                                If no, are you currently using a contraceptive?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.currentlyUsingContraceptiveReferred"\n                                                          name="cucr"\n                                                          [indeterminate]="true">\n                                                Referred for further care?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                    </mat-list>\n                                    <mat-divider class="pb-1"></mat-divider>\n                                    <h5>Malaria Prevention</h5>\n                                    <mat-list>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.useInsecticideBedNet"\n                                                          name="uibn"\n                                                          [indeterminate]="true">\n                                                Do you use insecticide treated bed net?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item>\n                                            <mat-checkbox [(ngModel)]="entity.useInsecticideBedNetReferred"\n                                                          name="uibnr"\n                                                          [indeterminate]="true">\n                                                Referred?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item *ngIf="entity.patient.gender === \'Female\'">\n                                            <mat-checkbox [(ngModel)]="entity.pregnantIntermittentPreventiveTherapy"\n                                                          name="pipt"\n                                                          [indeterminate]="true">\n                                                If pregnant: have you been on intermittent preventive therapy?\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                        <mat-list-item *ngIf="entity.patient.gender === \'Female\'">\n                                            <mat-checkbox\n                                                    [(ngModel)]="entity.pregnantIntermittentPreventiveTherapyReferred"\n                                                    name="piptr"\n                                                    [indeterminate]="true">\n                                                Referred\n                                            </mat-checkbox>\n                                        </mat-list-item>\n                                    </mat-list>\n                                </div>\n                            </div>\n                            <div>\n                                <button mat-button type="button" matStepperPrevious>Back</button>\n                            </div>\n                        </mat-step>\n                    </mat-vertical-stepper>\n                    <mat-divider></mat-divider>\n                </mat-card-content>\n                <mat-card-actions class="lamis-edit-form-actions">\n                    <button mat-raised-button type="button" (click)="previousState()">Back</button>\n                    <button mat-raised-button color=\'primary\'\n                            [disabled]="careForm.invalid || isSaving"\n                            type="submit">\n                        {{entity.id !== undefined ? \'Update\' : \'Save\'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n'}),M("design:paramtypes",[w,F,o.NotificationService,d.ActivatedRoute,i.AppLoaderService])],t)}(),O=function(){function t(t){this.service=t}return t.prototype.resolve=function(t,e){var n=t.params.id?t.params.id:null;return n?this.service.findByUuid(n).pipe(a.filter((function(t){return t.ok})),a.map((function(t){return t.body}))):u.of({})},t.ctorParameters=function(){return[{type:F}]},t=y([e.Injectable(),M("design:paramtypes",[F])],t)}(),q=[{path:"",data:{title:"Chronic Care Visit",breadcrumb:"CHRONIC CARE VISIT"},children:[{path:":id/patient/:patientId/view",component:B,resolve:{entity:O},data:{authorities:["ROLE_USER"],title:"Chronic Care Visit",breadcrumb:"CHRONIC CARE VISIT"}},{path:"patient/:patientId/new",component:_,data:{authorities:["ROLE_DEC"],title:"Chronic Care Visit",breadcrumb:"ADD CHRONIC CARE VISIT"}},{path:":id/patient/:patientId/edit",component:_,resolve:{entity:O},data:{authorities:["ROLE_DEC"],title:"Chronic Care Visit Edit",breadcrumb:"CHRONIC CARE VISIT EDIT"}}]}],H=function(){function t(){}return t=y([e.NgModule({declarations:[B,_],imports:[s.CommonModule,c.CovalentDialogsModule,h.FormsModule,h.ReactiveFormsModule,i.LamisSharedModule,V,o.CoreModule,f.CustomFormsModule,i.MatDateFormatModule,d.RouterModule.forChild(q),l.MatStepperModule],providers:[O]})],t)}(),j=r,G=function(){function t(t,e){this.http=t,this.serverUrl=e,this.resourceUrl="",this.resourceUrl=e.SERVER_API_URL+"/api/eacs"}return t.prototype.create=function(t){var e=this,n=this.convertDateFromClient(t);return this.http.post(this.resourceUrl,n,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.update=function(t){var e=this,n=this.convertDateFromClient(t);return this.http.put(this.resourceUrl,n,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.find=function(t){var e=this;return this.http.get(this.resourceUrl+"/"+t,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.findByUuid=function(t){var e=this;return this.http.get(this.resourceUrl+"/by-uuid/"+t,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.delete=function(t){return this.http.delete(this.resourceUrl+"/"+t,{observe:"response"})},t.prototype.getLatestByPatient=function(t){var e=this;return this.http.get(this.resourceUrl+"/patient/"+t,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.getLatestViralLoadByPatient=function(t){return this.http.get(this.resourceUrl+"/patient/"+t+"/viral-load-result",{observe:"response"}).pipe(a.map((function(t){return t.body&&(t.body.laboratory.dateReported=null!=t.body.laboratory.dateReported?j(t.body.laboratory.dateReported):null),t})))},t.prototype.convertDateFromClient=function(t){return Object.assign({},t,{dateEac1:null!=t.dateEac1&&t.dateEac1.isValid()?t.dateEac1.format(i.DATE_FORMAT):null,dateEac2:null!=t.dateEac2&&t.dateEac2.isValid()?t.dateEac2.format(i.DATE_FORMAT):null,dateEac3:null!=t.dateEac3&&t.dateEac3.isValid()?t.dateEac3.format(i.DATE_FORMAT):null,dateSampleCollected:null!=t.dateSampleCollected&&t.dateSampleCollected.isValid()?t.dateSampleCollected.format(i.DATE_FORMAT):null,dateLastViralLoad:null!=t.dateLastViralLoad&&t.dateLastViralLoad.isValid()?t.dateLastViralLoad.format(i.DATE_FORMAT):null})},t.prototype.convertDateFromServer=function(t){return t.body&&(t.body.dateLastViralLoad=null!=t.body.dateLastViralLoad?j(t.body.dateLastViralLoad):null,t.body.dateEac1=null!=t.body.dateEac1?j(t.body.dateEac1):null,t.body.dateEac2=null!=t.body.dateEac2?j(t.body.dateEac2):null,t.body.dateEac3=null!=t.body.dateEac3?j(t.body.dateEac3):null,t.body.dateSampleCollected=null!=t.body.dateSampleCollected?j(t.body.dateSampleCollected):null),t},t.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[i.SERVER_API_URL_CONFIG]}]}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(n.HttpClient),e.ɵɵinject(i.SERVER_API_URL_CONFIG))},token:t,providedIn:"root"}),t=y([e.Injectable({providedIn:"root"}),b(1,e.Inject(i.SERVER_API_URL_CONFIG)),M("design:paramtypes",[n.HttpClient,Object])],t)}(),Y=function(){function t(t,e,n,i,a){this.router=t,this.route=e,this._dialogService=n,this.notificationService=i,this.eacService=a,this.properties=[]}return t.prototype.ngOnInit=function(){var t=this;this.route.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,t.buildProperties()}))},t.prototype.edit=function(){this.router.navigate(["/","eacs",this.entity.uuid,"patient",this.entity.patient.uuid,"edit"])},t.prototype.delete=function(){var t=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this EAC Record, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(e){e&&t.eacService.delete(t.entity.id).subscribe((function(e){e.ok?t.router.navigate(["patients"]):t.notificationService.showError("Error deleting visit, please try again")}))}))},t.prototype.buildProperties=function(){this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateLastViralLoad,label:"Date Last Viral Load",format:"dd MMM, yyyy"})),this.properties.push(new o.CardViewTextItemModel({key:"vl",value:this.entity.lastViralLoad,label:"Last Viral Load"})),this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateEac1,label:"Date of 1st EAC Session",format:"dd MMM, yyyy"})),this.entity.dateEac2&&this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateEac2,label:"Date of 2nd EAC Session",format:"dd MMM, yyyy"})),this.entity.dateEac3&&this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateEac3,label:"Date of 3rd EAC Session",format:"dd MMM, yyyy"})),this.entity.dateEac3&&this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateSampleCollected,label:"Date of Repeat VL Sample Collection",format:"dd MMM, yyyy"})),this.properties.push(new o.CardViewTextItemModel({label:"Notes",key:"ts",value:this.entity.notes}))},t.prototype.previousState=function(){window.history.back()},t.ctorParameters=function(){return[{type:d.Router},{type:d.ActivatedRoute},{type:c.TdDialogService},{type:o.NotificationService},{type:G}]},t=y([e.Component({selector:"eac-details",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <mat-card>\n            <mat-card-header>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-card-view [properties]="properties" editable="false"></adf-card-view>\n            </mat-card-content>\n            <mat-card-actions class="lamis-edit-form-actions">\n                <button mat-button (click)="previousState()">Back</button>\n                <button mat-raised-button color="warn" (click)="delete()">Delete</button>\n                <button mat-raised-button color="primary" (click)="edit()">Edit</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n'}),M("design:paramtypes",[d.Router,d.ActivatedRoute,c.TdDialogService,o.NotificationService,G])],t)}(),W=r,$=function(){function t(t,e,n,i,a){this.clinicService=t,this.eacService=e,this.notification=n,this.activatedRoute=i,this.appLoaderService=a,this.today=W(),this.isSaving=!1}return t.prototype.createEntity=function(){return{}},t.prototype.ngOnInit=function(){var t=this;this.activatedRoute.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,void 0===t.entity&&(t.entity=t.createEntity());var i=t.activatedRoute.snapshot.paramMap.get("patientId");t.clinicService.getPatient(i).subscribe((function(e){t.entity.patient=e,t.entity.facility=e.facility,t.dateRegistration=e.dateRegistration,t.eacService.getLatestViralLoadByPatient(e.id).subscribe((function(e){e.body&&(t.entity.dateLastViralLoad=e.body.laboratory.dateReported,t.entity.lastViralLoad=e.body.resultAB,t.eac1Min=t.entity.dateLastViralLoad.clone().add(1,"day")),t.eac2Min=t.entity.dateEac1?t.entity.dateEac1.clone().add(2,"week"):t.entity.dateLastViralLoad,t.eac3Min=t.entity.dateEac2?t.entity.dateEac2.clone().add(2,"week"):t.entity.dateLastViralLoad,t.repeatVLMin=t.entity.dateEac3?t.entity.dateEac3.clone().add(1,"day"):t.entity.dateLastViralLoad})),t.entity.id||t.eacService.getLatestByPatient(e.uuid).subscribe((function(e){t.entity=e.ok?e.body:t.createEntity(),t.repeatVLMin=t.entity.dateEac3?t.entity.dateEac3.clone().add(1,"day"):t.entity.dateLastViralLoad,t.eac2Min=t.entity.dateEac1?t.entity.dateEac1.clone().add(2,"week"):t.entity.dateLastViralLoad,t.eac3Min=t.entity.dateEac2?t.entity.dateEac2.clone().add(2,"week"):t.entity.dateLastViralLoad}))}))}))},t.prototype.dateEac1Changed=function(t){this.eac2Min=t.clone().add(2,"weeks")},t.prototype.dateEac2Changed=function(t){this.eac3Min=t.clone().add(2,"weeks")},t.prototype.dateEac3Changed=function(t){this.repeatVLMin=t.clone().add(1,"days"),this.repeatVLMax=t.clone().add(6,"months")},t.prototype.save=function(){this.isSaving=!0,this.appLoaderService.open("Saving EAC session.."),void 0!==this.entity.id?this.subscribeToSaveResponse(this.eacService.update(this.entity)):this.subscribeToSaveResponse(this.eacService.create(this.entity))},t.prototype.previousState=function(){window.history.back()},t.prototype.subscribeToSaveResponse=function(t){var e=this;t.subscribe((function(t){return e.onSaveSuccess(t.body)}),(function(t){e.onSaveError(),e.onError(t.message)}))},t.prototype.onSaveSuccess=function(t){this.appLoaderService.close(),this.isSaving=!1,this.notification.openSnackMessage("EAC session successfully saved"),this.previousState()},t.prototype.onSaveError=function(){this.isSaving=!1,this.appLoaderService.close(),this.notification.showError("Error occurred saving EAC session; try again")},t.prototype.onError=function(t){this.appLoaderService.close(),this.notification.showError(t)},t.ctorParameters=function(){return[{type:w},{type:G},{type:o.NotificationService},{type:d.ActivatedRoute},{type:i.AppLoaderService}]},t=y([e.Component({selector:"eac-edit",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <mat-card class="default">\n            <mat-card-content>\n                <mat-progress-bar mode="determinate" class="session-progress"></mat-progress-bar>\n            </mat-card-content>\n        </mat-card>\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #clinicForm="ngForm">\n            <mat-card class="default">\n                <mat-card-content *ngIf="entity.patient">\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field>\n                                <mat-label>Date Last Viral Load</mat-label>\n                                <input matInput\n                                       [value]="entity.dateLastViralLoad && entity.dateLastViralLoad.format(\'DD MMM, YYYY\')"\n                                       disabled>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field>\n                                <input matInput [value]="entity.lastViralLoad" disabled>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div>\n                        <mat-form-field class="full-width">\n                            <input matInput [matDatepicker]="picker"\n                                   placeholder="Date of 1st EAC Session"\n                                   [(ngModel)]="entity.dateEac1"\n                                   #visit="ngModel"\n                                   (dateChange)="dateEac1Changed($event.value)"\n                                   [max]="today"\n                                   [min]="eac1Min"\n                                   name="visit"\n                                   required>\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]="picker">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)">\n                                Date of first EAC session is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)">\n                                Date of first EAC session cannot be before {{eac1Min | date: \'dd MMM, yyyy\'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)">\n                                Date of first EAC session cannot be after {{today | date: \'dd MMM, yyyy\'}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class="full-width" *ngIf="entity.id && !!eac2Min">\n                            <input matInput [matDatepicker]="picker2"\n                                   placeholder="Date of 2nd EAC Session"\n                                   [(ngModel)]="entity.dateEac2"\n                                   #visit2="ngModel"\n                                   (dateChange)="dateEac2Changed($event.value)"\n                                   [max]="today"\n                                   [min]="eac2Min"\n                                   name="visit2">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]="picker2">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker2></mat-datepicker>\n                            <mat-error\n                                    *ngIf="visit2.errors && (visit2.dirty || visit2.touched) && (visit2.errors.required)">\n                                Date of second EAC session is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit2.errors && (visit2.dirty || visit2.touched) && (visit2.errors.min)">\n                                Date of second EAC session cannot be before {{eac2Min | date: \'dd MMM, yyyy\'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit2.errors && (visit2.dirty || visit2.touched) && (visit2.errors.max)">\n                                Date of second EAC session cannot be after {{today | date: \'dd MMM, yyyy\'}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class="full-width" *ngIf="entity.dateEac2 && !!eac3Min">\n                            <input matInput [matDatepicker]="picker3"\n                                   placeholder="Date of 3rd EAC Session"\n                                   [(ngModel)]="entity.dateEac3"\n                                   #visit3="ngModel"\n                                   (dateChange)="dateEac3Changed($event.value)"\n                                   [max]="today"\n                                   [min]="eac3Min"\n                                   name="visit3">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]="picker3">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker3></mat-datepicker>\n                            <mat-error\n                                    *ngIf="visit3.errors && (visit3.dirty || visit3.touched) && (visit3.errors.required)">\n                                Date of third EAC session is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit3.errors && (visit3.dirty || visit3.touched) && (visit3.errors.min)">\n                                Date of third EAC session cannot be before {{eac3Min | date: \'dd MMM, yyyy\'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit3.errors && (visit3.dirty || visit3.touched) && (visit3.errors.max)">\n                                Date of third EAC session cannot be after {{today | date: \'dd MMM, yyyy\'}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class="full-width" *ngIf="entity.dateEac3 && !!repeatVLMin">\n                            <input matInput [matDatepicker]="picker4"\n                                   placeholder="Date of Repeat VL Sample Collection"\n                                   [(ngModel)]="entity.dateSampleCollected"\n                                   #visit4="ngModel"\n                                   [max]="repeatVLMax"\n                                   [min]="repeatVLMin"\n                                   name="repeat">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]="picker4">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker4></mat-datepicker>\n                            <mat-error\n                                    *ngIf="visit4.errors && (visit4.dirty || visit4.touched) && (visit4.errors.required)">\n                                Date of Repeat VL Sample Collection is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit4.errors && (visit4.dirty || visit4.touched) && (visit4.errors.min)">\n                                Date of Repeat VL Sample Collection cannot be before {{repeatVLMin | date:\'dd MMM, yyyy\'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit4.errors && (visit4.dirty || visit4.touched) && (visit4.errors.max)">\n                                Date of Repeat VL Sample Collection cannot be after {{repeatVLMax | date:\'dd MMM, yyyy\'}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class="full-width">\n                            <textarea matInput placeholder="Notes"\n                                      cols="30"\n                                      rows="3"\n                                      name="notes"\n                                      #note="ngModel" [(ngModel)]="entity.notes"></textarea>\n                        </mat-form-field>\n                    </div>\n                    <mat-card-actions class="lamis-edit-form-actions">\n                        <button mat-raised-button type="button" (click)="previousState()">Back</button>\n                        <button mat-raised-button color=\'primary\'\n                                [disabled]="clinicForm.invalid || isSaving"\n                                type="submit">\n                            {{entity.id !== undefined ? \'Update\' : \'Save\'}}\n                        </button>\n                    </mat-card-actions>\n                </mat-card-content>\n            </mat-card>\n        </form>\n    </div>\n</div>\n'}),M("design:paramtypes",[w,G,o.NotificationService,d.ActivatedRoute,i.AppLoaderService])],t)}(),z=function(){function t(t){this.service=t}return t.prototype.resolve=function(t,e){var n=t.params.id?t.params.id:null;return n?this.service.findByUuid(n).pipe(a.filter((function(t){return t.ok})),a.map((function(t){return t.body}))):u.of({})},t.ctorParameters=function(){return[{type:G}]},t=y([e.Injectable(),M("design:paramtypes",[G])],t)}(),K=[{path:"",data:{title:"EAC Session",breadcrumb:"EAC SESSION"},children:[{path:":id/patient/:patientId/view",component:Y,resolve:{entity:z},data:{authorities:["ROLE_USER"],title:"EAC Session",breadcrumb:"EAC SESSION"}},{path:"patient/:patientId/new",component:$,data:{authorities:["ROLE_DEC"],title:"EAC Session",breadcrumb:"ADD EAC SESSION",commence:!0}},{path:":id/patient/:patientId/edit",component:$,resolve:{entity:z},data:{authorities:["ROLE_DEC"],title:"EAC Session Edit",breadcrumb:"EAC SESSION EDIT"}}]}],X=function(){function t(){}return t=y([e.NgModule({imports:[s.CommonModule,c.CovalentDialogsModule,h.FormsModule,h.ReactiveFormsModule,i.LamisSharedModule,V,o.CoreModule,f.CustomFormsModule,i.MatDateFormatModule,d.RouterModule.forChild(K)],declarations:[Y,$],providers:[z]})],t)}(),J=function(){function t(t,e){this.http=t,this.serverUrl=e,this.resourceUrl="",this.resourceUrl=e.SERVER_API_URL+"/api/case-management"}return t.prototype.initClients=function(t){return this.http.get(this.resourceUrl+"/init-clients/"+t)},t.prototype.getClientList=function(t){return this.http.post(this.resourceUrl+"/client-list",t,{observe:"response"})},t.prototype.getCaseManagerStats=function(t,e){return this.http.get(this.resourceUrl+"/facility/"+e+"/case-manager/"+t+"/stats")},t.prototype.getActiveFacility=function(){return this.http.get("/api/facilities/active")},t.prototype.getCaseManagers=function(t){return this.http.get(this.resourceUrl+"/facility/"+t+"/case-managers")},t.prototype.assignToCaseManager=function(t,e){var i=new n.HttpParams;return e.forEach((function(t){return i=i.append("ids",t.toString())})),this.http.get(this.resourceUrl+"/case-manager/"+t+"/assign-clients",{params:i,observe:"response"})},t.prototype.deAssignClients=function(t){var e=new n.HttpParams;return t.forEach((function(t){return e=e.append("ids",t.toString())})),this.http.get(this.resourceUrl+"/de-assign-clients",{params:e,observe:"response"})},t.prototype.getStates=function(){return this.http.get("/api/states")},t.prototype.getLgasByState=function(t){return this.http.get("/api/provinces/state/"+t)},t.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[i.SERVER_API_URL_CONFIG]}]}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(n.HttpClient),e.ɵɵinject(i.SERVER_API_URL_CONFIG))},token:t,providedIn:"root"}),t=y([e.Injectable({providedIn:"root"}),b(1,e.Inject(i.SERVER_API_URL_CONFIG)),M("design:paramtypes",[n.HttpClient,Object])],t)}(),Q=function(){function t(t,e,n,i){this.service=t,this._dialogService=e,this.notificationService=n,this.stompService=i,this.caseManagers=[],this.patients=[],this.properties=[],this.globalProperties=[],this.stats={},this.globalStats={},this.filter={},this.hospitalNum="",this.totalItems=0,this.page=0,this.itemsPerPage=20,this.loading=!0,this.initializing=!0}return t.prototype.ngOnInit=function(){var t=this;this.service.getActiveFacility().subscribe((function(e){e&&(t.facilityId=e.id,t.service.initClients(e.id).subscribe((function(n){t.initializing=!1,t.service.getCaseManagers(e.id).subscribe((function(e){t.caseManagers=e,t.updateList()}))})),t.service.getCaseManagerStats(0,e.id).subscribe((function(e){t.stats=e,t.buildStats()})))})),this.service.getStates().subscribe((function(e){return t.states=e}))},t.prototype.ngOnDestroy=function(){},t.prototype.clearHospitalNum=function(){this.hospitalNum=null,this.filter.hospitalNum=null,this.page=0},t.prototype.search=function(){this.page=0,this.updateList()},t.prototype.assignClients=function(){var t=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to assign selected clients to the selected Case Manager?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(e){if(e){var n=t.patients.filter((function(t){return t.selected})).map((function(t){return t.id}));t.service.assignToCaseManager(t.caseManager.id,n).subscribe((function(e){e.ok?(t.updateList(),t.service.getCaseManagerStats(t.caseManager.id,t.facilityId).subscribe((function(e){t.stats=e,t.buildStats()}))):t.notificationService.showError("Error assigning clients, please try again")}))}}))},t.prototype.deAssignClients=function(){var t=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to de-assign selected clients?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(e){if(e){var n=t.patients.filter((function(t){return t.selected})).map((function(t){return t.id}));t.service.deAssignClients(n).subscribe((function(e){e.ok?(t.updateList(),t.service.getCaseManagerStats(t.caseManager.id,t.facilityId).subscribe((function(e){t.stats=e,t.buildStats()}))):t.notificationService.showError("Error de-assigning clients, please try again")}))}}))},t.prototype.selections=function(){return this.patients&&!!this.patients.find((function(t){return t.selected}))},t.prototype.loadPage=function(t){this.page=t,this.updateList()},t.prototype.select=function(t){this.patients=this.patients.map((function(e){return e.id===t.obj.id&&(e.selected=!e.selected),e}))},t.prototype.caseManagerChanged=function(){var t=this;this.caseManager||(this.stats=null),this.service.getCaseManagerStats(this.caseManager.id,this.facilityId).subscribe((function(e){t.stats=e,t.buildStats()}))},t.prototype.updateList=function(){var t=this;this.hospitalNum&&(this.filter.hospitalNum=this.hospitalNum),this.filter.facilityId=this.facilityId,this.filter.size=this.itemsPerPage,this.filter.page=this.page>0?this.page-1:0,this.loading=!0,this.service.getClientList(this.filter).subscribe((function(e){e.body&&(t.patients=e.body.map((function(e){var n=t.caseManagers.find((function(t){return t.id===e.caseManagerId}));return n&&(e.caseManager=n),e})),t.totalItems=e.headers.get("X-Total-Count"),t.service.getCaseManagerStats(0,t.facilityId).subscribe((function(e){t.globalStats=e,t.buildGlobalStats()}))),t.loading=!1}))},t.prototype.ageGroupChanged=function(){9==this.ageLimit?(this.filter.lowerAgeLimit=0,this.filter.upperAgeLimit=9):14==this.ageLimit?(this.filter.lowerAgeLimit=10,this.filter.upperAgeLimit=14):19==this.ageLimit?(this.filter.lowerAgeLimit=15,this.filter.upperAgeLimit=19):24==this.ageLimit?(this.filter.lowerAgeLimit=20,this.filter.upperAgeLimit=24):100==this.ageLimit&&(this.filter.lowerAgeLimit=25,this.filter.upperAgeLimit=100),this.ageLimit||(this.filter.lowerAgeLimit=null,this.filter.upperAgeLimit=null),this.updateList()},t.prototype.pregnancyStatusChanged=function(){1==this.pregnancyStatus?this.filter.pregnant=!0:2==this.pregnancyStatus&&(this.filter.breastfeeding=!0),this.pregnancyStatus||(this.filter.pregnant=null,this.filter.breastfeeding=null),this.updateList()},t.prototype.stateChanged=function(t){var e=this;t&&this.service.getLgasByState(t).subscribe((function(t){return e.lgas=t}))},t.prototype.assigned=function(t){this.filter.assigned=1==t||2!=t&&null,this.updateList()},t.prototype.lgaChanged=function(t){this.filter.lgaId=t||null,this.updateList()},t.prototype.buildStats=function(){this.properties=[],this.properties.push(new o.CardViewIntItemModel({label:"Clients(s) Assigned",key:"as",value:this.stats.assigned})),this.properties.push(new o.CardViewIntItemModel({label:"Stable 1 Year",key:"as",value:this.stats.stable})),this.properties.push(new o.CardViewIntItemModel({label:"Unstable less than 1 Year",key:"as",value:this.stats.unstableLessThan1year})),this.properties.push(new o.CardViewIntItemModel({label:"Unstable more than 1 Year",key:"as",value:this.stats.unstableMoreThan1Year})),this.properties.push(new o.CardViewIntItemModel({label:"Awaiting ART",key:"as",value:this.stats.preArt}))},t.prototype.buildGlobalStats=function(){this.globalProperties=[],this.globalStats&&(this.globalProperties.push(new o.CardViewIntItemModel({label:"Clients(s) Assigned",key:"as",value:this.globalStats.assigned})),this.globalProperties.push(new o.CardViewIntItemModel({label:"Stable 1 Year",key:"as",value:this.globalStats.stable})),this.globalProperties.push(new o.CardViewIntItemModel({label:"Unstable less than 1 Year",key:"as",value:this.globalStats.unstableLessThan1year})),this.globalProperties.push(new o.CardViewIntItemModel({label:"Unstable more than 1 Year",key:"as",value:this.globalStats.unstableMoreThan1Year})),this.globalProperties.push(new o.CardViewIntItemModel({label:"Awaiting ART",key:"as",value:this.globalStats.preArt})))},t.ctorParameters=function(){return[{type:J},{type:c.TdDialogService},{type:o.NotificationService},{type:v.RxStompService}]},t=y([e.Component({selector:"case-management-patient-list",template:'<div class="layout">\n    <div class="list-container">\n        <mat-card>\n            <mat-card-content>\n                <div class="row">\n                    <div class="col-md-6">\n                        <mat-form-field class="full-width">\n                            <mat-label>Facility Case Manager:</mat-label>\n                            <mat-select [(ngModel)]="caseManager" name="caseManager"\n                                        (selectionChange)="caseManagerChanged()">\n                                <mat-option></mat-option>\n                                <mat-option *ngFor="let c of caseManagers" [value]="c">{{c.name}}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <div class="col-md-6">\n                        <div *ngIf="caseManager">\n                            <div class="row">\n                                <div class="col-md-2">\n                                    Clients(s) Assigned:\n                                </div>\n                                <div class="col-md-2">\n                                    {{stats.assigned | number: \'1.\'}}\n                                </div>\n                                <div class="col-md-2">\n                                    Stable 1 Year:\n                                </div>\n                                <div class="col-md-2">\n                                    {{stats.stable | number: \'1.\'}}\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-2">\n                                    Unstable less than 1 Year:\n                                </div>\n                                <div class="col-md-2">\n                                    {{stats.unstableLessThan1year | number: \'1.\'}}\n                                </div>\n                                <div class="col-md-2">\n                                    Unstable more than 1 Year:\n                                </div>\n                                <div class="col-md-2">\n                                    {{stats.unstableMoreThan1Year | number: \'1.\'}}\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-2">\n                                    Awaiting ART:\n                                </div>\n                                <div class="col-md-2">\n                                    {{stats.preArt | number: \'1.\'}}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <h5> Demographic/Clinic filters</h5>\n                <p></p>\n                <div class="row">\n                    <div class="col-md-6">\n                        <mat-form-field class="full-width">\n                            <mat-label>Client Categorization</mat-label>\n                            <mat-select name="categoryId" [(ngModel)]="filter.status" (selectionChange)="updateList()">\n                                <mat-option>--All--</mat-option>\n                                <mat-option value=\'STABLE\'>Stable One Year</mat-option>\n                                <mat-option value=\'UNSTABLE_LESS_THAN_1_YEAR\'>Unstable less than One Year</mat-option>\n                                <mat-option value=\'UNSTABLE_MORE_THAN_1_YEAR\'>Unstable One Year or more</mat-option>\n                                <mat-option value=\'PRE_ART\'>Awaiting ART</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <div class="col-md-6">\n                        <mat-form-field class="full-width">\n                            <mat-label>Age Group</mat-label>\n                            <mat-select name="ageGroup" [(ngModel)]="ageLimit" (selectionChange)="ageGroupChanged()">\n                                <mat-option>--All--</mat-option>\n                                <mat-option value=\'9\'>Children (0-9 Years)</mat-option>\n                                <mat-option value=\'14\'>Younger Adolescent (10 to 14 Years)</mat-option>\n                                <mat-option value=\'19\'>Older Adolescent (15 to 19 Years)</mat-option>\n                                <mat-option value=\'24\'>Young People (20 to 24 Years)</mat-option>\n                                <mat-option value=\'100\'>Adults (25 and Above)</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-md-6">\n                        <mat-form-field class="full-width">\n                            <mat-label>Gender</mat-label>\n                            <mat-select name="gender" [(ngModel)]="filter.gender" (selectionChange)="updateList()">\n                                <mat-option>--All--</mat-option>\n                                <mat-option [value]="\'FEMALE\'">Female</mat-option>\n                                <mat-option [value]="\'MALE\'">Male</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <div class="col-md-6">\n                        <mat-form-field class="full-width">\n                            <mat-label>Pregnancy Status</mat-label>\n                            <mat-select name="pregnancyStatus" [(ngModel)]="pregnancyStatus"\n                                        (selectionChange)="pregnancyStatusChanged()">\n                                <mat-option>--All--</mat-option>\n                                <mat-option value=\'1\'>Pregnant</mat-option>\n                                <mat-option value=\'2\'>Breastfeeding</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-md-6">\n                        <mat-form-field class="full-width">\n                            <mat-label>State of Residence</mat-label>\n                            <mat-select name="state" (selectionChange)="stateChanged($event.value.id)">\n                                <mat-option></mat-option>\n                                <mat-option *ngFor="let state of states" [value]="state">{{state.name}}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <div class="col-md-6">\n                        <mat-form-field class="full-width">\n                            <mat-label>LGA of Residence</mat-label>\n                            <mat-select name="lga" (selectionChange)="lgaChanged($event.value.id)">\n                                <mat-option></mat-option>\n                                <mat-option *ngFor="let lga of lgas" [value]="lga">{{lga.name}}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div *ngIf="patients?.length">\n                    <div class="row">\n                        <div class="col-md-2">\n                            Clients(s) Assigned:\n                        </div>\n                        <div class="col-md-2">\n                            {{globalStats.assigned | number: \'1.\'}}\n                        </div>\n                        <div class="col-md-2">\n                            Stable 1 Year:\n                        </div>\n                        <div class="col-md-2">\n                            {{globalStats.stable | number: \'1.\'}}\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-2">\n                            Unstable less than 1 Year:\n                        </div>\n                        <div class="col-md-2">\n                            {{globalStats.unstableLessThan1year | number: \'1.\'}}\n                        </div>\n                        <div class="col-md-2">\n                            Unstable more than 1 Year:\n                        </div>\n                        <div class="col-md-2">\n                            {{globalStats.unstableMoreThan1Year | number: \'1.\'}}\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-2">\n                            Awaiting ART:\n                        </div>\n                        <div class="col-md-2">\n                            {{globalStats.preArt | number: \'1.\'}}\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div class="row">\n                        <div class="col-md-8 col-md-offset-4">\n                            <div class="adf-toolbar--spacer"></div>\n                            <td-search-box backIcon="arrow_back" class="push-right-sm"\n                                           placeholder="Search hospital number" [debounce]="500"\n                                           [(ngModel)]="hospitalNum"\n                                           (searchDebounce)="search()"\n                                           (search)="search()"\n                                           (clear)="clearHospitalNum()" flex>\n                            </td-search-box>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-sm-1 col-sm-offset-11">\n                            <button mat-raised-button color="primary"\n                                    *ngIf="caseManager && selections()"\n                                    (click)="assignClients()">Assign to Case Manager\n                            </button>\n                            <button mat-raised-button color="primary" *ngIf="selections()"\n                                    (click)="deAssignClients()">De-assign Client(s)\n                            </button>\n                        </div>\n                    </div>\n                    <mat-progress-spinner\n                            *ngIf="initializing"\n                            class="adf-document-list-loading-margin"\n                            [color]="\'primary\'"\n                            [mode]="\'indeterminate\'">\n                    </mat-progress-spinner>\n                    <adf-datatable *ngIf="patients || loading"\n                                   [rows]="patients"\n                                   (rowClick)="select($event.value)">\n                        <data-columns>\n                            <data-column key="selected" title="">\n                                <ng-template let-context="$implicit">\n                                    <mat-checkbox [checked]="context.row.getValue(\'selected\')"></mat-checkbox>\n                                </ng-template>\n                            </data-column>\n                            <data-column key="name" title="Name" sortable="true"></data-column>\n                            <data-column key="hospitalNum" title="Hospital Number" sortable="true"></data-column>\n                            <data-column key="gender" title="Gender" sortable="true">\n                                <ng-template let-context="$implicit">\n                                    {{context.row.getValue(\'gender\') === \'MALE\' ? \'Male\' : context.row.getValue(\'gender\') === \'FEMALE\' ? \'Female\' : \'\'}}\n                                </ng-template>\n                            </data-column>\n                            <data-column key="dateBirth" title="Date of Birth" sortable="true">\n                                <ng-template let-context="$implicit">\n                                    {{context.row.getValue(\'dateBirth\') | date: \'dd MMM, yyyy\'}}\n                                </ng-template>\n                            </data-column>\n                            <data-column key="address" title="Address" class="full-width ellipsis-cell"></data-column>\n                            <data-column key="currentStatus" title="ART Status" sortable="true"></data-column>\n                            <data-column key="caseManager.name" title="Assigned to" sortable="true"></data-column>\n                        </data-columns>\n                        <adf-loading-content-template>\n                            <ng-template>\n                                <mat-progress-spinner\n                                        class="adf-document-list-loading-margin"\n                                        [color]="\'primary\'"\n                                        [mode]="\'indeterminate\'">\n                                </mat-progress-spinner>\n                            </ng-template>\n                        </adf-loading-content-template>\n                    </adf-datatable>\n                </div>\n                <adf-empty-content\n                        *ngIf="!patients"\n                        icon="blur_on"\n                        [title]="\'No Patients found\'"\n                        [subtitle]="\'No Patients matching search criteria or no Patients available\'">\n                </adf-empty-content>\n                <div class="row">\n                    <div class="col-md-8">\n                        <ngb-pagination [collectionSize]="totalItems"\n                                        [(page)]="page"\n                                        [pageSize]="itemsPerPage"\n                                        [maxSize]="5"\n                                        size="sm"\n                                        [rotate]="true"\n                                        [boundaryLinks]="true"\n                                        (pageChange)="loadPage(page)">\n                        </ngb-pagination>\n                    </div>\n                    <div class="col-md-4">\n                        <mat-form-field>\n                            <mat-label>Assignment Filter</mat-label>\n                            <mat-select (selectionChange)="assigned($event.value)">\n                                <mat-option></mat-option>\n                                <mat-option [value]="1">Only assigned clients</mat-option>\n                                <mat-option [value]="2">Only clients not assigned</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>\n'}),M("design:paramtypes",[J,c.TdDialogService,o.NotificationService,v.RxStompService])],t)}(),Z=[{path:"",data:{title:"Case Management",breadcrumb:"CASE MANAGEMENT"},children:[{path:"",children:[{path:"",component:Q,data:{authorities:["ROLE_USER"],title:"Case Management",breadcrumb:"CASE MANAGEMENT"}}],data:{title:"Case Management",breadcrumb:"CASE MANAGEMENT"}}]}],tt=function(){function t(){}return t=y([e.NgModule({imports:[V,h.FormsModule,s.CommonModule,d.RouterModule.forChild(Z),o.CoreModule,g.NgbModule,c.CovalentSearchModule,c.CovalentDialogsModule,i.LamisSharedModule],declarations:[Q],providers:[]})],t)}(),et=function(){function t(t,e){this.http=t,this.serverUrl=e,this.resourceUrl="",this.resourceUrl=e.SERVER_API_URL+"/api/case-managers"}return t.prototype.create=function(t){return this.http.post(this.resourceUrl,t,{observe:"response"})},t.prototype.update=function(t){return this.http.put(this.resourceUrl,t,{observe:"response"})},t.prototype.find=function(t){return this.http.get(this.resourceUrl+"/"+t,{observe:"response"})},t.prototype.findByUuid=function(t){return this.http.get(this.resourceUrl+"/by-uuid/"+t,{observe:"response"})},t.prototype.delete=function(t){return this.http.delete(this.resourceUrl+"/"+t,{observe:"response"})},t.prototype.query=function(t){var e=i.createRequestOption(t);return this.http.get(this.resourceUrl,{params:e,observe:"response"})},t.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[i.SERVER_API_URL_CONFIG]}]}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(n.HttpClient),e.ɵɵinject(i.SERVER_API_URL_CONFIG))},token:t,providedIn:"root"}),t=y([e.Injectable({providedIn:"root"}),b(1,e.Inject(i.SERVER_API_URL_CONFIG)),M("design:paramtypes",[n.HttpClient,Object])],t)}(),nt=function(){function t(t,e,n,i,a){this.router=t,this.route=e,this.service=n,this._dialogService=i,this.notificationService=a,this.properties=[]}return t.prototype.ngOnInit=function(){var t=this;this.route.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,t.buildProperties()}))},t.prototype.edit=function(){this.router.navigate(["/","admin","case-managers",this.entity.uuid,"edit"])},t.prototype.delete=function(){var t=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this Case Manager, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(e){e&&t.service.delete(t.entity.id).subscribe((function(e){e.ok?t.router.navigate(["admin","case-managers"]):t.notificationService.showError("Error deleting Case Manager, please try again")}))}))},t.prototype.buildProperties=function(){this.properties.push(new o.CardViewTextItemModel({label:"Name",key:"cs",value:this.entity.name})),this.properties.push(new o.CardViewTextItemModel({label:"Address",key:"fs",value:this.entity.address})),this.properties.push(new o.CardViewTextItemModel({label:"Gender",key:"ts",value:"FEMALE"===this.entity.gender?"Female":"Male"})),this.properties.push(new o.CardViewTextItemModel({label:"Telephone",key:"cd4p",value:this.entity.phoneNumber}))},t.prototype.previousState=function(){window.history.back()},t.ctorParameters=function(){return[{type:d.Router},{type:d.ActivatedRoute},{type:et},{type:c.TdDialogService},{type:o.NotificationService}]},t=y([e.Component({selector:"case-manager-details",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <mat-card>\n            <mat-card-header>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-card-view [properties]="properties" editable="false"></adf-card-view>\n            </mat-card-content>\n            <mat-card-actions class="lamis-edit-form-actions">\n                <button mat-button (click)="previousState()">Back</button>\n                <button mat-raised-button color="warn" (click)="delete()">Delete</button>\n                <button mat-raised-button color="primary" (click)="edit()">Edit</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n'}),M("design:paramtypes",[d.Router,d.ActivatedRoute,et,c.TdDialogService,o.NotificationService])],t)}(),it=function(){function t(t,e,n,i,a){this.caseManagementService=t,this.caseManagerService=e,this.notification=n,this.activatedRoute=i,this.appLoaderService=a}return t.prototype.createEntity=function(){return{}},t.prototype.ngOnInit=function(){var t=this;this.isSaving=!1,this.activatedRoute.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,void 0===t.entity&&(t.entity=t.createEntity()),t.caseManagementService.getActiveFacility().subscribe((function(e){t.entity.facility=e}))}))},t.prototype.save=function(){this.isSaving=!0,this.appLoaderService.open("Saving Case Manager.."),void 0!==this.entity.id?this.subscribeToSaveResponse(this.caseManagerService.update(this.entity)):this.subscribeToSaveResponse(this.caseManagerService.create(this.entity))},t.prototype.previousState=function(){window.history.back()},t.prototype.subscribeToSaveResponse=function(t){var e=this;t.subscribe((function(t){return e.onSaveSuccess(t.body)}),(function(t){e.onSaveError(),e.onError(t.message)}))},t.prototype.onSaveSuccess=function(t){this.appLoaderService.close(),this.isSaving=!1,this.notification.openSnackMessage("Case Manager successfully saved"),this.previousState()},t.prototype.onSaveError=function(){this.isSaving=!1,this.appLoaderService.close(),this.notification.showError("Error occurred saving Case Manager; try again")},t.prototype.onError=function(t){this.appLoaderService.close(),this.notification.showError(t)},t.ctorParameters=function(){return[{type:J},{type:et},{type:o.NotificationService},{type:d.ActivatedRoute},{type:i.AppLoaderService}]},t=y([e.Component({selector:"case-manager-edit",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #caseManagerForm="ngForm">\n            <mat-card class="default">\n                <mat-card-content>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Name</mat-label>\n                                <input matInput name="name" #name="ngModel"\n                                       required\n                                       [(ngModel)]="entity.name"/>\n                                <mat-error\n                                        *ngIf="name.errors && (name.dirty || name.touched) && (name.errors.required)">\n                                    Case Manager name is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Address</mat-label>\n                                <textarea matInput name="address" [(ngModel)]="entity.address" #address="ngModel"\n                                          rows="2" required>\n                                </textarea>\n                                <mat-error\n                                        *ngIf="address.errors && (address.dirty || address.touched) && (address.errors.required)">\n                                    Case Manager address is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Sex</mat-label>\n                                <mat-select name="sex" [(ngModel)]="entity.gender" #sex="ngModel" required>\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'FEMALE\'">Female</mat-option>\n                                    <mat-option [value]="\'MALE\'">Male</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf="sex.errors && (sex.dirty || sex.touched) && (sex.errors.required)">\n                                    Case Manager sex is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Telephone</mat-label>\n                                <input matInput name="phone" phoneNumber [(ngModel)]="entity.phoneNumber" required\n                                       #phone="ngModel"/>\n                                <mat-error\n                                        *ngIf="phone.errors && (phone.dirty || phone.touched) && (phone.errors.required)">\n                                    Case Manager Telephone number is required\n                                </mat-error>\n                                <mat-error\n                                        *ngIf="phone.errors && (phone.dirty || phone.touched) && (phone.errors.invalidPhone)">\n                                    Invalid phone number\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </mat-card-content>\n                <mat-card-actions class="lamis-edit-form-actions">\n                    <button mat-raised-button type="button" (click)="previousState()">Back</button>\n                    <button mat-raised-button color=\'primary\'\n                            [disabled]="caseManagerForm.invalid || isSaving"\n                            type="submit">\n                        {{entity.id !== undefined ? \'Update\' : \'Save\'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n'}),M("design:paramtypes",[J,et,o.NotificationService,d.ActivatedRoute,i.AppLoaderService])],t)}(),at=function(){function t(t,e,n,i,a){this.caseManagerService=t,this.caseManagementService=e,this.notification=n,this.router=i,this.activatedRoute=a,this.page=0,this.loading=!1,this.itemsPerPage=10,this.currentSearch="",this.totalItems=0,this.display="list"}return t.prototype.ngOnInit=function(){var t=this;this.caseManagementService.getActiveFacility().subscribe((function(e){t.facility=e,t.onPageChange(0)}))},t.prototype.select=function(t){this.router.navigate(["..","case-managers",t.obj.uuid,"view"],{relativeTo:this.activatedRoute})},t.prototype.onPageChange=function(t){this.page=t,this.loadAll()},t.prototype.loadPage=function(t){this.page=t,this.loadAll()},t.prototype.loadAll=function(){var t=this;this.loading=!0,this.caseManagerService.query({keyword:this.currentSearch,page:this.page,id:this.facility.id||0,size:this.itemsPerPage,sort:["id","asc"]}).subscribe((function(e){t.onSuccess(e.body,e.headers)}),(function(e){return t.onError(e)}))},t.prototype.onSuccess=function(t,e){this.caseManagers=t,this.totalItems=e.get("X-Total-Count"),this.loading=!1},t.prototype.onError=function(t){this.notification.openSnackMessage(t.message),this.loading=!1},t.ctorParameters=function(){return[{type:et},{type:J},{type:o.NotificationService},{type:d.Router},{type:d.ActivatedRoute}]},t=y([e.Component({selector:"case-managers",template:'<div class="layout">\n    <div class="list-container">\n        <adf-datatable *ngIf="caseManagers"\n                       [rows]="caseManagers"\n                       [loading]="loading"\n                       [display]="display"\n                       (rowClick)="select($event.value)">\n            <data-columns>\n                <data-column key="name" title="Name" sortable="true"></data-column>\n                <data-column key="gender" title="Gender" sortable="true">\n                    <ng-template let-context="$implicit">\n                        {{context.row.getValue(\'gender\') === \'MALE\' ? \'Male\' : context.row.getValue(\'gender\') === \'FEMALE\' ? \'Female\' : \'\'}}\n                    </ng-template>\n                </data-column>\n                <data-column key="phoneNumber" title="Telephone Number" sortable="true"></data-column>\n                <data-column key="address" title="Address" class="full-width ellipsis-cell"></data-column>\n            </data-columns>\n            <adf-loading-content-template>\n                <ng-template>\n                    <mat-progress-spinner\n                            class="adf-document-list-loading-margin"\n                            [color]="\'primary\'"\n                            [mode]="\'indeterminate\'">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n        </adf-datatable>\n    </div>\n    <adf-empty-content\n            *ngIf="!caseManagers"\n            icon="blur_on"\n            [title]="\'No Case Managers found\'"\n            [subtitle]="\'No Case Managers matching search criteria or no Case Managers available\'">\n    </adf-empty-content>\n    <ngb-pagination [collectionSize]="totalItems"\n                    [(page)]="page"\n                    [pageSize]="itemsPerPage"\n                    [maxSize]="5"\n                    size="sm"\n                    [rotate]="true"\n                    [boundaryLinks]="true"\n                    (pageChange)="loadPage(page)">\n    </ngb-pagination>\n\n</div>\n<div class="fab-container">\n    <button mat-fab\n            [matTooltip]="\'Add New Case Manager\'"\n            [routerLink]="[\'new\']">\n        <mat-icon>add</mat-icon>\n    </button>\n</div>\n'}),M("design:paramtypes",[et,J,o.NotificationService,d.Router,d.ActivatedRoute])],t)}(),rt=function(){function t(t){this.service=t}return t.prototype.resolve=function(t,e){var n=t.params.id?t.params.id:null;return n?this.service.findByUuid(n).pipe(a.filter((function(t){return t.ok})),a.map((function(t){return t.body}))):u.of({})},t.ctorParameters=function(){return[{type:et}]},t=y([e.Injectable(),M("design:paramtypes",[et])],t)}(),ot=[{path:"",data:{title:"Case Manager",breadcrumb:"CASE MANAGERS"},children:[{path:"",component:at,data:{authorities:["ROLE_USER"],title:"Case Managers",breadcrumb:"CASE MANAGERS"}},{path:":id/view",component:nt,resolve:{entity:rt},data:{authorities:["ROLE_USER"],title:"Case Manager",breadcrumb:"CASE MANAGER"}},{path:"new",component:it,data:{authorities:["ROLE_DEC"],title:"Add Case Manager",breadcrumb:"ADD CASE MANAGER"}},{path:":id/edit",component:it,resolve:{entity:rt},data:{authorities:["ROLE_DEC"],title:"Case Manager Edit",breadcrumb:"CASE MANAGER EDIT"}}]}],st=function(){function t(){}return t=y([e.NgModule({imports:[s.CommonModule,V,o.CoreModule,h.FormsModule,d.RouterModule.forChild(ot),o.CoreModule,g.NgbModule,c.CovalentSearchModule,c.CovalentDialogsModule,i.LamisSharedModule],declarations:[nt,it,at],providers:[rt]})],t)}();t.CaseManagementModule=tt,t.CaseManagerModule=st,t.ChronicCareModule=H,t.ChronicCareService=F,t.ClinicModule=P,t.ClinicService=w,t.ClinicWidgetModule=T,t.EacModule=X,t.ɵa=k,t.ɵb=R,t.ɵc=E,t.ɵd=L,t.ɵe=D,t.ɵf=V,t.ɵg=x,t.ɵh=B,t.ɵi=_,t.ɵj=O,t.ɵk=q,t.ɵl=z,t.ɵm=K,t.ɵn=Y,t.ɵo=G,t.ɵp=$,t.ɵq=Z,t.ɵr=Q,t.ɵs=J,t.ɵt=rt,t.ɵu=ot,t.ɵv=at,t.ɵw=et,t.ɵx=nt,t.ɵy=it,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=lamis-clinic-1.1.3.umd.min.js.map