{"version":3,"sources":["../../../../../../../../node_modules/tslib/tslib.es6.js","ng://lamis-clinic-1.4.0/lib/services/clinic.service.ts","ng://lamis-clinic-1.4.0/lib/components/clinic/clinic-details.component.ts","ng://lamis-clinic-1.4.0/lib/components/clinic/clinic-edit.component.ts","ng://lamis-clinic-1.4.0/lib/services/clinic.route.ts","ng://lamis-clinic-1.4.0/lib/components/clinic/clinic.widget.ts","ng://lamis-clinic-1.4.0/lib/material.module.ts","ng://lamis-clinic-1.4.0/lib/clinic.widget.module.ts","ng://lamis-clinic-1.4.0/lib/clinic.module.ts","ng://lamis-clinic-1.4.0/lib/services/chronic.care.service.ts","ng://lamis-clinic-1.4.0/lib/components/chronic-care/chronic.care.detail.component.ts","ng://lamis-clinic-1.4.0/lib/components/chronic-care/chronic.care.edit.component.ts","ng://lamis-clinic-1.4.0/lib/services/chronic.care.route.ts","ng://lamis-clinic-1.4.0/lib/chronic.care.module.ts","ng://lamis-clinic-1.4.0/lib/services/eac.service.ts","ng://lamis-clinic-1.4.0/lib/components/eac/eac.details.component.ts","ng://lamis-clinic-1.4.0/lib/components/eac/eac.edit.component.ts","ng://lamis-clinic-1.4.0/lib/services/eac.route.ts","ng://lamis-clinic-1.4.0/lib/eac.module.ts","ng://lamis-clinic-1.4.0/lib/services/case-management.service.ts","ng://lamis-clinic-1.4.0/lib/components/case-management/patient.list.component.ts","ng://lamis-clinic-1.4.0/lib/services/case-management.route.ts","ng://lamis-clinic-1.4.0/lib/case-management.module.ts","ng://lamis-clinic-1.4.0/lib/services/case-manager.service.ts","ng://lamis-clinic-1.4.0/lib/components/case-management/case-manager.details.component.ts","ng://lamis-clinic-1.4.0/lib/components/case-management/case-manager.edit.component.ts","ng://lamis-clinic-1.4.0/lib/components/case-management/case-manager.list.component.ts","ng://lamis-clinic-1.4.0/lib/services/case-manager.route.ts","ng://lamis-clinic-1.4.0/lib/case-manager.module.ts","ng://lamis-clinic-1.4.0/lib/services/cervical-cancer-screening.service.ts","ng://lamis-clinic-1.4.0/lib/components/cervical-cancer-screening/cervical-cancer-screening.component.ts","ng://lamis-clinic-1.4.0/lib/components/cervical-cancer-screening/cervical-cancer-screening-detail.component.ts","ng://lamis-clinic-1.4.0/lib/services/cervical-cancer-screening.route.ts","ng://lamis-clinic-1.4.0/lib/cervical-cancer.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","__spread","concat","moment","moment_","ClinicService","http","serverUrl","this","resourceUrl","SERVER_API_URL","prototype","create","clinic","_this","convertDateFromClient","post","observe","pipe","map","res","convertDateFromServer","update","put","find","id","get","findByUuid","delete","getVisitDatesByPatient","patientId","forEach","getPatient","dateRegistration","dateBirth","getRegimenLines","getRegimenByLine","adverseDrugReactions","opportunisticInfections","adheres","regimes","regimenType","latestVisit","enrolledOnOTZ","assign","dateVisit","isValid","format","DATE_FORMAT","lmp","nextAppointment","pregnant","pregnancyStatus","breastfeeding","bp","bp1","bp2","body","parts","split","parseInt","convertDateArrayFromServer","HttpClient","Inject","args","SERVER_API_URL_CONFIG","Injectable","providedIn","tslib_1.__param","ClinicDetailsComponent","router","route","clinicService","cfr","_dialogService","notificationService","properties","ngOnInit","data","subscribe","_a","entity","snapshot","paramMap","patient","buildProperties","edit","navigate","uuid","openConfirm","title","message","cancelButton","acceptButton","width","afterClosed","accept","ok","showError","CardViewDateItemModel","label","commence","CardViewIntItemModel","cd4p","CardViewFloatItemModel","CardViewTextItemModel","description","regimen","extra","prep","registered","hivTestResult","creatinineClearance","urinalysis","hepatitisB","hepatitisC","otz","dateEnrolledOnOTZ","clinicStage","funcStatus","tbStatus","bodyWeight","height","gender","CardViewBoolItemModel","dateLastOTZMeeting","previousState","window","history","back","ngOnDestroy","Router","ActivatedRoute","ComponentFactoryResolver","TdDialogService","NotificationService","Component","selector","template","ClinicEditComponent","notification","activatedRoute","appLoaderService","today","visitDates","selectedClinicAdr","oiList","adhereList","ColumnMode","adr","otzApplicable","hasOtz","createEntity","isSaving","regimenLines","undefined","facility","statusAtRegistration","isBefore","clone","add","res1","filter","t","subtract","isAfter","regimenLineChange","appointmentMin","appointmentMax","found","cadr","adverseDrugReaction","dateOfFullDisclosure","attendedLastOTZMeeting","caregiverPhone","caregiverAddress","modulesCompleted","fullDisclosure","updateValue","event","cell","row","console","log","severity","filterDates","date","exists","diff","dateChanged","lmpMin","entityCompare","e1","e2","save","open","subscribeToSaveResponse","type","regimens","result","onSaveSuccess","onSaveError","onError","close","showInfo","errorMessage","AppLoaderService","ClinicResolve","service","resolve","state","params","response","of","ROUTES","path","breadcrumb","children","component","authorities","ClinicWidget","tslib_1.__decorate","Input","modules","MatAutocompleteModule","MatButtonModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatDatepickerModule","MatDialogModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatNativeDateModule","MatOptionModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSlideToggleModule","MatTableModule","MatTabsModule","MatMenuModule","MatProgressBarModule","MatSidenavModule","MatSnackBarModule","MatToolbarModule","MatTooltipModule","MatDatetimepickerModule","MatNativeDatetimeModule","MaterialModule","NgModule","imports","exports","ClinicWidgetModule","CommonModule","CoreModule","declarations","entryComponents","providers","ClinicModule","RouterModule","forChild","CovalentMessageModule","CovalentDialogsModule","FormsModule","ReactiveFormsModule","MatDateFormatModule","CustomFormsModule","LamisSharedModule","NgxDatatableModule","ChronicCareService","chronicCare","copy","getDmScreens","getTbScreens","getDmScreenByChronicCare","getTbScreenByChronicCare","dateLastCd4","dateLastViralLoad","dateStartedTbTreatment","ChronicCareDetailComponent","chronicCareService","ChronicCareEditComponent","tbs","dms","bmi","bmiCalculated","calculateBmi","Math","pow","toFixed","ChronicCareResolve","ChronicCareModule","MatStepperModule","EacService","eac","getLatestByPatient","getLatestViralLoadByPatient","at","laboratory","dateReported","dateEac1","dateEac2","dateEac3","dateSampleCollected","EacDetailsComponent","eacService","lastViralLoad","notes","EacEditComponent","updateMinDates","repeatVLMin","eac2Min","eac3Min","tap","dateResultReceived","eac1Min","catchError","err","dateEac1Changed","dateEac2Changed","dateEac3Changed","repeatVLMax","openSnackMessage","EacResolve","EacModule","CaseManagementService","initClients","facilityId","getClientList","req","getCaseManagerStats","caseManagerId","getActiveFacility","getCaseManagers","assignToCaseManager","ids","HttpParams","append","toString","deAssignClients","getStates","getLgasByState","PatientListComponent","stompService","caseManagers","patients","globalProperties","stats","globalStats","hospitalNum","totalItems","page","itemsPerPage","loading","initializing","filterByCaseManager","f","active","updateList","buildStats","states","clearHospitalNum","search","assignClients","patientIds","p","selected","assignCaseManager","caseManager","selections","loadPage","select","obj","caseManagerChanged","headers","buildGlobalStats","ageGroupChanged","ageLimit","pregnancyStatusChanged","stateChanged","lgas","assigned","val","lgaChanged","lgaId","stable","unstableLessThan1year","unstableMoreThan1Year","preArt","RxStompService","CaseManagementModule","NgbModule","CovalentSearchModule","CaseManagerService","query","options","createRequestOption","CaseManagerDetailsComponent","name","address","phoneNumber","CaseManagerEditComponent","caseManagementService","caseManagerService","CaseManagerListComponent","currentSearch","display","onPageChange","relativeTo","pageInfo","loadAll","keyword","size","sort","onSuccess","CaseManagerResolve","CaseManagerModule","CervicalCancerScreeningService","observationResourceUrl","dateTreated","dateScreened","getScreeningByPatient","cervicalCancerScreening","CervicalCancerScreeningComponent","screeningService","observation","RESULT","NEGATIVE","POSITIVE","SUSPICIOUS","METHOD","VIA","VILI","PAP_SMEAR","LESION_METHOD","CRYOTHERAPY","THERMAL_ABLATION","LEETZ_LEEP","CONIZATION","TYPE","FIRST_TIME","FOLLOWUP","POST_TREATMENT_FOLLOWUP","CervicalCancerScreeningDetailComponent","screeningType","screeningMethod","screeningResult","referredForTreatment","precancerousLesionsTreatmentMethod","ObservationResolve","CervicalCancerModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig} from '@lamis/web-core';\nimport {map} from 'rxjs/operators';\nimport {\n    Clinic,\n    ClinicAdhere,\n    ClinicAdverseDrugReaction,\n    ClinicOpportunisticInfection,\n    ClinicVm,\n    Patient\n} from '../model/clinic.model';\n\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Clinic>;\ntype EntityArrayResponseType = HttpResponse<Clinic[]>;\n\n@Injectable({providedIn: 'root'})\nexport class ClinicService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/clinics';\n    }\n\n    create(clinic: Clinic): Observable<EntityResponseType> {\n        clinic = this.convertDateFromClient(clinic);\n        return this.http\n            .post<Clinic>(this.resourceUrl, clinic, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(clinic: Clinic): Observable<EntityResponseType> {\n        clinic = this.convertDateFromClient(clinic);\n        return this.http\n            .put<Clinic>(this.resourceUrl, clinic, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<Clinic>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: string): Observable<EntityResponseType> {\n        return this.http\n            .get<Clinic>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getVisitDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`${this.resourceUrl}/patient/${patientId}/visit-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            );\n    }\n\n    getPatient(id: any) {\n        return this.http.get<Patient>(`/api/patients/by-uuid/${id}`, {observe: 'body'})\n            .pipe(map((res) => {\n                if (res) {\n                    res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null;\n                    res.dateBirth = res.dateBirth != null ? moment(res.dateBirth) : null;\n                }\n                return res;\n            }));\n    }\n\n    getRegimenLines() {\n        return this.http.get<any[]>(`${this.resourceUrl}/regimen-types`);\n    }\n\n    getRegimenByLine(id) {\n        return this.http.get<any[]>(`${this.resourceUrl}/regimens/regimen-type/${id}`);\n    }\n\n    adverseDrugReactions() {\n        return this.http.get<any[]>(`${this.resourceUrl}/adverse-drug-reactions`);\n    }\n\n    opportunisticInfections() {\n        return this.http.get<any[]>(`${this.resourceUrl}/opportunistic-infections`);\n    }\n\n    adheres() {\n        return this.http.get<any[]>(`${this.resourceUrl}/adheres`);\n    }\n\n    regimes(regimenType: number) {\n        return this.http.get(`${this.resourceUrl}/regimens/${regimenType}`);\n    }\n\n    latestVisit(patientId: number) {\n        return this.http.get<Clinic>(`${this.resourceUrl}/patient/${patientId}/latest`);\n    }\n\n    enrolledOnOTZ(id: number) {\n        return this.http.get<boolean>(`${this.resourceUrl}/patient/${id}/enrolled-on-otz`);\n    }\n\n    protected convertDateFromClient(clinic: Clinic): Clinic {\n        const copy: Clinic = Object.assign({}, clinic, {\n            dateVisit: clinic.dateVisit != null && clinic.dateVisit.isValid() ? clinic.dateVisit.format(DATE_FORMAT) : null,\n            lmp: clinic.lmp != null && clinic.lmp.isValid() ? clinic.lmp.format(DATE_FORMAT) : null,\n            nextAppointment: clinic.nextAppointment != null && clinic.nextAppointment.isValid() ?\n                clinic.nextAppointment.format(DATE_FORMAT) : null,\n            pregnant: clinic.pregnancyStatus != null && clinic.pregnancyStatus === 2,\n            breastfeeding: clinic.pregnancyStatus != null && clinic.pregnancyStatus === 3,\n            bp: clinic.bp1 > 0 && clinic.bp2 > 0 ? clinic.bp1 + '/' + clinic.bp2 : null\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.nextAppointment = res.body.nextAppointment != null ? moment(res.body.nextAppointment) : null;\n            res.body.dateVisit = res.body.dateVisit != null ? moment(res.body.dateVisit) : null;\n            res.body.lmp = res.body.lmp != null ? moment(res.body.lmp) : null;\n            res.body.pregnancyStatus = res.body.pregnant ? 2 : res.body.breastfeeding ? 3 : 1;\n            if (res.body.bp) {\n                const parts = res.body.bp.split('/');\n                res.body.bp1 = parseInt(parts[0], 10);\n                res.body.bp2 = parts.length === 2 ? parseInt(parts[1], 10) : null;\n            }\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((clinic: Clinic) => {\n                clinic.dateVisit = clinic.dateVisit != null ? moment(clinic.dateVisit) : null;\n                clinic.lmp = clinic.lmp != null ? moment(clinic.lmp) : null;\n                clinic.nextAppointment = clinic.nextAppointment != null ? moment(clinic.nextAppointment) : null;\n                clinic.pregnancyStatus = clinic.pregnant ? 2 : clinic.breastfeeding ? 3 : 1;\n            });\n        }\n        return res;\n    }\n}\n","import {Component, ComponentFactoryResolver, OnDestroy, OnInit} from '@angular/core';\nimport {Clinic} from '../../model/clinic.model';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {ClinicService} from '../../services/clinic.service';\nimport {TdDialogService} from '@covalent/core';\nimport {\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewFloatItemModel,\n    CardViewIntItemModel,\n    CardViewItem,\n    CardViewTextItemModel,\n    NotificationService\n} from '@alfresco/adf-core';\n\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'lamis-clinic',\n    templateUrl: './clinic-details.component.html'\n})\nexport class ClinicDetailsComponent implements OnInit, OnDestroy {\n    properties: CardViewItem[] = [];\n    entity: Clinic;\n\n    constructor(private router: Router, private route: ActivatedRoute, private clinicService: ClinicService,\n                private cfr: ComponentFactoryResolver, private _dialogService: TdDialogService,\n                private notificationService: NotificationService) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            const patientId = this.route.snapshot.paramMap.get('patientId');\n            this.clinicService.getPatient(patientId).subscribe((res) => this.entity.patient = res);\n            this.buildProperties();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['/', 'clinics', this.entity.uuid, 'patient', this.entity.patient.uuid, 'edit']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this clinic visit, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.clinicService.delete(this.entity.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['patients']);\n                    } else {\n                        this.notificationService.showError('Error deleting visit, please try again');\n                    }\n                });\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateVisit,\n            label: this.entity.commence ? 'ART Start Date' : 'Date Visit',\n            format: 'dd MMM, yyyy'\n        }));\n        if (this.entity.commence) {\n            this.properties.push(new CardViewIntItemModel({\n                label: 'CD4 at start of ART',\n                key: 'cd4',\n                value: this.entity.cd4p || null\n            }));\n            this.properties.push(new CardViewFloatItemModel({\n                label: 'CD4%',\n                key: 'cd4p',\n                value: this.entity.cd4p || null\n            }));\n            this.properties.push(new CardViewTextItemModel({\n                label: 'Original Regimen Line',\n                key: 'rl',\n                value: this.entity.regimenType != null ? this.entity.regimenType.description : ''\n            }));\n            this.properties.push(new CardViewTextItemModel({\n                label: 'Original Regimen',\n                key: 'rl',\n                value: this.entity.regimen != null ? this.entity.regimen.description : ''\n            }));\n        }\n        if (this.entity.extra && this.entity.patient.extra.prep && this.entity.patient.extra.prep.registered) {\n            if (this.entity.commence) {\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'HIV Status at PrEP Initiation',\n                    key: 'cs',\n                    value: this.entity.extra.prep.hivTestResult\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'Creatinine Clearance (mL/min)',\n                    key: 'cs',\n                    value: this.entity.extra.prep.creatinineClearance\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'Urinalysis',\n                    key: 'cs',\n                    value: this.entity.extra.prep.urinalysis\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'Hepatitis B Screening',\n                    key: 'cs',\n                    value: this.entity.extra.prep.hepatitisB\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'Hepatitis C Screening',\n                    key: 'cs',\n                    value: this.entity.extra.prep.hepatitisC\n                }));\n            } else {\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'HIV Status /Test Result',\n                    key: 'cs',\n                    value: this.entity.extra.prep.hivTestResult\n                }));\n            }\n        }\n        if (this.entity.extra && this.entity.extra.otz && this.entity.extra.otz.dateEnrolledOnOTZ) {\n            this.properties.push(new CardViewDateItemModel({\n                key: 'ds',\n                value: moment(this.entity.extra.dateEnrolledOnOTZ),\n                label: 'Date Enrolled on OTZ',\n                format: 'dd MMM, yyyy'\n            }));\n        }\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Clinical Stage',\n            key: 'cs',\n            value: this.entity.clinicStage\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Functional Status',\n            key: 'fs',\n            value: this.entity.funcStatus\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'TB Status',\n            key: 'ts',\n            value: this.entity.tbStatus\n        }));\n        this.properties.push(new CardViewFloatItemModel({\n            label: 'Body Weight(Kg)',\n            key: 'bw',\n            value: this.entity.bodyWeight || null\n        }));\n        this.properties.push(new CardViewFloatItemModel({\n            label: 'Height(m)',\n            key: 'h',\n            value: this.entity.height || null\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Blood Pressure',\n            key: 'cd4p',\n            value: this.entity.bp\n        }));\n        if (this.entity.patient.gender === 'Female') {\n            this.properties.push(new CardViewBoolItemModel({\n                label: 'Pregnant',\n                key: 'pg',\n                value: this.entity.pregnant\n            }));\n            this.properties.push(new CardViewBoolItemModel({\n                label: 'Breastfeeding',\n                key: 'bf',\n                value: this.entity.breastfeeding\n            }));\n            this.properties.push(new CardViewDateItemModel({\n                key: 'lpm',\n                value: this.entity.lmp,\n                label: 'LMP',\n                format: 'dd MMM, yyyy'\n            }));\n        }\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Level of Adherence',\n            key: 'ts',\n            value: this.entity.tbStatus\n        }));\n        if (this.entity.extra && this.entity.extra.otz && this.entity.extra.otz.dateLastOTZMeeting) {\n            this.properties.push(new CardViewDateItemModel({\n                key: 'ds',\n                value: moment(this.entity.extra.dateLastOTZMeeting),\n                label: 'Date of Last OTZ Meeting',\n                format: 'dd MMM, yyyy'\n            }));\n        }\n        this.properties.push(new CardViewDateItemModel({\n            key: 'na',\n            value: this.entity.nextAppointment,\n            label: 'Next Appointment Date',\n            format: 'dd MMM, yyyy'\n        }));\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    public ngOnDestroy() {\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {\n    Adhere,\n    AdverseDrugReaction,\n    Clinic,\n    ClinicAdverseDrugReaction,\n    ClinicVm,\n    OpportunisticInfection\n} from '../../model/clinic.model';\nimport {ClinicService} from '../../services/clinic.service';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {ActivatedRoute} from '@angular/router';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\nimport {AppLoaderService, DATE_FORMAT, entityCompare} from '@lamis/web-core';\nimport {ColumnMode} from '@swimlane/ngx-datatable';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'lamis-clinic-edit',\n    templateUrl: './clinic-edit.component.html'\n})\nexport class ClinicEditComponent implements OnInit {\n    // @ViewChild(MatProgressBar, {static: true}) progressBar: MatProgressBar;\n    // @ViewChild(MatButton, {static: true}) submitButton: MatButton;\n    entity: Clinic;\n    isSaving: boolean;\n    error = false;\n    commence: any;\n    today = moment();\n    lmpMin: Moment;\n    appointmentMax: Moment;\n    appointmentMin: Moment;\n    opportunisticInfections: OpportunisticInfection[];\n    adverseDrugReactions: AdverseDrugReaction[];\n    adheres: Adhere[];\n    regimenLines: any[];\n    regimens: any[];\n    dateBirth: Moment;\n    dateRegistration: Moment;\n    visitDates: Moment[] = [];\n    selectedClinicAdr: ClinicAdverseDrugReaction[] = [];\n    oiList: OpportunisticInfection[] = [];\n    adhereList: Adhere[] = [];\n    ColumnMode = ColumnMode;\n    adr = false;\n    enrolledOnOTZ: boolean;\n    fullDisclosure: boolean;\n    dateOfFullDisclosure: Moment;\n    dateEnrolledOnOTZ: Moment;\n    attendedLastOTZMeeting: boolean;\n    dateLastOTZMeeting: Moment;\n    modulesCompleted: number;\n    caregiverPhone: string;\n    caregiverAddress: string;\n    otzApplicable = false;\n    hasOtz = false;\n    hivTestResult: string;\n    prep: boolean;\n    urinalysis: string;\n    hepatitisB: string;\n    hepatitisC: string;\n    creatinineClearance: any;\n\n    constructor(private clinicService: ClinicService,\n                protected notification: NotificationService,\n                protected activatedRoute: ActivatedRoute,\n                private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): Clinic {\n        return <Clinic>{};\n    }\n\n    ngOnInit(): void {\n        this.clinicService.opportunisticInfections().subscribe(res => this.opportunisticInfections = res);\n        this.clinicService.adheres().subscribe(res => this.adheres = res);\n        this.isSaving = false;\n        this.clinicService.getRegimenLines().subscribe(res => {\n            this.regimenLines = res;\n        });\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.commence = !!this.activatedRoute.snapshot.data['commence'];\n\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n\n            this.clinicService.getPatient(patientId).subscribe((res) => {\n                this.entity.patient = res;\n                this.entity.facility = res.facility;\n                this.dateBirth = res.dateBirth;\n                this.dateRegistration = res.dateRegistration;\n\n                if (res.statusAtRegistration === 'ART_TRANSFER_IN') {\n                    this.dateRegistration = moment('1999-01-01', 'YYYY-MM-DD');\n                    if (this.dateRegistration.isBefore(this.entity.patient.dateBirth)) {\n                        this.dateRegistration = this.entity.patient.dateBirth.clone().add(3, 'months');\n                    }\n                }\n                if (res.extra && res.extra.prep && res.extra.prep.registered) {\n                    this.prep = true;\n\n                    this.clinicService.getRegimenLines().subscribe(res1 => {\n                        this.regimenLines = res1.filter(t => {\n                            return t.id === 30;\n                        });\n                    });\n                }\n\n                this.clinicService.enrolledOnOTZ(res.id).subscribe(r => {\n                    this.enrolledOnOTZ = r;\n                    this.hasOtz = r;\n                });\n\n                this.otzApplicable = !moment().subtract(24, 'years').isAfter(this.entity.patient.dateBirth)\n                    && !moment().subtract(10, 'years').isBefore(this.entity.patient.dateBirth);\n\n                this.clinicService.getVisitDatesByPatient(this.entity.patient.id).subscribe((res1) => {\n                    this.visitDates = res1;\n                });\n            });\n            if (this.entity.commence && this.entity.regimenType) {\n                this.regimenLineChange(this.entity.regimenType);\n            }\n            this.commence = this.commence || this.entity.commence;\n\n            if (this.commence) {\n                this.entity.commence = true;\n                if (this.entity.regimenType) {\n                    this.regimenLineChange(this.entity.regimenType);\n                }\n            }\n\n            if (this.entity.id) {\n                this.appointmentMin = this.entity.dateVisit.clone().add(14, 'days');\n                this.appointmentMax = this.entity.dateVisit.clone().add(8, 'months');\n                this.clinicService.adverseDrugReactions().subscribe(res1 => {\n                    this.adverseDrugReactions = res1;\n\n                    this.adr = !!this.entity.adverseDrugReactions;\n                    this.adverseDrugReactions.forEach(adr => {\n                        let found = false;\n                        (this.entity.adverseDrugReactions || []).forEach(cadr => {\n                            if (cadr.adverseDrugReaction.id === adr.id) {\n                                found = true;\n                                this.selectedClinicAdr.push(cadr);\n                            }\n                        });\n                        if (!found) {\n                            this.selectedClinicAdr.push({\n                                adverseDrugReaction: adr\n                            });\n                        }\n                    });\n                    this.selectedClinicAdr = [...this.selectedClinicAdr];\n\n                    if (this.entity.extra) {\n                        if (this.entity.extra.prep) {\n                            this.hivTestResult = this.entity.extra.prep.hivTestResult;\n                            this.creatinineClearance = this.entity.extra.prep.creatinineClearance;\n                            this.hepatitisB = this.entity.extra.prep.hepatitisB;\n                            this.hepatitisC = this.entity.extra.prep.hepatitisC;\n                            this.urinalysis = this.entity.extra.prep.urinalysis;\n                        }\n\n                        if (this.entity.extra.otz) {\n                            if (!!this.entity.extra.otz.dateOfFullDisclosure) {\n                                this.dateOfFullDisclosure = moment(this.entity.extra.otz.dateOfFullDisclosure);\n                            }\n                            this.attendedLastOTZMeeting = !!this.entity.extra.otz.attendedLastOTZMeeting;\n                            this.enrolledOnOTZ = !!this.entity.extra.otz.enrolledOnOTZ;\n                            if (!!this.entity.extra.otz.dateEnrolledOnOTZ) {\n                                this.dateEnrolledOnOTZ = moment(this.entity.extra.otz.dateEnrolledOnOTZ);\n                            }\n\n                            if (!!this.entity.extra.otz.dateLastOTZMeeting) {\n                                this.dateLastOTZMeeting = moment(this.entity.extra.otz.dateLastOTZMeeting);\n                            }\n                            this.caregiverPhone = this.entity.extra.otz.caregiverPhone;\n                            this.caregiverAddress = this.entity.extra.otz.caregiverAddress;\n                            this.modulesCompleted = this.entity.extra.otz.modulesCompleted;\n                            this.fullDisclosure = this.entity.extra.otz.fullDisclosure;\n                        }\n                    }\n                });\n            } else {\n                this.clinicService.adverseDrugReactions().subscribe(res => {\n                    this.adverseDrugReactions = res;\n                    this.adverseDrugReactions.forEach(adr => {\n                        this.selectedClinicAdr.push({\n                            adverseDrugReaction: adr\n                        });\n                    });\n                });\n\n                this.selectedClinicAdr = [...this.selectedClinicAdr];\n            }\n        });\n    }\n\n    updateValue(event, cell, row: AdverseDrugReaction) {\n        console.log('Edit', event, cell, row);\n        this.selectedClinicAdr = [...this.selectedClinicAdr.map(cadr => {\n            if (cadr.adverseDrugReaction && cadr.adverseDrugReaction.id === row.id) {\n                cadr.severity = event;\n            }\n            return cadr;\n        })];\n        console.log('UPDATED!', row, event);\n    }\n\n\n    filterDates(date: Moment): boolean {\n        let exists = false;\n\n        this.visitDates.forEach(d => {\n            if (date.diff(d, 'days') === 0) {\n                exists = true;\n            }\n        });\n        return (this.entity.id && date.diff(this.entity.dateVisit, 'days') === 0) || !exists;\n    }\n\n    dateChanged(date: Moment) {\n        this.appointmentMax = date.clone().add(6, 'months');\n        this.lmpMin = date.clone().subtract(2, 'years');\n        this.appointmentMin = date.clone().add(14, 'days');\n\n        this.otzApplicable = !date.clone().subtract(24, 'years').isAfter(this.entity.patient.dateBirth)\n            && !date.clone().subtract(10, 'years').isBefore(this.entity.patient.dateBirth);\n    }\n\n    entityCompare(e1, e2) {\n        return entityCompare(e1, e2);\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    save() {\n        this.isSaving = true;\n        if (!this.entity.extra) {\n            this.entity.extra = {};\n        }\n        this.entity.extra.otz = {};\n\n        this.entity.extra.otz.fullDisclosure = this.fullDisclosure;\n        this.entity.extra.otz.dateOfFullDisclosure = this.dateOfFullDisclosure != null && this.dateOfFullDisclosure.isValid() ?\n            this.dateOfFullDisclosure.format(DATE_FORMAT) : null;\n        this.entity.extra.otz.dateEnrolledOnOTZ = this.dateEnrolledOnOTZ != null && this.dateEnrolledOnOTZ.isValid() ?\n            this.dateEnrolledOnOTZ.format(DATE_FORMAT) : null;\n        this.entity.extra.otz.attendedLastOTZMeeting = !!this.attendedLastOTZMeeting;\n        this.entity.extra.otz.dateLastOTZMeeting = this.dateLastOTZMeeting != null && this.dateLastOTZMeeting.isValid() ?\n            this.dateLastOTZMeeting.format(DATE_FORMAT) : null;\n        this.entity.extra.otz.enrolledOnOTZ = this.enrolledOnOTZ;\n        this.entity.extra.otz.caregiverPhone = this.caregiverPhone;\n        this.entity.extra.otz.caregiverAddress = this.caregiverAddress;\n        this.entity.extra.otz.modulesCompleted = this.modulesCompleted;\n\n        if (this.prep) {\n            this.entity.extra.prep = {};\n            this.entity.extra.prep.hivTestResult = this.hivTestResult;\n            this.entity.extra.prep.creatinineClearance = this.creatinineClearance;\n            this.entity.extra.prep.hepatitisB = this.hepatitisB;\n            this.entity.extra.prep.hepatitisC = this.hepatitisC;\n            this.entity.extra.prep.urinalysis = this.urinalysis;\n        }\n        this.entity.adverseDrugReactions = this.selectedClinicAdr.filter(cadr => !!cadr.severity);\n        this.entity.opportunisticInfections = this.oiList;\n        this.entity.adheres = this.adhereList;\n        this.appLoaderService.open('Saving clinic visit..');\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.clinicService.update(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.clinicService.create(this.entity));\n        }\n    }\n\n    regimenLineChange(type: any) {\n        this.clinicService.getRegimenByLine(type.id).subscribe(res => this.regimens = res);\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.onSaveError();\n                this.onError(res.message);\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Clinic visit successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.appLoaderService.close();\n        this.error = true;\n        // this.submitButton.disabled = true;\n        this.notification.showError('Error occurred saving clinic visit; try again');\n        // this.progressBar.mode = 'determinate';\n    }\n\n    protected onError(errorMessage: string) {\n        this.appLoaderService.close();\n        this.notification.showError(errorMessage);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpResponse} from '@angular/common/http';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes} from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport {ClinicService} from './clinic.service';\nimport {Clinic} from '../model/clinic.model';\nimport {ClinicDetailsComponent} from '../components/clinic/clinic-details.component';\nimport {ClinicEditComponent} from '../components/clinic/clinic-edit.component';\n\n@Injectable()\nexport class ClinicResolve implements Resolve<Clinic> {\n    constructor(private service: ClinicService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Clinic> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Clinic>) => response.ok),\n                map((patient: HttpResponse<Clinic>) => patient.body)\n            );\n        }\n        return of(<Clinic>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Clinic Visit',\n            breadcrumb: 'CLINIC VISIT'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: ClinicDetailsComponent,\n                resolve: {\n                    entity: ClinicResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Clinic Visit',\n                    breadcrumb: 'CLINIC VISIT'\n                },\n                // canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: ClinicEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Clinic Visit',\n                    breadcrumb: 'ADD CLINIC VISIT'\n                },\n                // canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'art-commencement/patient/:patientId/new',\n                component: ClinicEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'ART Commencement /PrEP Initiation',\n                    breadcrumb: 'ADD ART COMMENCEMENT /PREP INITIATION',\n                    commence: true\n                },\n                // canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: ClinicEditComponent,\n                resolve: {\n                    entity: ClinicResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Clinic Visit Edit',\n                    breadcrumb: 'CLINIC VISIT EDIT'\n                },\n                // canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ClinicService} from '../../services/clinic.service';\nimport {Clinic} from '../../model/clinic.model';\nimport {CardViewDateItemModel, CardViewFloatItemModel, CardViewItem, CardViewTextItemModel} from '@alfresco/adf-core';\n\n@Component({\n    selector: 'clinic-widget',\n    templateUrl: './clinic.widget.html'\n})\nexport class ClinicWidget implements OnInit {\n    @Input()\n    patientId: number;\n    clinic: Clinic;\n    properties: CardViewItem[] = [];\n\n    constructor(private clinicService: ClinicService) {\n    }\n\n    ngOnInit(): void {\n        this.clinicService.latestVisit(this.patientId).subscribe((res) => {\n            this.clinic = res;\n            this.buildProperties();\n        });\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewDateItemModel({\n            key: 'dv',\n            value: this.clinic.dateVisit,\n            label: 'Last Clinic Visit',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewDateItemModel({\n            key: 'nv',\n            value: this.clinic.nextAppointment,\n            label: 'Next Clinic Visit',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Functional Status',\n            key: 'fs',\n            value: this.clinic.funcStatus\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Clinical Stage',\n            key: 'cs',\n            value: this.clinic.clinicStage\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'TB Status',\n            key: 'ts',\n            value: this.clinic.tbStatus\n        }));\n        this.properties.push(new CardViewFloatItemModel({\n            label: 'Body Weight(Kg)',\n            key: 'bw',\n            value: this.clinic.bodyWeight\n        }));\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatDatetimepickerModule, MatNativeDatetimeModule} from '@mat-datetimepicker/core';\n\nimport {\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatOptionModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatCheckboxModule,\n        MatChipsModule, MatDatepickerModule, MatDialogModule, MatGridListModule, MatIconModule,\n        MatInputModule, MatListModule, MatNativeDateModule, MatOptionModule, MatProgressSpinnerModule, MatRadioModule,\n        MatRippleModule, MatSelectModule, MatSlideToggleModule, MatTableModule, MatTabsModule,\n        MatMenuModule, MatProgressBarModule, MatSidenavModule, MatSnackBarModule, MatToolbarModule,\n        MatTooltipModule, MatDatetimepickerModule, MatNativeDatetimeModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {\n}\n","import {NgModule} from '@angular/core';\nimport {ClinicWidget} from './components/clinic/clinic.widget';\nimport {CommonModule} from '@angular/common';\nimport {CoreModule} from '@alfresco/adf-core';\nimport {MaterialModule} from './material.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule\n    ],\n    declarations: [\n        ClinicWidget\n    ],\n    entryComponents: [\n        ClinicWidget\n    ],\n    exports: [\n        ClinicWidget\n    ],\n    providers: []\n})\nexport class ClinicWidgetModule {\n\n}\n","import {CoreModule} from '@alfresco/adf-core';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatProgressBarModule,\n    MatSelectModule\n} from '@angular/material';\nimport {RouterModule} from '@angular/router';\nimport {CovalentDialogsModule, CovalentMessageModule} from '@covalent/core';\nimport {ClinicDetailsComponent} from './components/clinic/clinic-details.component';\nimport {ClinicEditComponent} from './components/clinic/clinic-edit.component';\nimport {ClinicResolve, ROUTES} from './services/clinic.route';\nimport {ClinicWidgetModule} from './clinic.widget.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {LamisSharedModule, MatDateFormatModule} from '@lamis/web-core';\nimport {CustomFormsModule} from 'ng2-validation';\nimport {NgxDatatableModule} from '@swimlane/ngx-datatable';\n\n@NgModule({\n    declarations: [\n        ClinicDetailsComponent,\n        ClinicEditComponent\n    ],\n    imports: [\n        CommonModule,\n        MatInputModule,\n        MatIconModule,\n        MatCardModule,\n        MatSelectModule,\n        MatButtonModule,\n        RouterModule.forChild(ROUTES),\n        MatProgressBarModule,\n        CovalentMessageModule,\n        CovalentDialogsModule,\n        MatListModule,\n        CoreModule,\n        ClinicWidgetModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDateFormatModule,\n        CustomFormsModule,\n        LamisSharedModule,\n        NgxDatatableModule,\n    ],\n    exports: [\n        ClinicDetailsComponent,\n        ClinicEditComponent\n    ],\n    entryComponents: [],\n    providers: [\n        ClinicResolve\n    ]\n})\nexport class ClinicModule {\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig} from '@lamis/web-core';\nimport {ChronicCare, ChronicCareVm} from '../model/clinic.model';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\n\nconst moment = moment_;\n\n@Injectable({providedIn: 'root'})\nexport class ChronicCareService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/chronic-cares';\n    }\n\n    create(chronicCare: ChronicCare): Observable<HttpResponse<ChronicCare>> {\n        const copy = this.convertDateFromClient(chronicCare);\n        return this.http\n            .post<ChronicCare>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: HttpResponse<ChronicCare>) => this.convertDateFromServer(res)));\n    }\n\n    update(chronicCare: ChronicCare): Observable<HttpResponse<ChronicCare>> {\n        const copy = this.convertDateFromClient(chronicCare);\n        return this.http\n            .put<ChronicCare>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: HttpResponse<ChronicCare>) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<HttpResponse<ChronicCare>> {\n        return this.http\n            .get<ChronicCare>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<ChronicCare>) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: string): Observable<HttpResponse<ChronicCare>> {\n        return this.http\n            .get<ChronicCare>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<ChronicCare>) => this.convertDateFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getDmScreens() {\n        return this.http.get(`${this.resourceUrl}/dm-screens`);\n    }\n\n    getTbScreens() {\n        return this.http.get(`${this.resourceUrl}/tb-screens`);\n    }\n\n    getDmScreenByChronicCare(id: number) {\n        return this.http.get(`${this.resourceUrl}/${id}/dm-screens`);\n    }\n\n    getTbScreenByChronicCare(id: number) {\n        return this.http.get(`${this.resourceUrl}/${id}/tb-screens`);\n    }\n\n    getVisitDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`${this.resourceUrl}/patient/${patientId}/visit-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            );\n    }\n\n    protected convertDateFromServer(res: HttpResponse<ChronicCare>): HttpResponse<ChronicCare> {\n        if (res.body) {\n            res.body.dateLastCd4 = res.body.dateLastCd4 != null ? moment(res.body.dateLastCd4) : null;\n            res.body.dateVisit = res.body.dateVisit != null ? moment(res.body.dateVisit) : null;\n            res.body.dateLastViralLoad = res.body.dateLastViralLoad != null ? moment(res.body.dateLastViralLoad) : null;\n            res.body.dateStartedTbTreatment = res.body.dateStartedTbTreatment != null ? moment(res.body.dateStartedTbTreatment) : null;\n        }\n        return res;\n    }\n\n    protected convertDateFromClient(chronicCare: ChronicCare): ChronicCare {\n        chronicCare = Object.assign({}, chronicCare, {\n            dateLastViralLoad: chronicCare.dateLastViralLoad != null && chronicCare.dateLastViralLoad.isValid() ?\n                chronicCare.dateLastViralLoad.format(DATE_FORMAT) : null,\n            dateVisit: chronicCare.dateVisit != null && chronicCare.dateVisit.isValid() ?\n                chronicCare.dateVisit.format(DATE_FORMAT) : null,\n            dateLastCd4: chronicCare.dateLastCd4 != null && chronicCare.dateLastCd4.isValid() ?\n                chronicCare.dateLastCd4.format(DATE_FORMAT) : null,\n            dateStartedTbTreatment: chronicCare.dateStartedTbTreatment != null &&\n            chronicCare.dateStartedTbTreatment.isValid() ? chronicCare.dateStartedTbTreatment.format(DATE_FORMAT) : null\n        });\n        return chronicCare;\n    }\n\n}\n","import {Component, OnInit} from '@angular/core';\nimport {ClinicService} from '../../services/clinic.service';\nimport {CardViewItem, NotificationService} from '@alfresco/adf-core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {ChronicCare} from '../../model/clinic.model';\nimport {TdDialogService} from '@covalent/core';\nimport {ChronicCareService} from '../../services/chronic.care.service';\n\n@Component({\n    selector: 'chronic-care-detail',\n    templateUrl: './chronic.care.detail.component.html'\n})\nexport class ChronicCareDetailComponent implements OnInit {\n    properties: CardViewItem[] = [];\n    entity: ChronicCare;\n\n    constructor(private router: Router, private route: ActivatedRoute, private chronicCareService: ChronicCareService,\n                private _dialogService: TdDialogService, private notificationService: NotificationService,\n                private clinicService: ClinicService) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            const patientId = this.route.snapshot.paramMap.get('patientId');\n            this.clinicService.getPatient(patientId).subscribe((res) => this.entity.patient = res);\n            this.buildProperties();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['/', 'chronic-cares', this.entity.uuid, 'patient', this.entity.patient.uuid, 'edit']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this chronic care visit, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.chronicCareService.delete(this.entity.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['patients']);\n                    } else {\n                        this.notificationService.showError('Error deleting visit, please try again');\n                    }\n                });\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    buildProperties() {\n\n    }\n\n\n    previousState() {\n        window.history.back();\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {ChronicCare, ChronicCareDm, ChronicCareTB, Patient} from '../../model/clinic.model';\nimport {ClinicService} from '../../services/clinic.service';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ChronicCareService} from '../../services/chronic.care.service';\nimport {Observable} from 'rxjs';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\nimport {AppLoaderService} from '@lamis/web-core';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'chronic-care-edit',\n    templateUrl: './chronic.care.edit.component.html'\n})\nexport class ChronicCareEditComponent implements OnInit {\n    entity: ChronicCare;\n    patient: Patient;\n    today = moment();\n    tbs: ChronicCareTB[] = [];\n    dms: ChronicCareDm[] = [];\n    visitDates: Moment[] = [];\n    isSaving = false;\n    bmi = '';\n    bmiCalculated = '';\n\n    constructor(private clinicService: ClinicService,\n                private chronicCareService: ChronicCareService,\n                protected notification: NotificationService,\n                protected activatedRoute: ActivatedRoute,\n                private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): ChronicCare {\n        return <ChronicCare>{};\n    }\n\n    ngOnInit(): void {\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.clinicService.getPatient(patientId).subscribe((res) => {\n                this.entity.patient = res;\n                this.entity.facility = res.facility;\n                this.chronicCareService.getVisitDatesByPatient(this.entity.patient.id).subscribe((res1) => {\n                    this.visitDates = res1;\n                });\n            });\n\n            this.calculateBmi();\n        });\n\n    }\n\n    filterDates(date: Moment): boolean {\n        let exists = false;\n\n        this.visitDates.forEach(d => {\n            if (date.diff(d, 'days') === 0) {\n                exists = true;\n            }\n        });\n        return (this.entity.id && date.diff(this.entity.dateVisit, 'days') === 0) || !exists;\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    calculateBmi() {\n        if (this.entity.bodyWeight && this.entity.height) {\n            const bmi = this.entity.bodyWeight / Math.pow(this.entity.height, 2);\n            if (bmi < 18.5) {\n                this.bmi = '<18.5 (Underweight)';\n            } else if (bmi < 24.9) {\n                this.bmi = '18.5 - 24.9 (Healthy)';\n            } else if (bmi < 29.9) {\n                this.bmi = '25.0 - 29.9 (Overweight)';\n            } else if (bmi < 40) {\n                this.bmi = '30 - 40 (Obesity)';\n            } else {\n                this.bmi = '>40 (Morbid Obesity)';\n            }\n            this.bmiCalculated = bmi.toFixed(1);\n        } else {\n            this.bmi = '';\n        }\n    }\n\n    save() {\n        // this.submitButton.disabled = true;\n        // this.progressBar.mode = 'indeterminate';\n        this.isSaving = true;\n        this.appLoaderService.open('Saving chronic care visit..');\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.chronicCareService.update(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.chronicCareService.create(this.entity));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.onSaveError();\n                this.onError(res.message);\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Chronic Care visit successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.appLoaderService.close();\n        // this.submitButton.disabled = true;\n        this.notification.showError('Error occurred saving chronic care visit; try again');\n        // this.progressBar.mode = 'determinate';\n    }\n\n    protected onError(errorMessage: string) {\n        this.appLoaderService.close();\n        this.notification.showError(errorMessage);\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpResponse} from '@angular/common/http';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes} from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport {ChronicCare} from '../model/clinic.model';\nimport {ChronicCareService} from './chronic.care.service';\nimport {ChronicCareEditComponent} from '../components/chronic-care/chronic.care.edit.component';\nimport {ChronicCareDetailComponent} from '../components/chronic-care/chronic.care.detail.component';\n\n@Injectable()\nexport class ChronicCareResolve implements Resolve<ChronicCare> {\n    constructor(private service: ChronicCareService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<ChronicCare> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<ChronicCare>) => response.ok),\n                map((patient: HttpResponse<ChronicCare>) => patient.body)\n            );\n        }\n        return of(<ChronicCare>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Chronic Care Visit',\n            breadcrumb: 'CHRONIC CARE VISIT'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: ChronicCareDetailComponent,\n                resolve: {\n                    entity: ChronicCareResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Chronic Care Visit',\n                    breadcrumb: 'CHRONIC CARE VISIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: ChronicCareEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Chronic Care Visit',\n                    breadcrumb: 'ADD CHRONIC CARE VISIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: ChronicCareEditComponent,\n                resolve: {\n                    entity: ChronicCareResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Chronic Care Visit Edit',\n                    breadcrumb: 'CHRONIC CARE VISIT EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import {NgModule} from '@angular/core';\nimport {ChronicCareDetailComponent} from './components/chronic-care/chronic.care.detail.component';\nimport {ChronicCareEditComponent} from './components/chronic-care/chronic.care.edit.component';\nimport {ChronicCareResolve} from './services/chronic.care.route';\nimport {MaterialModule} from './material.module';\nimport {CoreModule} from '@alfresco/adf-core';\nimport {CustomFormsModule} from 'ng2-validation';\nimport {CommonModule} from '@angular/common';\nimport {CovalentDialogsModule} from '@covalent/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {LamisSharedModule, MatDateFormatModule} from '@lamis/web-core';\nimport {RouterModule} from '@angular/router';\nimport {ROUTES} from './services/chronic.care.route';\nimport {MatStepperModule} from '@angular/material';\n\n@NgModule({\n    declarations: [\n        ChronicCareDetailComponent,\n        ChronicCareEditComponent\n    ],\n    imports: [\n        CommonModule,\n        CovalentDialogsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        LamisSharedModule,\n        MaterialModule,\n        CoreModule,\n        CustomFormsModule,\n        MatDateFormatModule,\n        RouterModule.forChild(ROUTES),\n        MatStepperModule\n    ],\n    providers: [\n        ChronicCareResolve\n    ]\n})\nexport class ChronicCareModule {\n\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig} from '@lamis/web-core';\nimport {EAC} from '../model/clinic.model';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\n\nconst moment = moment_;\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class EacService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/eacs';\n    }\n\n    create(eac: EAC): Observable<HttpResponse<EAC>> {\n        const copy = this.convertDateFromClient(eac);\n        return this.http\n            .post<EAC>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: HttpResponse<EAC>) => this.convertDateFromServer(res)));\n    }\n\n    update(eac: EAC): Observable<HttpResponse<EAC>> {\n        const copy = this.convertDateFromClient(eac);\n        return this.http\n            .put<EAC>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: HttpResponse<EAC>) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<HttpResponse<EAC>> {\n        return this.http\n            .get<EAC>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<EAC>) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: string): Observable<HttpResponse<EAC>> {\n        return this.http\n            .get<EAC>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<EAC>) => this.convertDateFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getLatestByPatient(uuid: string): Observable<HttpResponse<EAC>> {\n        return this.http\n            .get<EAC>(`${this.resourceUrl}/patient/${uuid}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<EAC>) => this.convertDateFromServer(res)));\n    }\n\n    getLatestViralLoadByPatient(id: number, at: Moment): Observable<HttpResponse<any>> {\n        const date = at.format(DATE_FORMAT);\n        return this.http\n            .get<any>(`${this.resourceUrl}/patient/${id}/viral-load-result/at/${date}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<any>) => {\n                if (res.body) {\n                    res.body.laboratory.dateReported = res.body.laboratory.dateReported != null ?\n                        moment(res.body.laboratory.dateReported) : null;\n                }\n                return res;\n            }));\n    }\n\n    protected convertDateFromClient(eac: EAC): EAC {\n        const copy: EAC = Object.assign({}, eac, {\n            dateEac1: eac.dateEac1 != null && eac.dateEac1.isValid() ? eac.dateEac1.format(DATE_FORMAT) : null,\n            dateEac2: eac.dateEac2 != null && eac.dateEac2.isValid() ? eac.dateEac2.format(DATE_FORMAT) : null,\n            dateEac3: eac.dateEac3 != null && eac.dateEac3.isValid() ? eac.dateEac3.format(DATE_FORMAT) : null,\n            dateSampleCollected: eac.dateSampleCollected != null && eac.dateSampleCollected.isValid() ? eac.dateSampleCollected.format(DATE_FORMAT) : null,\n            dateLastViralLoad: eac.dateLastViralLoad != null && eac.dateLastViralLoad.isValid() ? eac.dateLastViralLoad.format(DATE_FORMAT) : null,\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: HttpResponse<EAC>): HttpResponse<EAC> {\n        if (res.body) {\n            res.body.dateLastViralLoad = res.body.dateLastViralLoad != null ? moment(res.body.dateLastViralLoad) : null;\n            res.body.dateEac1 = res.body.dateEac1 != null ? moment(res.body.dateEac1) : null;\n            res.body.dateEac2 = res.body.dateEac2 != null ? moment(res.body.dateEac2) : null;\n            res.body.dateEac3 = res.body.dateEac3 != null ? moment(res.body.dateEac3) : null;\n            res.body.dateSampleCollected = res.body.dateSampleCollected != null ? moment(res.body.dateSampleCollected) : null;\n        }\n        return res;\n    }\n\n}\n","import {Component, OnInit} from '@angular/core';\nimport {EAC} from '../../model/clinic.model';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {TdDialogService} from '@covalent/core';\nimport {CardViewDateItemModel, CardViewItem, CardViewTextItemModel, NotificationService} from '@alfresco/adf-core';\nimport {EacService} from '../../services/eac.service';\n\n@Component({\n    selector: 'eac-details',\n    templateUrl: './eac.details.component.html'\n})\nexport class EacDetailsComponent implements OnInit {\n    properties: CardViewItem[] = [];\n    entity: EAC;\n\n    constructor(private router: Router, private route: ActivatedRoute,\n                private _dialogService: TdDialogService, private notificationService: NotificationService,\n                private eacService: EacService) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            this.buildProperties();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['/', 'eacs', this.entity.uuid, 'patient', this.entity.patient.uuid, 'edit']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this EAC Record, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.eacService.delete(this.entity.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['patients']);\n                    } else {\n                        this.notificationService.showError('Error deleting visit, please try again');\n                    }\n                });\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateLastViralLoad,\n            label: 'Date Last Viral Load',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            key: 'vl',\n            value: this.entity.lastViralLoad,\n            label: 'Last Viral Load'\n        }));\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateEac1,\n            label: 'Date of 1st EAC Session',\n            format: 'dd MMM, yyyy'\n        }));\n        if (this.entity.dateEac2) {\n            this.properties.push(new CardViewDateItemModel({\n                key: 'ds',\n                value: this.entity.dateEac2,\n                label: 'Date of 2nd EAC Session',\n                format: 'dd MMM, yyyy'\n            }));\n        }\n        if (this.entity.dateEac3) {\n            this.properties.push(new CardViewDateItemModel({\n                key: 'ds',\n                value: this.entity.dateEac3,\n                label: 'Date of 3rd EAC Session',\n                format: 'dd MMM, yyyy'\n            }));\n        }\n        if (this.entity.dateEac3) {\n            this.properties.push(new CardViewDateItemModel({\n                key: 'ds',\n                value: this.entity.dateSampleCollected,\n                label: 'Date of Repeat VL Sample Collection',\n                format: 'dd MMM, yyyy'\n            }));\n        }\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Notes',\n            key: 'ts',\n            value: this.entity.notes\n        }));\n    }\n\n    previousState() {\n        window.history.back();\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\nimport {Observable} from 'rxjs';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {ClinicService} from '../../services/clinic.service';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {ActivatedRoute} from '@angular/router';\nimport {AppLoaderService} from '@lamis/web-core';\nimport {EAC, Patient} from '../../model/clinic.model';\nimport {EacService} from '../../services/eac.service';\nimport {catchError, tap} from 'rxjs/operators';\n\nconst moment = moment_;\n\n\n@Component({\n    selector: 'eac-edit',\n    templateUrl: './eac.edit.component.html'\n})\nexport class EacEditComponent implements OnInit {\n    entity: EAC;\n    patient: Patient;\n    today = moment();\n    dateRegistration: Moment;\n    eac1Min: Moment;\n    eac2Min: Moment;\n    eac3Min: Moment;\n    repeatVLMin: Moment;\n    repeatVLMax: Moment;\n    isSaving: boolean = false;\n\n    constructor(private clinicService: ClinicService,\n                private eacService: EacService,\n                protected notification: NotificationService,\n                protected activatedRoute: ActivatedRoute,\n                private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): EAC {\n        return <EAC>{};\n    }\n\n    ngOnInit(): void {\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.clinicService.getPatient(patientId).subscribe((res) => {\n                this.entity.patient = res;\n                this.entity.facility = res.facility;\n                this.dateRegistration = res.dateRegistration;\n                this.updateMinDates(res.id, moment());\n                if (!this.entity.id) {\n                    this.eacService.getLatestByPatient(res.uuid).subscribe(r => {\n                        this.entity = r.ok ? r.body : this.createEntity();\n                        this.repeatVLMin = this.entity.dateEac3 ? this.entity.dateEac3.clone().add(1, 'day') :\n                            this.entity.dateLastViralLoad;\n                        this.eac2Min = this.entity.dateEac1 ? this.entity.dateEac1.clone().add(2, 'week') :\n                            this.entity.dateLastViralLoad;\n                        this.eac3Min = this.entity.dateEac2 ? this.entity.dateEac2.clone().add(2, 'week') :\n                            this.entity.dateLastViralLoad;\n                    });\n                }\n            });\n\n        });\n    }\n\n    updateMinDates(id: number, date: Moment) {\n        this.eacService.getLatestViralLoadByPatient(id, date).pipe(tap((r: any) => {\n                this.entity.dateLastViralLoad = moment(r.laboratory.dateResultReceived);\n                this.entity.lastViralLoad = r.result;\n                this.eac1Min = this.entity.dateLastViralLoad.clone().add(1, 'day');\n                this.eac2Min = this.entity.dateEac1 ? this.entity.dateEac1.clone().add(2, 'week') :\n                    this.entity.dateLastViralLoad;\n                this.eac3Min = this.entity.dateEac2 ? this.entity.dateEac2.clone().add(2, 'week') :\n                    this.entity.dateLastViralLoad;\n                this.repeatVLMin = this.entity.dateEac3 ? this.entity.dateEac3.clone().add(1, 'day') :\n                    this.entity.dateLastViralLoad;\n            }),\n            catchError((err: any) => {\n                this.entity.dateLastViralLoad = null;\n                this.entity.lastViralLoad = null;\n                this.eac1Min = this.entity.patient.dateRegistration.clone().add(1, 'day');\n                this.eac2Min = this.entity.dateEac1 ? this.entity.dateEac1.clone().add(2, 'week') :\n                    this.entity.dateLastViralLoad;\n                this.eac3Min = this.entity.dateEac2 ? this.entity.dateEac2.clone().add(2, 'week') :\n                    this.entity.dateLastViralLoad;\n                this.repeatVLMin = this.entity.dateEac3 ? this.entity.dateEac3.clone().add(1, 'day') :\n                    this.entity.dateLastViralLoad;\n                return null;\n            }));\n    }\n\n    dateEac1Changed(date: Moment) {\n        this.eac2Min = date.clone().add(2, 'weeks');\n        this.updateMinDates(this.entity.patient.id, date);\n    }\n\n    dateEac2Changed(date: Moment) {\n        this.eac3Min = date.clone().add(2, 'weeks');\n    }\n\n    dateEac3Changed(date: Moment) {\n        this.repeatVLMin = date.clone().add(1, 'days');\n        this.repeatVLMax = date.clone().add(6, 'months');\n    }\n\n    save() {\n        //this.submitButton.disabled = true;\n        //this.progressBar.mode = 'indeterminate';\n        this.isSaving = true;\n        this.appLoaderService.open('Saving EAC session..');\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.eacService.update(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.eacService.create(this.entity));\n        }\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.onSaveError();\n                this.onError(res.message);\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.openSnackMessage('EAC session successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.appLoaderService.close();\n        //this.submitButton.disabled = true;\n        this.notification.showError('Error occurred saving EAC session; try again');\n        //this.progressBar.mode = 'determinate';\n    }\n\n    protected onError(errorMessage: string) {\n        this.appLoaderService.close();\n        this.notification.showError(errorMessage);\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes} from '@angular/router';\nimport {EAC} from '../model/clinic.model';\nimport {Observable, of} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport {HttpResponse} from '@angular/common/http';\nimport {EacService} from './eac.service';\nimport {EacEditComponent} from '../components/eac/eac.edit.component';\nimport {EacDetailsComponent} from '../components/eac/eac.details.component';\n\n@Injectable()\nexport class EacResolve implements Resolve<EAC> {\n    constructor(private service: EacService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<EAC> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<EAC>) => response.ok),\n                map((patient: HttpResponse<EAC>) => patient.body)\n            );\n        }\n        return of(<EAC>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'EAC Session',\n            breadcrumb: 'EAC SESSION'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: EacDetailsComponent,\n                resolve: {\n                    entity: EacResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'EAC Session',\n                    breadcrumb: 'EAC SESSION'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: EacEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'EAC Session',\n                    breadcrumb: 'ADD EAC SESSION',\n                    commence: true\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: EacEditComponent,\n                resolve: {\n                    entity: EacResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'EAC Session Edit',\n                    breadcrumb: 'EAC SESSION EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n","import {NgModule} from '@angular/core';\nimport {EacDetailsComponent} from './components/eac/eac.details.component';\nimport {EacEditComponent} from './components/eac/eac.edit.component';\nimport {EacResolve, ROUTES} from './services/eac.route';\nimport {CommonModule} from '@angular/common';\nimport {CovalentDialogsModule} from '@covalent/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {LamisSharedModule, MatDateFormatModule} from '@lamis/web-core';\nimport {MaterialModule} from './material.module';\nimport {CoreModule} from '@alfresco/adf-core';\nimport {CustomFormsModule} from 'ng2-validation';\nimport {RouterModule} from '@angular/router';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        CovalentDialogsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        LamisSharedModule,\n        MaterialModule,\n        CoreModule,\n        CustomFormsModule,\n        MatDateFormatModule,\n        RouterModule.forChild(ROUTES)\n    ],\n    declarations: [\n        EacDetailsComponent,\n        EacEditComponent\n    ],\n    providers: [\n        EacResolve\n    ]\n})\nexport class EacModule {\n\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {SERVER_API_URL_CONFIG, ServerApiUrlConfig} from '@lamis/web-core';\nimport {Facility} from '../model/facility.model';\nimport {CaseManager, CaseManagerStats, Patient} from '../model/case-management.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CaseManagementService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/case-management';\n    }\n\n    initClients(facilityId: number) {\n        return this.http.get(`${this.resourceUrl}/init-clients/${facilityId}`);\n    }\n\n    getClientList(req: any) {\n        return this.http.post<Patient[]>(`${this.resourceUrl}/client-list`, req, {observe: 'response'});\n    }\n\n    getCaseManagerStats(caseManagerId: number, facilityId: number) {\n        return this.http.get<CaseManagerStats>(`${this.resourceUrl}/facility/${facilityId}/case-manager/${caseManagerId}/stats`);\n    }\n\n    getActiveFacility() {\n        return this.http.get<Facility>('/api/facilities/active');\n    }\n\n    getCaseManagers(facilityId: number) {\n        return this.http.get<CaseManager[]>(`${this.resourceUrl}/facility/${facilityId}/case-managers`);\n    }\n\n    assignToCaseManager(caseManagerId: number, ids: number[]) {\n        let params = new HttpParams();\n        ids.forEach(id => params = params.append('ids', id.toString()));\n        return this.http.get(`${this.resourceUrl}/case-manager/${caseManagerId}/assign-clients`, {\n            params,\n            observe: 'response'\n        });\n    }\n\n    deAssignClients(ids: number[]) {\n        let params = new HttpParams();\n        ids.forEach(id => params = params.append('ids', id.toString()));\n        return this.http.get(`${this.resourceUrl}/de-assign-clients`, {\n            params,\n            observe: 'response'\n        });\n    }\n\n    getStates() {\n        return this.http.get<any[]>('/api/states');\n    }\n\n    getLgasByState(id) {\n        return this.http.get<any[]>(`/api/provinces/state/${id}`);\n    }\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {CaseManager, CaseManagerStats, Patient} from '../../model/case-management.model';\nimport {CaseManagementService} from '../../services/case-management.service';\nimport {CardViewIntItemModel, CardViewItem, NotificationService} from '@alfresco/adf-core';\nimport {TdDialogService} from '@covalent/core';\nimport {Subscription} from 'rxjs';\nimport {RxStompService} from '@stomp/ng2-stompjs';\n\nexport interface Filter {\n    upperAgeLimit?: number;\n    lowerAgeLimit?: number;\n    pregnant?: boolean;\n    breastfeeding?: boolean;\n    lgaId?: number;\n    facilityId?: number;\n    status?: string;\n    gender?: string;\n    hospitalNum?: string;\n    page?: number;\n    size?: number;\n    assigned?: boolean;\n    caseManagerId?: number;\n}\n\n@Component({\n    selector: 'case-management-patient-list',\n    templateUrl: './patient.list.component.html'\n})\nexport class PatientListComponent implements OnInit, OnDestroy {\n    caseManagers: CaseManager[] = [];\n    caseManager: CaseManager;\n    assignCaseManager: CaseManager;\n    patients: Patient[] = [];\n    properties: Array<CardViewItem> = [];\n    globalProperties: Array<CardViewItem> = [];\n    stats: CaseManagerStats = {};\n    globalStats: CaseManagerStats = {};\n    facilityId: number;\n    filter: Filter = {};\n    ageLimit: number;\n    pregnancyStatus: number;\n    states: any[];\n    lgas: any[];\n    hospitalNum = '';\n    totalItems = 0;\n    page = 0;\n    itemsPerPage = 20;\n    loading = true;\n    initializing = true;\n    filterByCaseManager = false;\n    private topicSubscription: Subscription;\n\n    constructor(private service: CaseManagementService, private _dialogService: TdDialogService,\n                private notificationService: NotificationService, private stompService: RxStompService) {\n    }\n\n    ngOnInit(): void {\n        /*this.topicSubscription = this.stompService.watch('/topic/case-management').subscribe((msg: Message) => {\n            console.log('Simp Message', msg);\n            if(msg.body === 'finished'){\n                this.initializing = false;\n            }\n        });*/\n\n        this.service.getActiveFacility().subscribe((f) => {\n            if (f) {\n                this.facilityId = f.id;\n                this.service.initClients(f.id).subscribe((r) => {\n                    this.initializing = false;\n                    this.service.getCaseManagers(f.id).subscribe(res => {\n                        this.caseManagers = res.filter(c => c.active);\n                        this.updateList();\n                    });\n                });\n\n                this.service.getCaseManagerStats(0, f.id).subscribe(res => {\n                    this.stats = res;\n                    this.buildStats();\n                });\n            }\n        });\n        this.service.getStates().subscribe(res => this.states = res);\n    }\n\n    ngOnDestroy(): void {\n        // this.topicSubscription.unsubscribe();\n    }\n\n    clearHospitalNum() {\n        this.hospitalNum = null;\n        this.filter['hospitalNum'] = null;\n        this.page = 0;\n    }\n\n    search() {\n        this.page = 0;\n        this.updateList();\n    }\n\n    assignClients() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to assign selected clients to the selected Case Manager?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                const patientIds = this.patients.filter(p => p.selected)\n                    .map(p => p.id);\n                this.service.assignToCaseManager(this.assignCaseManager.id, patientIds).subscribe((res) => {\n                    if (res.ok) {\n                        this.updateList();\n                        this.service.getCaseManagerStats(this.caseManager.id, this.facilityId).subscribe(res1 => {\n                            this.stats = res1;\n                            this.buildStats();\n                        });\n                    } else {\n                        this.notificationService.showError('Error assigning clients, please try again');\n                    }\n                });\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    deAssignClients() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to de-assign selected clients?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                const patientIds = this.patients.filter(p => p.selected)\n                    .map(p => p.id);\n                this.service.deAssignClients(patientIds).subscribe((res) => {\n                    if (res.ok) {\n                        this.updateList();\n                        this.service.getCaseManagerStats(this.caseManager.id, this.facilityId).subscribe(res1 => {\n                            this.stats = res1;\n                            this.buildStats();\n                        });\n                    } else {\n                        this.notificationService.showError('Error de-assigning clients, please try again');\n                    }\n                });\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    selections(): boolean {\n        return this.patients && !!this.patients.find(p => p.selected);\n    }\n\n    loadPage(page) {\n        this.page = page;\n        this.updateList();\n    }\n\n    select(event) {\n        this.patients = this.patients.map(p => {\n            if (p.id === event.obj.id) {\n                p.selected = !p.selected;\n            }\n            return p;\n        });\n    }\n\n    caseManagerChanged() {\n        if (!this.caseManager) {\n            this.stats = null;\n        }\n        this.service.getCaseManagerStats(this.caseManager.id, this.facilityId).subscribe(res => {\n            this.stats = res;\n            this.buildStats();\n        });\n        if (this.filterByCaseManager) {\n            this.filter['caseManagerId'] = this.caseManager.id;\n        } else {\n            this.filter['caseManagerId'] = null;\n        }\n        this.updateList();\n    }\n\n    updateList() {\n        if (this.hospitalNum) {\n            this.filter.hospitalNum = this.hospitalNum;\n        }\n        this.filter['facilityId'] = this.facilityId;\n        this.filter['size'] = this.itemsPerPage;\n        this.filter['page'] = this.page > 0 ? this.page - 1 : 0;\n        if (this.filterByCaseManager) {\n            this.filter['caseManagerId'] = this.caseManager.id;\n        } else {\n            this.filter['caseManagerId'] = null;\n        }\n        this.loading = true;\n        this.service.getClientList(this.filter).subscribe(res => {\n            if (res.body) {\n                this.patients = res.body.map(p => {\n                    const caseManager = this.caseManagers.find(c => c.id === p.caseManagerId);\n                    if (caseManager) {\n                        p.caseManager = caseManager;\n                    }\n                    return p;\n                });\n                this.totalItems = (<any>res.headers).get('X-Total-Count');\n                this.service.getCaseManagerStats(0, this.facilityId).subscribe(res1 => {\n                    this.globalStats = res1;\n                    this.buildGlobalStats();\n                });\n            }\n            this.loading = false;\n        });\n    }\n\n    ageGroupChanged() {\n        if (this.ageLimit === 9) {\n            this.filter['lowerAgeLimit'] = 0;\n            this.filter['upperAgeLimit'] = 9;\n        } else if (this.ageLimit === 14) {\n            this.filter['lowerAgeLimit'] = 10;\n            this.filter['upperAgeLimit'] = 14;\n        } else if (this.ageLimit === 19) {\n            this.filter['lowerAgeLimit'] = 15;\n            this.filter['upperAgeLimit'] = 19;\n        } else if (this.ageLimit === 24) {\n            this.filter['lowerAgeLimit'] = 20;\n            this.filter['upperAgeLimit'] = 24;\n        } else if (this.ageLimit === 100) {\n            this.filter['lowerAgeLimit'] = 25;\n            this.filter['upperAgeLimit'] = 100;\n        }\n        if (!this.ageLimit) {\n            this.filter['lowerAgeLimit'] = null;\n            this.filter['upperAgeLimit'] = null;\n        }\n        this.updateList();\n    }\n\n    pregnancyStatusChanged() {\n        if (this.pregnancyStatus === 1) {\n            this.filter['pregnant'] = true;\n        } else if (this.pregnancyStatus === 2) {\n            this.filter['breastfeeding'] = true;\n        }\n        if (!this.pregnancyStatus) {\n            this.filter['pregnant'] = null;\n            this.filter['breastfeeding'] = null;\n        }\n        this.updateList();\n    }\n\n    stateChanged(id) {\n        if (id) {\n            this.service.getLgasByState(id).subscribe(res => this.lgas = res);\n        }\n    }\n\n    assigned(val) {\n        if (val === 1) {\n            this.filter.assigned = true;\n        } else if (val === 2) {\n            this.filter.assigned = false;\n        } else {\n            this.filter.assigned = null;\n        }\n        this.updateList();\n    }\n\n    lgaChanged(id) {\n        if (id) {\n            this.filter.lgaId = id;\n        } else {\n            this.filter.lgaId = null;\n        }\n        this.updateList();\n    }\n\n    buildStats() {\n        this.properties = [];\n        this.properties.push(new CardViewIntItemModel({\n            label: 'Clients(s) Assigned',\n            key: 'as',\n            value: this.stats.assigned\n        }));\n        this.properties.push(new CardViewIntItemModel({\n            label: 'Stable 1 Year',\n            key: 'as',\n            value: this.stats.stable\n        }));\n        this.properties.push(new CardViewIntItemModel({\n            label: 'Unstable less than 1 Year',\n            key: 'as',\n            value: this.stats.unstableLessThan1year\n        }));\n        this.properties.push(new CardViewIntItemModel({\n            label: 'Unstable more than 1 Year',\n            key: 'as',\n            value: this.stats.unstableMoreThan1Year\n        }));\n        this.properties.push(new CardViewIntItemModel({\n            label: 'Awaiting ART',\n            key: 'as',\n            value: this.stats.preArt\n        }));\n    }\n\n    buildGlobalStats() {\n        this.globalProperties = [];\n        if (this.globalStats) {\n            this.globalProperties.push(new CardViewIntItemModel({\n                label: 'Clients(s) Assigned',\n                key: 'as',\n                value: this.globalStats.assigned\n            }));\n            this.globalProperties.push(new CardViewIntItemModel({\n                label: 'Stable 1 Year',\n                key: 'as',\n                value: this.globalStats.stable\n            }));\n            this.globalProperties.push(new CardViewIntItemModel({\n                label: 'Unstable less than 1 Year',\n                key: 'as',\n                value: this.globalStats.unstableLessThan1year\n            }));\n            this.globalProperties.push(new CardViewIntItemModel({\n                label: 'Unstable more than 1 Year',\n                key: 'as',\n                value: this.globalStats.unstableMoreThan1Year\n            }));\n            this.globalProperties.push(new CardViewIntItemModel({\n                label: 'Awaiting ART',\n                key: 'as',\n                value: this.globalStats.preArt\n            }));\n        }\n    }\n}\n","import {Routes} from '@angular/router';\nimport {PatientListComponent} from '../components/case-management/patient.list.component';\n\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Case Management',\n            breadcrumb: 'CASE MANAGEMENT'\n        },\n        children: [\n            {\n                path: '',\n                children: [\n                    {\n                        path: '',\n                        component: PatientListComponent,\n                        data: {\n                            authorities: ['ROLE_USER'],\n                            title: 'Case Management',\n                            breadcrumb: 'CASE MANAGEMENT'\n                        }\n                    }\n                ],\n                data: {\n                    title: 'Case Management',\n                    breadcrumb: 'CASE MANAGEMENT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import {NgModule} from '@angular/core';\nimport {PatientListComponent} from './components/case-management/patient.list.component';\nimport {MaterialModule} from './material.module';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {CoreModule} from '@alfresco/adf-core';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport {CovalentDialogsModule, CovalentSearchModule} from '@covalent/core';\nimport {ROUTES} from './services/case-management.route';\nimport {RouterModule} from '@angular/router';\nimport {LamisSharedModule} from '@lamis/web-core';\n\n@NgModule({\n    imports: [\n        MaterialModule,\n        FormsModule,\n        CommonModule,\n        RouterModule.forChild(ROUTES),\n        CoreModule,\n        NgbModule,\n        CovalentSearchModule,\n        CovalentDialogsModule,\n        LamisSharedModule,\n    ],\n    declarations: [\n        PatientListComponent\n    ],\n    providers: []\n})\nexport class CaseManagementModule {\n\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {createRequestOption, SERVER_API_URL_CONFIG, ServerApiUrlConfig} from '@lamis/web-core';\nimport {Observable} from 'rxjs';\nimport {CaseManager} from '../model/case-management.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CaseManagerService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/case-managers';\n    }\n\n    create(caseManager: CaseManager): Observable<HttpResponse<CaseManager>> {\n        return this.http\n            .post<CaseManager>(this.resourceUrl, caseManager, {observe: 'response'});\n    }\n\n    update(caseManager: CaseManager): Observable<HttpResponse<CaseManager>> {\n        return this.http\n            .put<CaseManager>(this.resourceUrl, caseManager, {observe: 'response'});\n    }\n\n    find(id: number): Observable<HttpResponse<CaseManager>> {\n        return this.http\n            .get<CaseManager>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    findByUuid(id: string): Observable<HttpResponse<CaseManager>> {\n        return this.http\n            .get<CaseManager>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'});\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    query(req?: any): Observable<HttpResponse<CaseManager[]>> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<CaseManager[]>(this.resourceUrl, {params: options, observe: 'response'});\n    }\n}\n","import {Component} from '@angular/core';\nimport {CardViewBoolItemModel, CardViewItem, CardViewTextItemModel, NotificationService} from '@alfresco/adf-core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {TdDialogService} from '@covalent/core';\nimport {CaseManager} from '../../model/case-management.model';\nimport {CaseManagerService} from '../../services/case-manager.service';\n\n@Component({\n    selector: 'case-manager-details',\n    templateUrl: './case-manager.details.component.html'\n})\nexport class CaseManagerDetailsComponent {\n    properties: CardViewItem[] = [];\n    entity: CaseManager;\n\n    constructor(private router: Router, private route: ActivatedRoute, private service: CaseManagerService,\n                private _dialogService: TdDialogService,\n                private notificationService: NotificationService) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            this.buildProperties();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['/', 'admin', 'case-managers', this.entity.uuid, 'edit']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this Case Manager, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.service.delete(this.entity.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['admin', 'case-managers']);\n                    } else {\n                        this.notificationService.showError('Error deleting Case Manager, please try again');\n                    }\n                });\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Name',\n            key: 'cs',\n            value: this.entity.name\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Address',\n            key: 'fs',\n            value: this.entity.address\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Gender',\n            key: 'ts',\n            value: this.entity.gender === 'FEMALE' ? 'Female' : 'Male'\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Telephone',\n            key: 'cd4p',\n            value: this.entity.phoneNumber\n        }));\n        this.properties.push(new CardViewBoolItemModel({\n            label: 'Active',\n            key: 'cd4p',\n            value: this.entity.active\n        }));\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n}\n","import {Component, OnInit} from '@angular/core';\nimport {CaseManager} from '../../model/case-management.model';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {ActivatedRoute} from '@angular/router';\nimport {AppLoaderService} from '@lamis/web-core';\nimport {CaseManagementService} from '../../services/case-management.service';\nimport {CaseManagerService} from '../../services/case-manager.service';\nimport {Observable} from 'rxjs';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\n\n@Component({\n    selector: 'case-manager-edit',\n    templateUrl: './case-manager.edit.component.html'\n})\nexport class CaseManagerEditComponent implements OnInit {\n    entity: CaseManager;\n    isSaving: boolean;\n\n    constructor(private caseManagementService: CaseManagementService,\n                private caseManagerService: CaseManagerService,\n                protected notification: NotificationService,\n                protected activatedRoute: ActivatedRoute,\n                private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): CaseManager {\n        return <CaseManager>{};\n    }\n\n    ngOnInit(): void {\n        this.isSaving = false;\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n\n            this.caseManagementService.getActiveFacility().subscribe((res: any) => {\n                this.entity.facility = res;\n            });\n        });\n    }\n\n    save() {\n        this.isSaving = true;\n        this.appLoaderService.open('Saving Case Manager..');\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.caseManagerService.update(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.caseManagerService.create(this.entity));\n        }\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.onSaveError();\n                this.onError(res.message);\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.openSnackMessage('Case Manager successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.appLoaderService.close();\n        //this.submitButton.disabled = true;\n        this.notification.showError('Error occurred saving Case Manager; try again');\n        //this.progressBar.mode = 'determinate';\n    }\n\n    protected onError(errorMessage: string) {\n        this.appLoaderService.close();\n        this.notification.showError(errorMessage);\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {CaseManager} from '../../model/case-management.model';\nimport {CaseManagerService} from '../../services/case-manager.service';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {CaseManagementService} from '../../services/case-management.service';\nimport {Facility} from '../../model/facility.model';\n\n@Component({\n    selector: 'case-managers',\n    templateUrl: './case-manager.list.component.html'\n})\nexport class CaseManagerListComponent implements OnInit {\n    page = 0;\n    caseManagers: CaseManager[];\n    loading = false;\n    public itemsPerPage: number = 200;\n    public currentSearch: string = '';\n    totalItems = 0;\n    display = 'list';\n    facility: Facility;\n\n    constructor(private caseManagerService: CaseManagerService,\n                private caseManagementService: CaseManagementService,\n                protected notification: NotificationService,\n                protected router: Router,\n                protected activatedRoute: ActivatedRoute) {\n    }\n\n    ngOnInit(): void {\n        this.caseManagementService.getActiveFacility().subscribe(res => {\n            this.facility = res;\n            this.onPageChange(0);\n        });\n    }\n\n    public select(data: any): any {\n        this.router.navigate(['..', 'case-managers', data.obj.uuid, 'view'], {relativeTo: this.activatedRoute});\n    }\n\n    onPageChange(pageInfo) {\n        this.page = pageInfo;\n        this.loadAll();\n    }\n\n    loadPage(page: number) {\n        this.page = page;\n        this.loadAll();\n    }\n\n    loadAll() {\n        this.loading = true;\n        this.caseManagerService.query({\n            keyword: this.currentSearch,\n            page: 0,\n            id: this.facility && this.facility.id || 0,\n            size: this.itemsPerPage,\n            sort: ['id', 'asc']\n        }).subscribe(\n            (res: any) => {\n                this.onSuccess(res.body, res.headers);\n            },\n            (res: any) => this.onError(res)\n        );\n    }\n\n    protected onSuccess(data: any, headers: any) {\n        this.caseManagers = data;\n        this.totalItems = headers.get('X-Total-Count');\n        this.loading = false;\n    }\n\n    private onError(error: any) {\n        this.notification.openSnackMessage(error.message);\n        this.loading = false;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes} from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport {HttpResponse} from '@angular/common/http';\nimport {CaseManagerDetailsComponent} from '../components/case-management/case-manager.details.component';\nimport {CaseManager} from '../model/case-management.model';\nimport {CaseManagerService} from './case-manager.service';\nimport {CaseManagerEditComponent} from '../components/case-management/case-manager.edit.component';\nimport {CaseManagerListComponent} from '../components/case-management/case-manager.list.component';\n\n@Injectable()\nexport class CaseManagerResolve implements Resolve<CaseManager> {\n    constructor(private service: CaseManagerService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<CaseManager> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<CaseManager>) => response.ok),\n                map((patient: HttpResponse<CaseManager>) => patient.body)\n            );\n        }\n        return of(<CaseManager>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Case Manager',\n            breadcrumb: 'CASE MANAGERS'\n        },\n        children: [\n            {\n                path: '',\n                component: CaseManagerListComponent,\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Case Managers',\n                    breadcrumb: 'CASE MANAGERS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/view',\n                component: CaseManagerDetailsComponent,\n                resolve: {\n                    entity: CaseManagerResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Case Manager',\n                    breadcrumb: 'CASE MANAGER'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'new',\n                component: CaseManagerEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Add Case Manager',\n                    breadcrumb: 'ADD CASE MANAGER'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/edit',\n                component: CaseManagerEditComponent,\n                resolve: {\n                    entity: CaseManagerResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Case Manager Edit',\n                    breadcrumb: 'CASE MANAGER EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import {NgModule} from '@angular/core';\nimport {CaseManagerDetailsComponent} from './components/case-management/case-manager.details.component';\nimport {CaseManagerEditComponent} from './components/case-management/case-manager.edit.component';\nimport {CaseManagerListComponent} from './components/case-management/case-manager.list.component';\nimport {MaterialModule} from './material.module';\nimport {CoreModule} from '@alfresco/adf-core';\nimport {CaseManagerResolve, ROUTES} from './services/case-manager.route';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport {CovalentDialogsModule, CovalentSearchModule} from '@covalent/core';\nimport {LamisSharedModule} from '@lamis/web-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        CoreModule,\n        NgbModule,\n        CovalentSearchModule,\n        CovalentDialogsModule,\n        LamisSharedModule,\n    ],\n    declarations: [\n        CaseManagerDetailsComponent,\n        CaseManagerEditComponent,\n        CaseManagerListComponent\n    ],\n    providers: [\n        CaseManagerResolve\n    ]\n})\nexport class CaseManagerModule {\n}\n","import {Inject, Injectable} from '@angular/core';\n\nimport * as moment_ from 'moment';\nimport {SERVER_API_URL_CONFIG, ServerApiUrlConfig} from '@lamis/web-core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Observation} from '../model/clinic.model';\n\nconst moment = moment_;\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CervicalCancerScreeningService {\n    public resourceUrl = '';\n    public observationResourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/cervical-cancer-screenings';\n        this.observationResourceUrl = serverUrl.SERVER_API_URL + '/api/observations';\n    }\n\n    find(id: string) {\n        return this.http.get<Observation>(`${this.observationResourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map(res => {\n                console.log('Response1', res);\n                res.body.date = res.body.date != null ? moment(res.body.date) : null;\n                res.body.data.dateTreated = res.body.data.dateTreated != null ? moment(res.body.data.dateTreated) : null;\n                res.body.data.dateScreened = res.body.data.dateScreened != null ? moment(res.body.data.dateScreened) : null;\n                return res;\n            }));\n    }\n\n    findByUuid(id: string) {\n        return this.find(id);\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${this.observationResourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    save(data: any): Observable<HttpResponse<Observation>> {\n        return this.http.post<Observation>(`${this.observationResourceUrl}`, data, {observe: 'response'})\n            .pipe(map(res => {\n                res.body.data.dateTreated = res.body.data.dateTreated != null ? moment(res.body.data.dateTreated) : null;\n                res.body.data.dateScreened = res.body.data.dateScreened != null ? moment(res.body.data.dateScreened) : null;\n                return res;\n            }));\n    }\n\n    update(data: any): Observable<HttpResponse<Observation>> {\n        return this.http.put<Observation>(`${this.observationResourceUrl}`, data, {observe: 'response'})\n            .pipe(map(res => {\n                res.body.data.dateTreated = res.body.data.dateTreated != null ? moment(res.body.data.dateTreated) : null;\n                res.body.data.dateScreened = res.body.data.dateScreened != null ? moment(res.body.data.dateScreened) : null;\n                return res;\n            }));\n    }\n\n    getScreeningByPatient(id: number) {\n        return this.http.get<any>(`${this.resourceUrl}/patient/${id}`, {observe: 'response'})\n            .pipe(map(res => {\n                res.body.data = res.body.data.cervicalCancerScreening;\n                res.body.date = res.body.date != null ? moment(res.body.date) : null;\n                res.body.data.dateTreated = res.body.data.dateTreated != null ? moment(res.body.data.dateTreated) : null;\n                res.body.data.dateScreened = res.body.data.dateScreened != null ? moment(res.body.data.dateScreened) : null;\n                return res;\n            }));\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {CervicalCancerScreening, Observation, Patient} from '../../model/clinic.model';\nimport * as moment_ from 'moment';\nimport {Observable} from 'rxjs';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {ClinicService} from '../../services/clinic.service';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {ActivatedRoute} from '@angular/router';\nimport {AppLoaderService, DATE_FORMAT} from '@lamis/web-core';\nimport {CervicalCancerScreeningService} from '../../services/cervical-cancer-screening.service';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'cancer-screening',\n    templateUrl: './cervical-cancer-screening.component.html'\n})\nexport class CervicalCancerScreeningComponent implements OnInit {\n    entity: CervicalCancerScreening = {};\n    patient: Patient;\n    observation: Observation = {};\n    today = moment();\n    isSaving: boolean = false;\n\n    constructor(private clinicService: ClinicService,\n                private screeningService: CervicalCancerScreeningService,\n                protected notification: NotificationService,\n                protected activatedRoute: ActivatedRoute,\n                private appLoaderService: AppLoaderService) {\n    }\n\n    ngOnInit(): void {\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.observation = !!entity && entity.body ? entity.body : entity;\n            if (!!this.observation) {\n                this.entity = this.observation.data;\n            } else {\n                this.observation = {};\n            }\n\n            if (this.entity === undefined) {\n                this.entity = {};\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.clinicService.getPatient(patientId).subscribe((res) => {\n                this.patient = res;\n                if (!!this.entity) {\n                    this.screeningService.getScreeningByPatient(res.id).subscribe(r => {\n                        this.entity = r.body && r.body.data;\n                        this.observation = r.body;\n                    });\n                }\n            });\n        });\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n\n    save() {\n        //this.submitButton.disabled = true;\n        //this.progressBar.mode = 'indeterminate';\n        this.isSaving = true;\n        this.appLoaderService.open('Saving cancer screening..');\n\n        const data = {\n            id: this.observation && this.observation.id || null,\n            patient: this.patient,\n            date: this.entity.dateScreened.format(DATE_FORMAT),\n            facility: this.patient.facility,\n            type: 'CERVICAL_CANCER_SCREENING',\n            data: {\n                cervicalCancerScreening: Object.assign({}, this.entity, {\n                    dateScreened: this.entity.dateScreened != null && this.entity.dateScreened.isValid() ?\n                        this.entity.dateScreened.format(DATE_FORMAT) : null,\n                    dateTreated: this.entity.dateTreated != null && this.entity.dateTreated.isValid() ?\n                        this.entity.dateTreated.format(DATE_FORMAT) : null,\n                })\n            }\n        };\n        if (!!this.observation.id) {\n            this.subscribeToSaveResponse(this.screeningService.update(data));\n        } else {\n            this.subscribeToSaveResponse(this.screeningService.save(data));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.onSaveError();\n                this.onError(res.message);\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Cancer screening successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.appLoaderService.close();\n        //this.submitButton.disabled = true;\n        this.notification.showError('Error occurred saving cancer screening; try again');\n        //this.progressBar.mode = 'determinate';\n    }\n\n    protected onError(errorMessage: string) {\n        this.appLoaderService.close();\n        this.notification.showError(errorMessage);\n    }\n\n}\n","import {Component, OnInit} from '@angular/core';\nimport {\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewItem,\n    CardViewTextItemModel,\n    NotificationService\n} from '@alfresco/adf-core';\nimport {CervicalCancerScreening, Observation, Patient} from '../../model/clinic.model';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {TdDialogService} from '@covalent/core';\nimport {CervicalCancerScreeningService} from '../../services/cervical-cancer-screening.service';\nimport {ClinicService} from '../../services/clinic.service';\n\nconst RESULT = {\n    NEGATIVE: 'Negative',\n    POSITIVE: 'Positive',\n    SUSPICIOUS: 'Suspicious Cancerous Lesions'\n};\n\nconst METHOD = {\n    VIA: 'Visual Inspection with Acetric Acid (VIA)',\n    VILI: 'Visual Inspection with Lugos Iodine (VILI)',\n    PAP_SMEAR: 'PAP Smear'\n};\nconst LESION_METHOD = {\n    CRYOTHERAPY: 'Cryotherapy',\n    THERMAL_ABLATION: 'Thermal Ablation/ Thermocoagulation',\n    LEETZ_LEEP: 'LEETZ/ LEEP',\n    CONIZATION: 'Conization Knifer/ Lagor'\n};\n\nconst TYPE = {\n    FIRST_TIME: 'First Time',\n    FOLLOWUP: 'Followup after previous negative result or suspected cancer',\n    POST_TREATMENT_FOLLOWUP: 'Post-treatment Followup'\n};\n\n@Component({\n    selector: 'cervical-screening-detail',\n    templateUrl: './cervical-cancer-screening-detail.component.html'\n})\nexport class CervicalCancerScreeningDetailComponent implements OnInit {\n\n    properties: CardViewItem[] = [];\n    entity: CervicalCancerScreening;\n    observation: Observation;\n    patient: Patient;\n\n    constructor(private router: Router, private route: ActivatedRoute, private screeningService: CervicalCancerScreeningService,\n                private _dialogService: TdDialogService, private clinicService: ClinicService,\n                private notificationService: NotificationService) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body.data.cervicalCancerScreening : entity.data.cervicalCancerScreening;\n            this.observation = !!entity && entity.body ? entity.body : entity;\n\n            const patientId = this.route.snapshot.paramMap.get('patientId');\n            this.clinicService.getPatient(patientId).subscribe((res) => this.patient = res);\n            this.buildProperties();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['/', 'cervical-cancer-screening', this.observation.id, 'patient', this.patient.uuid, 'edit']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this Cervical cancer screening, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.screeningService.delete(this.observation.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['patients']);\n                    } else {\n                        this.notificationService.showError('Error deleting screening, please try again');\n                    }\n                });\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.observation.date,\n            label: 'Date of Screening',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            key: 'na',\n            value: TYPE[this.entity.screeningType],\n            label: 'Screening Type',\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Screening Method',\n            key: 'fs',\n            value: METHOD[this.entity.screeningMethod]\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Result',\n            key: 'adr',\n            value: RESULT[this.entity.screeningResult]\n        }));\n        this.properties.push(new CardViewBoolItemModel({\n            label: 'Referred for Treatment',\n            key: 'bw',\n            value: this.entity.referredForTreatment\n        }));\n\n        if (!!this.entity.referredForTreatment) {\n            this.properties.push(new CardViewTextItemModel({\n                label: 'Precancerous Lesions Treatment method',\n                key: 'adr',\n                value: LESION_METHOD[this.entity.precancerousLesionsTreatmentMethod]\n            }));\n\n            this.properties.push(new CardViewDateItemModel({\n                key: 'ds',\n                value: this.entity.dateTreated,\n                label: 'Date of Treated',\n                format: 'dd MMM, yyyy'\n            }));\n        }\n\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n}\n","import {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes} from '@angular/router';\nimport {Injectable} from '@angular/core';\nimport {Observation} from '../model/clinic.model';\nimport {Observable, of} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport {HttpResponse} from '@angular/common/http';\nimport {CervicalCancerScreeningService} from './cervical-cancer-screening.service';\nimport {CervicalCancerScreeningDetailComponent} from '../components/cervical-cancer-screening/cervical-cancer-screening-detail.component';\nimport {CervicalCancerScreeningComponent} from '../components/cervical-cancer-screening/cervical-cancer-screening.component';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ObservationResolve implements Resolve<Observation> {\n    constructor(private service: CervicalCancerScreeningService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Observation> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.find(id).pipe(\n                filter((response: HttpResponse<Observation>) => response.ok),\n                map((patient: HttpResponse<Observation>) => patient.body)\n            );\n        }\n        return of(<Observation>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Cervical Cancer Screening',\n            breadcrumb: 'CERVICAL CANCER SCREENING'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: CervicalCancerScreeningDetailComponent,\n                resolve: {\n                    entity: ObservationResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Cervical Cancer Screening',\n                    breadcrumb: 'CERVICAL CANCER SCREENING'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: CervicalCancerScreeningComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Cervical Cancer Screening',\n                    breadcrumb: 'ADD CERVICAL CANCER SCREENING'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: CervicalCancerScreeningComponent,\n                resolve: {\n                    entity: ObservationResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Cervical Cancer Screening',\n                    breadcrumb: 'CERVICAL CANCER SCREENING EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n","import {NgModule} from '@angular/core';\nimport {CervicalCancerScreeningComponent} from './components/cervical-cancer-screening/cervical-cancer-screening.component';\nimport {MaterialModule} from './material.module';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {CervicalCancerScreeningDetailComponent} from './components/cervical-cancer-screening/cervical-cancer-screening-detail.component';\nimport {LamisSharedModule, MatDateFormatModule} from '@lamis/web-core';\nimport {CoreModule} from '@alfresco/adf-core';\nimport {RouterModule} from '@angular/router';\nimport {ObservationResolve, ROUTES} from './services/cervical-cancer-screening.route';\nimport {CovalentDialogsModule, CovalentMessageModule} from '@covalent/core';\nimport {CustomFormsModule} from 'ng2-validation';\n\n@NgModule({\n    imports: [\n        MaterialModule,\n        FormsModule,\n        CommonModule,\n        MatDateFormatModule,\n        CoreModule,\n        RouterModule.forChild(ROUTES),\n        CovalentMessageModule,\n        CovalentDialogsModule,\n        CustomFormsModule,\n        LamisSharedModule,\n    ],\n    declarations: [\n        CervicalCancerScreeningComponent,\n        CervicalCancerScreeningDetailComponent\n    ],\n    providers: [\n        //ObservationResolve\n    ]\n})\nexport class CervicalCancerModule {\n\n}\n"]}