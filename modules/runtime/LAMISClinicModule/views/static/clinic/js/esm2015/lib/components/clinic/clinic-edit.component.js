import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ClinicService } from '../../services/clinic.service';
import { NotificationService } from '@alfresco/adf-core';
import { ActivatedRoute } from '@angular/router';
import * as moment_ from 'moment';
import { AppLoaderService, DATE_FORMAT, entityCompare } from '@lamis/web-core';
import { ColumnMode } from '@swimlane/ngx-datatable';
const moment = moment_;
let ClinicEditComponent = class ClinicEditComponent {
    constructor(clinicService, notification, activatedRoute, appLoaderService) {
        this.clinicService = clinicService;
        this.notification = notification;
        this.activatedRoute = activatedRoute;
        this.appLoaderService = appLoaderService;
        this.error = false;
        this.today = moment();
        this.visitDates = [];
        this.selectedClinicAdr = [];
        this.oiList = [];
        this.adhereList = [];
        this.ColumnMode = ColumnMode;
        this.adr = false;
        this.otzApplicable = false;
        this.hasOtz = false;
    }
    createEntity() {
        return {};
    }
    ngOnInit() {
        this.clinicService.opportunisticInfections().subscribe(res => this.opportunisticInfections = res);
        this.clinicService.adheres().subscribe(res => this.adheres = res);
        this.isSaving = false;
        this.clinicService.getRegimenLines().subscribe(res => {
            this.regimenLines = res;
        });
        this.activatedRoute.data.subscribe(({ entity }) => {
            this.commence = !!this.activatedRoute.snapshot.data['commence'];
            this.entity = !!entity && entity.body ? entity.body : entity;
            if (this.entity === undefined) {
                this.entity = this.createEntity();
            }
            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');
            this.clinicService.getPatient(patientId).subscribe((res) => {
                this.entity.patient = res;
                this.entity.facility = res.facility;
                this.dateBirth = res.dateBirth;
                this.dateRegistration = res.dateRegistration;
                if (res.statusAtRegistration === 'ART_TRANSFER_IN') {
                    this.dateRegistration = moment('1999-01-01', 'YYYY-MM-DD');
                    if (this.dateRegistration.isBefore(this.entity.patient.dateBirth)) {
                        this.dateRegistration = this.entity.patient.dateBirth.clone().add(3, 'months');
                    }
                }
                if (res.extra && res.extra.prep && res.extra.prep.registered) {
                    this.prep = true;
                    this.clinicService.getRegimenLines().subscribe(res1 => {
                        this.regimenLines = res1.filter(t => {
                            return t.id === 30;
                        });
                    });
                }
                this.clinicService.enrolledOnOTZ(res.id).subscribe(r => {
                    this.enrolledOnOTZ = r;
                    this.hasOtz = r;
                });
                this.otzApplicable = !moment().subtract(24, 'years').isAfter(this.entity.patient.dateBirth)
                    && !moment().subtract(10, 'years').isBefore(this.entity.patient.dateBirth);
                this.clinicService.getVisitDatesByPatient(this.entity.patient.id).subscribe((res1) => {
                    this.visitDates = res1;
                });
            });
            if (this.entity.commence && this.entity.regimenType) {
                this.regimenLineChange(this.entity.regimenType);
            }
            this.commence = this.commence || this.entity.commence;
            if (this.commence) {
                this.entity.commence = true;
                if (this.entity.regimenType) {
                    this.regimenLineChange(this.entity.regimenType);
                }
            }
            if (this.entity.id) {
                this.appointmentMin = this.entity.dateVisit.clone().add(14, 'days');
                this.appointmentMax = this.entity.dateVisit.clone().add(8, 'months');
                this.clinicService.adverseDrugReactions().subscribe(res1 => {
                    this.adverseDrugReactions = res1;
                    this.adr = !!this.entity.adverseDrugReactions;
                    this.adverseDrugReactions.forEach(adr => {
                        let found = false;
                        (this.entity.adverseDrugReactions || []).forEach(cadr => {
                            if (cadr.adverseDrugReaction.id === adr.id) {
                                found = true;
                                this.selectedClinicAdr.push(cadr);
                            }
                        });
                        if (!found) {
                            this.selectedClinicAdr.push({
                                adverseDrugReaction: adr
                            });
                        }
                    });
                    this.selectedClinicAdr = [...this.selectedClinicAdr];
                    if (this.entity.extra) {
                        if (this.entity.extra.prep) {
                            this.hivTestResult = this.entity.extra.prep.hivTestResult;
                            this.creatinineClearance = this.entity.extra.prep.creatinineClearance;
                            this.hepatitisB = this.entity.extra.prep.hepatitisB;
                            this.hepatitisC = this.entity.extra.prep.hepatitisC;
                            this.urinalysis = this.entity.extra.prep.urinalysis;
                        }
                        if (this.entity.extra.otz) {
                            if (!!this.entity.extra.otz.dateOfFullDisclosure) {
                                this.dateOfFullDisclosure = moment(this.entity.extra.otz.dateOfFullDisclosure);
                            }
                            this.attendedLastOTZMeeting = !!this.entity.extra.otz.attendedLastOTZMeeting;
                            this.enrolledOnOTZ = !!this.entity.extra.otz.enrolledOnOTZ;
                            if (!!this.entity.extra.otz.dateEnrolledOnOTZ) {
                                this.dateEnrolledOnOTZ = moment(this.entity.extra.otz.dateEnrolledOnOTZ);
                            }
                            if (!!this.entity.extra.otz.dateLastOTZMeeting) {
                                this.dateLastOTZMeeting = moment(this.entity.extra.otz.dateLastOTZMeeting);
                            }
                            this.caregiverPhone = this.entity.extra.otz.caregiverPhone;
                            this.caregiverAddress = this.entity.extra.otz.caregiverAddress;
                            this.modulesCompleted = this.entity.extra.otz.modulesCompleted;
                            this.fullDisclosure = this.entity.extra.otz.fullDisclosure;
                        }
                    }
                });
            }
            else {
                this.clinicService.adverseDrugReactions().subscribe(res => {
                    this.adverseDrugReactions = res;
                    this.adverseDrugReactions.forEach(adr => {
                        this.selectedClinicAdr.push({
                            adverseDrugReaction: adr
                        });
                    });
                });
                this.selectedClinicAdr = [...this.selectedClinicAdr];
            }
        });
    }
    updateValue(event, cell, row) {
        console.log('Edit', event, cell, row);
        this.selectedClinicAdr = [...this.selectedClinicAdr.map(cadr => {
                if (cadr.adverseDrugReaction && cadr.adverseDrugReaction.id === row.id) {
                    cadr.severity = event;
                }
                return cadr;
            })];
        console.log('UPDATED!', row, event);
    }
    filterDates(date) {
        let exists = false;
        this.visitDates.forEach(d => {
            if (date.diff(d, 'days') === 0) {
                exists = true;
            }
        });
        return (this.entity.id && date.diff(this.entity.dateVisit, 'days') === 0) || !exists;
    }
    dateChanged(date) {
        this.appointmentMax = date.clone().add(6, 'months');
        this.lmpMin = date.clone().subtract(2, 'years');
        this.appointmentMin = date.clone().add(14, 'days');
        this.otzApplicable = !date.clone().subtract(24, 'years').isAfter(this.entity.patient.dateBirth)
            && !date.clone().subtract(10, 'years').isBefore(this.entity.patient.dateBirth);
    }
    entityCompare(e1, e2) {
        return entityCompare(e1, e2);
    }
    previousState() {
        window.history.back();
    }
    save() {
        this.isSaving = true;
        if (!this.entity.extra) {
            this.entity.extra = {};
        }
        this.entity.extra.otz = {};
        this.entity.extra.otz.fullDisclosure = this.fullDisclosure;
        this.entity.extra.otz.dateOfFullDisclosure = this.dateOfFullDisclosure != null && this.dateOfFullDisclosure.isValid() ?
            this.dateOfFullDisclosure.format(DATE_FORMAT) : null;
        this.entity.extra.otz.dateEnrolledOnOTZ = this.dateEnrolledOnOTZ != null && this.dateEnrolledOnOTZ.isValid() ?
            this.dateEnrolledOnOTZ.format(DATE_FORMAT) : null;
        this.entity.extra.otz.attendedLastOTZMeeting = !!this.attendedLastOTZMeeting;
        this.entity.extra.otz.dateLastOTZMeeting = this.dateLastOTZMeeting != null && this.dateLastOTZMeeting.isValid() ?
            this.dateLastOTZMeeting.format(DATE_FORMAT) : null;
        this.entity.extra.otz.enrolledOnOTZ = this.enrolledOnOTZ;
        this.entity.extra.otz.caregiverPhone = this.caregiverPhone;
        this.entity.extra.otz.caregiverAddress = this.caregiverAddress;
        this.entity.extra.otz.modulesCompleted = this.modulesCompleted;
        if (this.prep) {
            this.entity.extra.prep = {};
            this.entity.extra.prep.hivTestResult = this.hivTestResult;
            this.entity.extra.prep.creatinineClearance = this.creatinineClearance;
            this.entity.extra.prep.hepatitisB = this.hepatitisB;
            this.entity.extra.prep.hepatitisC = this.hepatitisC;
            this.entity.extra.prep.urinalysis = this.urinalysis;
        }
        this.entity.adverseDrugReactions = this.selectedClinicAdr.filter(cadr => !!cadr.severity);
        this.entity.opportunisticInfections = this.oiList;
        this.entity.adheres = this.adhereList;
        this.appLoaderService.open('Saving clinic visit..');
        if (this.entity.id !== undefined) {
            this.subscribeToSaveResponse(this.clinicService.update(this.entity));
        }
        else {
            this.subscribeToSaveResponse(this.clinicService.create(this.entity));
        }
    }
    regimenLineChange(type) {
        this.clinicService.getRegimenByLine(type.id).subscribe(res => this.regimens = res);
    }
    subscribeToSaveResponse(result) {
        result.subscribe((res) => this.onSaveSuccess(res.body), (res) => {
            this.onSaveError();
            this.onError(res.message);
        });
    }
    onSaveSuccess(result) {
        this.appLoaderService.close();
        this.isSaving = false;
        this.notification.showInfo('Clinic visit successfully saved');
        this.previousState();
    }
    onSaveError() {
        this.isSaving = false;
        this.appLoaderService.close();
        this.error = true;
        // this.submitButton.disabled = true;
        this.notification.showError('Error occurred saving clinic visit; try again');
        // this.progressBar.mode = 'determinate';
    }
    onError(errorMessage) {
        this.appLoaderService.close();
        this.notification.showError(errorMessage);
    }
};
ClinicEditComponent.ctorParameters = () => [
    { type: ClinicService },
    { type: NotificationService },
    { type: ActivatedRoute },
    { type: AppLoaderService }
];
ClinicEditComponent = tslib_1.__decorate([
    Component({
        selector: 'lamis-clinic-edit',
        template: "<div class=\"lamis-edit-form\">\n    <div class=\"lamis-edit-form-container\">\n        <form name=\"form\" role=\"form\" novalidate (ngSubmit)=\"save()\" #clinicForm=\"ngForm\">\n            <mat-card class=\"default\">\n                <mat-card-content *ngIf=\"!!entity.patient\">\n                    <ng-container *ngIf=\"commence === true\">\n                        <div>\n                            <mat-form-field class=\"full-width\">\n                                <input matInput [matDatepicker]=\"picker\"\n                                       placeholder=\"ART Start Date\"\n                                       [(ngModel)]=\"entity.dateVisit\"\n                                       #visit=\"ngModel\"\n                                       (dateChange)=\"dateChanged($event.value)\"\n                                       [matDatepickerFilter]=\"filterDates.bind(this)\"\n                                       [max]=\"today\"\n                                       [min]=\"dateRegistration\"\n                                       name=\"visit\"\n                                       required>\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]=\"picker\">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker></mat-datepicker>\n                                <mat-error\n                                        *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)\">\n                                    {{prep ? 'Date of PrEP Initiation ' : 'ART Start Date '}}is required\n                                </mat-error>\n                                <mat-error\n                                        *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)\">\n                                    Date of visit cannot be before {{dateRegistration | date: 'dd MMM, yyyy'}}\n                                </mat-error>\n                                <mat-error\n                                        *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)\">\n                                    {{prep ? 'Date of PrEP Initiation ' : 'ART Start Date '}}cannot be in the future\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"row\" *ngIf=\"!prep\">\n                            <div class=\"col-md-6\">\n                                <mat-form-field class=\"full-width\">\n                                    <input matInput placeholder=\"CD4 at start of ART\" [min]=\"0\" type=\"number\"\n                                           #cd4=\"ngModel\" name=\"cd4\" [(ngModel)]=\"entity.cd4\"/>\n                                    <mat-error\n                                            *ngIf=\"cd4.errors && (cd4.dirty || cd4.touched) && (cd4.errors.min)\">\n                                        Minimum CD4 is 0\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <mat-form-field class=\"full-width\">\n                                    <input matInput placeholder=\"CD4 %\" [min]=\"0\" [max]=\"100\" type=\"number\"\n                                           #cd4p=\"ngModel\" name=\"cd4p\" [(ngModel)]=\"entity.cd4p\"/>\n                                    <mat-error\n                                            *ngIf=\"cd4p.errors && (cd4p.dirty || cd4p.touched) && (cd4p.errors.min)\">\n                                        Minimum CD4 % is 0\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf=\"cd4p.errors && (cd4p.dirty || cd4p.touched) && (cd4p.errors.max)\">\n                                        Maximum CD4 % is 100\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <mat-form-field class=\"full-width\">\n                                    <mat-select [(ngModel)]=\"entity.regimenType\"\n                                                placeholder=\"Original Regimen Line\"\n                                                #rtype=\"ngModel\" required name=\"rt\"\n                                                [compareWith]=\"entityCompare\"\n                                                (selectionChange)=\"regimenLineChange($event.value)\">\n                                        <mat-option>None</mat-option>\n                                        <mat-option *ngFor=\"let line of regimenLines\"\n                                                    [value]=\"line\">{{line.description}}</mat-option>\n                                        <mat-error\n                                                *ngIf=\"rtype.errors && (rtype.dirty || rtype.touched) && (rtype.errors.required)\">\n                                            Regimen Line is required\n                                        </mat-error>\n                                    </mat-select>\n                                </mat-form-field>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <mat-form-field class=\"full-width\">\n                                    <mat-select [(ngModel)]=\"entity.regimen\"\n                                                placeholder=\"Original Regimen\"\n                                                [compareWith]=\"entityCompare\"\n                                                #rm=\"ngModel\" required name=\"rm\">\n                                        <mat-option>None</mat-option>\n                                        <mat-option *ngFor=\"let regimen of regimens\"\n                                                    [value]=\"regimen\">{{regimen.description}}</mat-option>\n                                        <mat-error\n                                                *ngIf=\"rm.errors && (rm.dirty || rm.touched) && (rm.errors.required)\">\n                                            Regimen is required\n                                        </mat-error>\n                                    </mat-select>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </ng-container>\n                    <div *ngIf=\"commence === false || commence === undefined\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput [matDatepicker]=\"picker\"\n                                   placeholder=\"Date of Visit\"\n                                   [(ngModel)]=\"entity.dateVisit\"\n                                   [matDatepickerFilter]=\"filterDates.bind(this)\"\n                                   #visit=\"ngModel\"\n                                   (dateChange)=\"dateChanged($event.value)\"\n                                   [max]=\"today\"\n                                   [min]=\"dateRegistration\"\n                                   name=\"visit\"\n                                   required>\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                            <mat-error\n                                    *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)\">\n                                Date of visit is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)\">\n                                Date of visit cannot be before {{dateRegistration | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)\">\n                                Date of visit cannot be in the future\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <ng-container *ngIf=\"otzApplicable && !hasOtz\">\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <mat-checkbox [(ngModel)]=\"fullDisclosure\" name=\"fd\">\n                                    Full Disclosure?\n                                </mat-checkbox>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <mat-form-field class=\"full-width\" *ngIf=\"fullDisclosure\">\n                                    <input matInput [matDatepicker]=\"picker8\"\n                                           placeholder=\"Date of Full Disclosure\"\n                                           [(ngModel)]=\"dateOfFullDisclosure\"\n                                           #dfd=\"ngModel\"\n                                           [max]=\"today\"\n                                           [min]=\"entity.patient.dateBirth\"\n                                           name=\"dfd\"\n                                           required>\n                                    <mat-datepicker-toggle\n                                            matSuffix\n                                            [for]=\"picker8\">\n                                    </mat-datepicker-toggle>\n                                    <mat-datepicker #picker8></mat-datepicker>\n                                    <mat-error\n                                            *ngIf=\"dfd.errors && (dfd.dirty || dfd.touched) && (dfd.errors.required)\">\n                                        Date of Full Disclosure is required\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf=\"dfd.errors && (dfd.dirty || dfd.touched) && (dfd.errors.min)\">\n                                        Date of Full Disclosure cannot be before date of\n                                        birth {{entity.patient.dateBirth | date: 'dd MMM, yyyy'}}\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf=\"dfd.errors && (dfd.dirty || dfd.touched) && (dfd.errors.max)\">\n                                        Date of Full Disclosure cannot be in the future\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                        <ng-container *ngIf=\"fullDisclosure && !hasOtz\">\n                            <div class=\"row\">\n                                <div class=\"col-md-6\">\n                                    <mat-checkbox [(ngModel)]=\"enrolledOnOTZ\" name=\"otz\">\n                                        Enrolled on OTZ?\n                                    </mat-checkbox>\n                                </div>\n                                <div class=\"col-md-6\">\n                                    <mat-form-field class=\"full-width\" *ngIf=\"enrolledOnOTZ\">\n                                        <input matInput [matDatepicker]=\"picker7\"\n                                               placeholder=\"Date Enrolled on OTZ\"\n                                               [(ngModel)]=\"dateEnrolledOnOTZ\"\n                                               #otze=\"ngModel\"\n                                               [max]=\"today\"\n                                               [min]=\"entity.patient.dateBirth\"\n                                               name=\"otze\"\n                                               [required]=\"enrolledOnOTZ\">\n                                        <mat-datepicker-toggle\n                                                matSuffix\n                                                [for]=\"picker7\">\n                                        </mat-datepicker-toggle>\n                                        <mat-datepicker #picker7></mat-datepicker>\n                                        <mat-error\n                                                *ngIf=\"otze.errors && (otze.dirty || otze.touched) && (otze.errors.required)\">\n                                            Date enrolled on OTZ is required\n                                        </mat-error>\n                                        <mat-error\n                                                *ngIf=\"otze.errors && (otze.dirty || otze.touched) && (otze.errors.min)\">\n                                            Date enrolled on OTZ cannot be before date of\n                                            birth {{entity.patient.dateBirth | date: 'dd MMM, yyyy'}}\n                                        </mat-error>\n                                        <mat-error\n                                                *ngIf=\"otze.errors && (otze.dirty || otze.touched) && (otze.errors.max)\">\n                                            Date enrolled on OTZ cannot be in the future\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <ng-container *ngIf=\"enrolledOnOTZ\">\n                                <fieldset>\n                                    <legend>OTZ</legend>\n                                    <div class=\"row\">\n                                        <div class=\"col-md-6\">\n                                            <mat-form-field class=\"full-width\">\n                                                <mat-label>Caregiver Phone</mat-label>\n                                                <input matInput name=\"phone\" [(ngModel)]=\"caregiverPhone\"\n                                                       #phone=\"ngModel\"\n                                                       phoneNumber/>\n                                                <mat-error\n                                                        *ngIf=\"phone.errors && (phone.dirty || phone.touched) && (phone.errors.required)\">\n                                                    Caregiver phone number is required\n                                                </mat-error>\n                                                <mat-error\n                                                        *ngIf=\"phone.errors && (phone.dirty || phone.touched || !!entity.id) && (phone.errors.phoneNumber)\">\n                                                    Invalid phone number\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </div>\n                                        <div class=\"col-md-6\">\n                                            <mat-form-field class=\"full-width\">\n                                                <mat-label>Caregiver Address</mat-label>\n                                                <textarea matInput name=\"address\" [(ngModel)]=\"caregiverAddress\"\n                                                          #address=\"ngModel\"\n                                                          rows=\"2\">\n                                            </textarea>\n                                                <mat-error\n                                                        *ngIf=\"address.errors && (address.dirty || address.touched) && (address.errors.required)\">\n                                                    Case Manager address is required\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </div>\n                                    </div>\n                                </fieldset>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n                    <div>\n                        <mat-form-field class=\"full-width\">\n                            <mat-select [(ngModel)]=\"entity.clinicStage\"\n                                        placeholder=\"Clinical Stage\"\n                                        #clinicStage=\"ngModel\" name=\"cs\">\n                                <mat-option>None</mat-option>\n                                <mat-option [value]=\"'Stage I'\">Stage I</mat-option>\n                                <mat-option [value]=\"'Stage II'\">Stage II</mat-option>\n                                <mat-option [value]=\"'Stage III'\">Stage III</mat-option>\n                                <mat-option [value]=\"'Stage IV'\">Stage IV</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class=\"full-width\">\n                            <mat-select [(ngModel)]=\"entity.funcStatus\"\n                                        placeholder=\"Functional Status\"\n                                        #funcStatus=\"ngModel\" name=\"fs\">\n                                <mat-option>None</mat-option>\n                                <mat-option [value]=\"'Working'\">Working</mat-option>\n                                <mat-option [value]=\"'Ambulatory'\">Ambulatory</mat-option>\n                                <mat-option [value]=\"'Bedridden'\">Bedridden</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <ng-container *ngIf=\"prep\">\n                        <fieldset>\n                            <legend>PrEP</legend>\n                            <div *ngIf=\"commence\">\n                                <mat-form-field class=\"full-width\">\n                                    <mat-select [(ngModel)]=\"hivTestResult\"\n                                                placeholder=\"HIV Status at PrEP Initiation\"\n                                                required\n                                                #hivStatus=\"ngModel\" name=\"htr\">\n                                        <mat-option>None</mat-option>\n                                        <mat-option [value]=\"'NEGATIVE'\">Negative</mat-option>\n                                        <mat-option [value]=\"'POSITIVE'\">Positive</mat-option>\n                                    </mat-select>\n                                    <mat-error\n                                            *ngIf=\"hivStatus.errors && (hivStatus.dirty || hivStatus.touched) && (hivStatus.errors.required)\">\n                                        HIV Status is required\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                            <div *ngIf=\"!commence\">\n                                <mat-form-field class=\"full-width\">\n                                    <mat-select [(ngModel)]=\"hivTestResult\"\n                                                placeholder=\"HIV Status /Test Result\"\n                                                required\n                                                #hivStatus=\"ngModel\" name=\"htr\">\n                                        <mat-option>None</mat-option>\n                                        <mat-option [value]=\"'NEGATIVE'\">Negative</mat-option>\n                                        <mat-option [value]=\"'POSITIVE'\">Positive</mat-option>\n                                        <mat-option [value]=\"'NOT_DONE'\">Not Done</mat-option>\n                                    </mat-select>\n                                    <mat-error\n                                            *ngIf=\"hivStatus.errors && (hivStatus.dirty || hivStatus.touched) && (hivStatus.errors.required)\">\n                                        HIV Status is required\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                            <ng-container *ngIf=\"commence\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <mat-form-field class=\"full-width\">\n                                            <input matInput [(ngModel)]=\"creatinineClearance\"\n                                                   placeholder=\"Creatinine Clearance (mL/min)\"\n                                                   #creatinine=\"ngModel\" name=\"creatinine\"/>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <mat-form-field class=\"full-width\">\n                                            <mat-select [(ngModel)]=\"urinalysis\"\n                                                        placeholder=\"Urinalysis\"\n                                                        #urinal=\"ngModel\" name=\"urinalysis\">\n                                                <mat-option>None</mat-option>\n                                                <mat-option [value]=\"'Normal'\">Normal</mat-option>\n                                                <mat-option [value]=\"'Deranged'\">Deranged</mat-option>\n                                            </mat-select>\n                                        </mat-form-field>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <mat-form-field class=\"full-width\">\n                                            <mat-select [(ngModel)]=\"hepatitisB\"\n                                                        placeholder=\"Hepatitis B Screening\"\n                                                        #hepatitisb=\"ngModel\" name=\"hepatitisB\">\n                                                <mat-option>None</mat-option>\n                                                <mat-option [value]=\"'Positive'\">Positive</mat-option>\n                                                <mat-option [value]=\"'Negative'\">Negative</mat-option>\n                                                <mat-option [value]=\"'Not Done'\">Not Done</mat-option>\n                                            </mat-select>\n                                        </mat-form-field>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <mat-form-field class=\"full-width\">\n                                            <mat-select [(ngModel)]=\"hepatitisC\"\n                                                        placeholder=\"Hepatitis C Screening\"\n                                                        #hepatitisb=\"ngModel\" name=\"hepatitisC\">\n                                                <mat-option>None</mat-option>\n                                                <mat-option [value]=\"'Positive'\">Positive</mat-option>\n                                                <mat-option [value]=\"'Negative'\">Negative</mat-option>\n                                                <mat-option [value]=\"'Not Done'\">Not Done</mat-option>\n                                            </mat-select>\n                                        </mat-form-field>\n                                    </div>\n                                </div>\n                            </ng-container>\n                        </fieldset>\n                    </ng-container>\n                    <div>\n                        <mat-form-field class=\"full-width\">\n                            <mat-select [(ngModel)]=\"entity.tbStatus\"\n                                        placeholder=\"TB Status\"\n                                        name=\"tb\"\n                                        #tbStatus=\"ngModel\">\n                                <mat-option>None</mat-option>\n                                <mat-option [value]=\"'No sign or symptoms of TB'\">No sign or symptoms of TB</mat-option>\n                                <mat-option [value]=\"'TB suspected and referred for evaluation'\">TB suspected and\n                                    referred\n                                    for evaluation\n                                </mat-option>\n                                <mat-option [value]=\"'Currently on INH prophylaxis'\">Currently on INH prophylaxis\n                                </mat-option>\n                                <mat-option [value]=\"'Currently on TB treatment'\">Currently on TB treatment</mat-option>\n                                <mat-option [value]=\"'TB positive not on TB drugs'\">TB positive not on TB drugs\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class=\"full-width\">\n                            <input matInput placeholder=\"Body weight(Kg)\" [min]=\"0\" [max]=\"250\" type=\"number\"\n                                   #weight=\"ngModel\" name=\"weight\" [(ngModel)]=\"entity.bodyWeight\"/>\n                            <mat-error\n                                    *ngIf=\"weight.errors && (weight.dirty || weight.touched) && (weight.errors.min)\">\n                                Minimum body weight is 0\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"weight.errors && (weight.dirty || weight.touched) && (weight.errors.max)\">\n                                Maximum body weight is 250\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class=\"full-width\">\n                            <input matInput placeholder=\"Height (m)\" [min]=\"0\" [max]=\"1.8\" type=\"number\"\n                                   #height=\"ngModel\" name=\"height\" [(ngModel)]=\"entity.height\"/>\n                            <mat-error\n                                    *ngIf=\"height.errors && (height.dirty || height.touched) && (height.errors.min)\">\n                                Minimum height is 0\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"height.errors && (height.dirty || height.touched) && (height.errors.max)\">\n                                Maximum height is 1.8m\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <fieldset>\n                        <h6>Blood Pressure(mmHg)</h6>\n                        <div class=\"row\">\n                            <div class=\"col-md-3\">\n                                <mat-form-field class=\"full-width\">\n                                    <input matInput placeholder=\"Systolic\"\n                                           name=\"bp1\" type=\"number\"\n                                           [max]=\"190\"\n                                           [min]=\"70\"\n                                           [required]=\"!!entity.bp2\"\n                                           #bp1=\"ngModel\" [(ngModel)]=\"entity.bp1\"/>\n                                    <mat-error\n                                            *ngIf=\"bp1.errors && (bp1.dirty || bp1.touched) && (bp1.errors.max)\">\n                                        Maximum Systolic is 190\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf=\"bp1.errors && (bp1.dirty || bp1.touched) && (bp1.errors.min)\">\n                                        Minimum Systolic is 70\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf=\"bp1.errors && (bp1.dirty || bp1.touched) && (bp1.errors.required)\">\n                                        Systolic is required\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <mat-form-field class=\"full-width\">\n                                    <input matInput placeholder=\"Diastolic\"\n                                           name=\"bp2\" type=\"number\"\n                                           [max]=\"100\"\n                                           [min]=\"40\"\n                                           [required]=\"!!entity.bp1\"\n                                           #bp2=\"ngModel\" [(ngModel)]=\"entity.bp2\"/>\n                                    <mat-error\n                                            *ngIf=\"bp2.errors && (bp2.dirty || bp2.touched) && (bp2.errors.max)\">\n                                        Maximum Diastolic is 100\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf=\"bp2.errors && (bp2.dirty || bp2.touched) && (bp2.errors.min)\">\n                                        Minimum Diastolic is 40\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf=\"bp2.errors && (bp2.dirty || bp2.touched) && (bp2.errors.required)\">\n                                        Diastolic is required\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </fieldset>\n                    <div *ngIf=\"entity.patient && entity.patient.gender === 'FEMALE'\">\n                        <mat-form-field class=\"full-width\">\n                            <mat-select [(ngModel)]=\"entity.pregnancyStatus\"\n                                        placeholder=\"Pregnancy Status\"\n                                        #pregStatus=\"ngModel\" name=\"ps\">\n                                <mat-option>None</mat-option>\n                                <mat-option [value]=\"1\">Not Pregnant</mat-option>\n                                <mat-option [value]=\"2\">Pregnant</mat-option>\n                                <mat-option [value]=\"3\">Breastfeeding</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"entity.patient && entity.patient.gender === 'FEMALE' && lmpMin\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput [matDatepicker]=\"picker1\"\n                                   placeholder=\"LMP\"\n                                   [(ngModel)]=\"entity.lmp\"\n                                   #lmp=\"ngModel\"\n                                   [max]=\"entity.dateVisit\"\n                                   [min]=\"lmpMin\"\n                                   name=\"lmp\">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker1\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker1></mat-datepicker>\n                            <mat-error\n                                    *ngIf=\"lmp.errors && (lmp.dirty || lmp.touched) && (lmp.errors.max)\">\n                                LMP cannot be after {{entity.dateVisit | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"lmp.errors && (lmp.dirty || lmp.touched) && (lmp.errors.min)\">\n                                LMP cannot be before {{lmpMin | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class=\"full-width\">\n                            <mat-select [(ngModel)]=\"oiList\"\n                                        placeholder=\"Opportunistic Infections\"\n                                        [compareWith]=\"entityCompare\"\n                                        name=\"ois\"\n                                        #oiIds=\"ngModel\" multiple>\n                                <mat-option>None</mat-option>\n                                <mat-option *ngFor=\"let oi of opportunisticInfections\"\n                                            [value]=\"oi\">{{oi.description}}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-4\">\n                            <mat-checkbox [(ngModel)]=\"adr\"\n                                          name=\"ad\">Adverse Drug Reaction Screened?\n                            </mat-checkbox>\n                        </div>\n                        <div style=\"height: 300px; overflow-y: auto;\" *ngIf=\"adr\" class=\"col-md-8\">\n                            <adf-datatable [rows]=\"selectedClinicAdr\"\n                                           [stickyHeader]=\"true\">\n                                <data-columns>\n                                    <data-column key=\"adverseDrugReaction.description\" title=\"Description\"\n                                                 sortable=\"true\"></data-column>\n                                    <data-column key=\"severity\" title=\"Severity\" sortable=\"false\">\n                                        <ng-template let-context=\"$implicit\">\n                                            <mat-form-field class=\"full-width\">\n                                                <mat-select autofocus\n                                                            [value]=\"context.row.getValue('severity')\"\n                                                            name=\"severity\"\n                                                            (valueChange)=\"updateValue($event, 'severity', context.row.getValue('adverseDrugReaction'))\">\n                                                    <mat-option>None</mat-option>\n                                                    <mat-option [value]=\"'Grade 1'\">Grade 1</mat-option>\n                                                    <mat-option [value]=\"'Grade 2'\">Grade 2</mat-option>\n                                                    <mat-option [value]=\"'Grade 3'\">Grade 3</mat-option>\n                                                    <mat-option [value]=\"'Grade 4'\">Grade 4</mat-option>\n                                                </mat-select>\n                                            </mat-form-field>\n                                        </ng-template>\n                                    </data-column>\n                                </data-columns>\n                            </adf-datatable>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <mat-form-field class=\"full-width\">\n                                <mat-select [(ngModel)]=\"entity.adherenceLevel\"\n                                            placeholder=\"Level of Adherence\"\n                                            #adherence=\"ngModel\" name=\"al\">\n                                    <mat-option>None</mat-option>\n                                    <mat-option [value]=\"'Good'\">Good</mat-option>\n                                    <mat-option [value]=\"'Fair'\">Fair</mat-option>\n                                    <mat-option [value]=\"'Poor'\">Poor</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <mat-form-field class=\"full-width\"\n                                            *ngIf=\"entity.adherenceLevel === 'Fair' || entity.adherenceLevel === 'Poor'\">\n                                <mat-select [(ngModel)]=\"adhereList\"\n                                            placeholder=\"Adherence\"\n                                            name=\"ads\"\n                                            [compareWith]=\"entityCompare\"\n                                            #adrIds=\"ngModel\" multiple>\n                                    <mat-option>None</mat-option>\n                                    <mat-option *ngFor=\"let adhere of adheres\"\n                                                [value]=\"adhere\">{{adhere.description}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <ng-container *ngIf=\"otzApplicable || enrolledOnOTZ\">\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <mat-checkbox [(ngModel)]=\"attendedLastOTZMeeting\" name=\"aotz\">\n                                    Attended last support group (OTZ club) meeting?\n                                </mat-checkbox>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <mat-form-field class=\"full-width\" *ngIf=\"attendedLastOTZMeeting\">\n                                    <input matInput [matDatepicker]=\"picker8\"\n                                           placeholder=\"Date of Last OTZ Club Meeting\"\n                                           [(ngModel)]=\"dateLastOTZMeeting\"\n                                           #lotzm=\"ngModel\"\n                                           [max]=\"today\"\n                                           [min]=\"dateEnrolledOnOTZ\"\n                                           name=\"lotzm\"\n                                           [required]=\"attendedLastOTZMeeting\">\n                                    <mat-datepicker-toggle\n                                            matSuffix\n                                            [for]=\"picker8\">\n                                    </mat-datepicker-toggle>\n                                    <mat-datepicker #picker8></mat-datepicker>\n                                    <mat-error\n                                            *ngIf=\"lotzm.errors && (lotzm.dirty || lotzm.touched) && (lotzm.errors.required)\">\n                                        Date of Last OTZ meeting is required\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf=\"lotzm.errors && (lotzm.dirty || lotzm.touched) && (lotzm.errors.min)\">\n                                        Date of last OTZ meeting cannot be\n                                        before {{dateEnrolledOnOTZ | date: 'dd MMM, yyyy'}}\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf=\"lotzm.errors && (lotzm.dirty || lotzm.touched) && (lotzm.errors.max)\">\n                                        Date of last OTZ meeting cannot be in the future\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <mat-form-field class=\"full-width\">\n                                    <mat-select name=\"modules\" [(ngModel)]=\"modulesCompleted\" #modules=\"ngModel\"\n                                                [required]=\"attendedLastOTZMeeting\">\n                                        <mat-option></mat-option>\n                                        <mat-option [value]=\"1\">1</mat-option>\n                                        <mat-option [value]=\"2\">2</mat-option>\n                                        <mat-option [value]=\"3\">3</mat-option>\n                                        <mat-option [value]=\"4\">4</mat-option>\n                                        <mat-option [value]=\"5\">5</mat-option>\n                                        <mat-option [value]=\"6\">6</mat-option>\n                                        <mat-option [value]=\"7\">7</mat-option>\n                                    </mat-select>\n                                    <mat-error\n                                            *ngIf=\"modules.errors && (modules.dirty || modules.touched) && (modules.errors.required)\">\n                                        Number of modules attended required\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </ng-container>\n                    <div *ngIf=\"!!appointmentMin\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput [matDatepicker]=\"picker2\"\n                                   placeholder=\"Date of Next Appointment\"\n                                   [(ngModel)]=\"entity.nextAppointment\"\n                                   #na=\"ngModel\"\n                                   [min]=\"appointmentMin\"\n                                   [max]=\"appointmentMax\"\n                                   name=\"na\"\n                                   required>\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker2\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker2></mat-datepicker>\n                            <mat-error\n                                    *ngIf=\"na.errors && (na.dirty || na.touched) && (na.errors.required)\">\n                                Date of next appointment is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"na.errors && (na.dirty || na.touched) && (na.errors.max)\">\n                                Date of next appointment cannot be after {{appointmentMax | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"na.errors && (na.dirty || na.touched) && (na.errors.min)\">\n                                Date of next appointment cannot be before {{appointmentMin | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class=\"full-width\">\n                            <textarea matInput placeholder=\"Clinical Notes\"\n                                      cols=\"30\"\n                                      rows=\"3\"\n                                      name=\"notes\"\n                                      #note=\"ngModel\" [(ngModel)]=\"entity.notes\"></textarea>\n                        </mat-form-field>\n                    </div>\n                    <mat-card-actions class=\"lamis-edit-form-actions\">\n                        <button mat-raised-button type=\"button\" (click)=\"previousState()\">Back</button>\n                        <button mat-raised-button color='primary'\n                                [disabled]=\"clinicForm.invalid || isSaving\"\n                                type=\"submit\">\n                            {{entity.id !== undefined ? 'Update' : 'Save'}}\n                        </button>\n                    </mat-card-actions>\n                </mat-card-content>\n            </mat-card>\n        </form>\n    </div>\n</div>\n"
    }),
    tslib_1.__metadata("design:paramtypes", [ClinicService,
        NotificationService,
        ActivatedRoute,
        AppLoaderService])
], ClinicEditComponent);
export { ClinicEditComponent };
//# sourceMappingURL=data:application/json;base64,