import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import * as moment_ from 'moment';
import { SERVER_API_URL_CONFIG } from '@lamis/web-core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";
const moment = moment_;
let CervicalCancerScreeningService = class CervicalCancerScreeningService {
    constructor(http, serverUrl) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.resourceUrl = '';
        this.observationResourceUrl = '';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/cervical-cancer-screenings';
        this.observationResourceUrl = serverUrl.SERVER_API_URL + '/api/observations';
    }
    find(id) {
        return this.http.get(`${this.observationResourceUrl}/${id}`, { observe: 'response' })
            .pipe(map(res => {
            console.log('Response1', res);
            res.body.date = res.body.date != null ? moment(res.body.date) : null;
            res.body.data.dateTreated = res.body.data.dateTreated != null ? moment(res.body.data.dateTreated) : null;
            res.body.data.dateScreened = res.body.data.dateScreened != null ? moment(res.body.data.dateScreened) : null;
            return res;
        }));
    }
    findByUuid(id) {
        return this.find(id);
    }
    delete(id) {
        return this.http.delete(`${this.observationResourceUrl}/${id}`, { observe: 'response' });
    }
    save(data) {
        return this.http.post(`${this.observationResourceUrl}`, data, { observe: 'response' })
            .pipe(map(res => {
            res.body.data.dateTreated = res.body.data.dateTreated != null ? moment(res.body.data.dateTreated) : null;
            res.body.data.dateScreened = res.body.data.dateScreened != null ? moment(res.body.data.dateScreened) : null;
            return res;
        }));
    }
    update(data) {
        return this.http.put(`${this.observationResourceUrl}`, data, { observe: 'response' })
            .pipe(map(res => {
            res.body.data.dateTreated = res.body.data.dateTreated != null ? moment(res.body.data.dateTreated) : null;
            res.body.data.dateScreened = res.body.data.dateScreened != null ? moment(res.body.data.dateScreened) : null;
            return res;
        }));
    }
    getScreeningByPatient(id) {
        return this.http.get(`${this.resourceUrl}/patient/${id}`, { observe: 'response' })
            .pipe(map(res => {
            res.body.data = res.body.data.cervicalCancerScreening;
            res.body.date = res.body.date != null ? moment(res.body.date) : null;
            res.body.data.dateTreated = res.body.data.dateTreated != null ? moment(res.body.data.dateTreated) : null;
            res.body.data.dateScreened = res.body.data.dateScreened != null ? moment(res.body.data.dateScreened) : null;
            return res;
        }));
    }
};
CervicalCancerScreeningService.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Inject, args: [SERVER_API_URL_CONFIG,] }] }
];
CervicalCancerScreeningService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function CervicalCancerScreeningService_Factory() { return new CervicalCancerScreeningService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG)); }, token: CervicalCancerScreeningService, providedIn: "root" });
CervicalCancerScreeningService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
    tslib_1.__metadata("design:paramtypes", [HttpClient, Object])
], CervicalCancerScreeningService);
export { CervicalCancerScreeningService };
//# sourceMappingURL=data:application/json;base64,