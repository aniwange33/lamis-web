import * as tslib_1 from "tslib";
import {Inject, Injectable} from '@angular/core';
import {HttpClient, HttpResponse} from '@angular/common/http';
import {DATE_FORMAT, SERVER_API_URL_CONFIG} from '@lamis/web-core';
import {map} from 'rxjs/operators';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";

const moment = moment_;
let ChronicCareService = class ChronicCareService {
    constructor(http, serverUrl) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.resourceUrl = '';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/chronic-cares';
    }

    create(chronicCare) {
        const copy = this.convertDateFromClient(chronicCare);
        return this.http
            .post(this.resourceUrl, copy, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    update(chronicCare) {
        const copy = this.convertDateFromClient(chronicCare);
        return this.http
            .put(this.resourceUrl, copy, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    find(id) {
        return this.http
            .get(`${this.resourceUrl}/${id}`, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    findByUuid(id) {
        return this.http
            .get(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    delete(id) {
        return this.http.delete(`${this.resourceUrl}/${id}`, {observe: 'response'});
    }

    getDmScreens() {
        return this.http.get(`${this.resourceUrl}/dm-screens`);
    }

    getTbScreens() {
        return this.http.get(`${this.resourceUrl}/tb-screens`);
    }

    getDmScreenByChronicCare(id) {
        return this.http.get(`${this.resourceUrl}/${id}/dm-screens`);
    }

    getTbScreenByChronicCare(id) {
        return this.http.get(`${this.resourceUrl}/${id}/tb-screens`);
    }

    getVisitDatesByPatient(patientId) {
        return this.http.get(`${this.resourceUrl}/patient/${patientId}/visit-dates`)
            .pipe(map((res) => {
                res.forEach(d => moment(d));
                return res;
            }));
    }

    convertDateFromServer(res) {
        if (res.body) {
            res.body.dateLastCd4 = res.body.dateLastCd4 != null ? moment(res.body.dateLastCd4) : null;
            res.body.dateVisit = res.body.dateVisit != null ? moment(res.body.dateVisit) : null;
            res.body.dateLastViralLoad = res.body.dateLastViralLoad != null ? moment(res.body.dateLastViralLoad) : null;
            res.body.dateStartedTbTreatment = res.body.dateStartedTbTreatment != null ? moment(res.body.dateStartedTbTreatment) : null;
        }
        return res;
    }

    convertDateFromClient(vm) {
        vm.chronicCare = Object.assign({}, vm.chronicCare, {
            dateLastViralLoad: vm.chronicCare.dateLastViralLoad != null && vm.chronicCare.dateLastViralLoad.isValid() ?
                vm.chronicCare.dateLastViralLoad.format(DATE_FORMAT) : null,
            dateVisit: vm.chronicCare.dateVisit != null && vm.chronicCare.dateVisit.isValid() ?
                vm.chronicCare.dateVisit.format(DATE_FORMAT) : null,
            dateLastCd4: vm.chronicCare.dateLastCd4 != null && vm.chronicCare.dateLastCd4.isValid() ?
                vm.chronicCare.dateLastCd4.format(DATE_FORMAT) : null,
            dateStartedTbTreatment: vm.chronicCare.dateStartedTbTreatment != null &&
            vm.chronicCare.dateStartedTbTreatment.isValid() ? vm.chronicCare.dateStartedTbTreatment.format(DATE_FORMAT) : null
        });
        return vm;
    }
};
ChronicCareService.ctorParameters = () => [
    {type: HttpClient},
    {type: undefined, decorators: [{type: Inject, args: [SERVER_API_URL_CONFIG,]}]}
];
ChronicCareService.ngInjectableDef = i0.ɵɵdefineInjectable({
    factory: function ChronicCareService_Factory() {
        return new ChronicCareService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG));
    }, token: ChronicCareService, providedIn: "root"
});
ChronicCareService = tslib_1.__decorate([
    Injectable({providedIn: 'root'}),
    tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
    tslib_1.__metadata("design:paramtypes", [HttpClient, Object])
], ChronicCareService);
export {ChronicCareService};
//# sourceMappingURL=data:application/json;base64,
