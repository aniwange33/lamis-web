import * as tslib_1 from "tslib";
import {Inject, Injectable} from '@angular/core';
import {HttpClient, HttpResponse} from '@angular/common/http';
import {DATE_FORMAT, SERVER_API_URL_CONFIG} from '@lamis/web-core';
import {map} from 'rxjs/operators';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";

const moment = moment_;
let ClinicService = class ClinicService {
    constructor(http, serverUrl) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.resourceUrl = '';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/clinics';
    }

    create(vm) {
        vm['clinic'] = this.convertDateFromClient(vm.clinic);
        vm['oiScreened'] = !!vm.oiList ? 'Yes' : 'No';
        vm['adrScreened'] = !!vm.adrList ? 'Yes' : 'No';
        return this.http
            .post(this.resourceUrl, vm, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    update(vm) {
        vm['clinic'] = this.convertDateFromClient(vm.clinic);
        vm['oiScreened'] = !!vm.oiList ? 'Yes' : 'No';
        vm['adrScreened'] = !!vm.adrList ? 'Yes' : 'No';
        return this.http
            .put(this.resourceUrl, vm, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    find(id) {
        return this.http
            .get(`${this.resourceUrl}/${id}`, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    findByUuid(id) {
        return this.http
            .get(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    delete(id) {
        return this.http.delete(`${this.resourceUrl}/${id}`, {observe: 'response'});
    }

    getVisitDatesByPatient(patientId) {
        return this.http.get(`${this.resourceUrl}/patient/${patientId}/visit-dates`)
            .pipe(map((res) => {
                res.forEach(d => moment(d));
                return res;
            }));
    }

    getPatient(id) {
        return this.http.get(`/api/patients/by-uuid/${id}`, {observe: 'body'})
            .pipe(map((res) => {
                if (res) {
                    res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null;
                    res.dateBirth = res.dateBirth != null ? moment(res.dateBirth) : null;
                }
                return res;
            }));
    }

    getRegimenLines() {
        return this.http.get(`${this.resourceUrl}/regimen-types`);
    }

    getRegimenByLine(id) {
        return this.http.get(`${this.resourceUrl}/regimens/regimen-type/${id}`);
    }

    adverseDrugReactions() {
        return this.http.get(`${this.resourceUrl}/adverse-drug-reactions`);
    }

    opportunisticInfections() {
        return this.http.get(`${this.resourceUrl}/opportunistic-infections`);
    }

    adheres() {
        return this.http.get(`${this.resourceUrl}/adheres`);
    }

    regimes(regimenType) {
        return this.http.get(`${this.resourceUrl}/regimens/${regimenType}`);
    }

    latestVisit(patientId) {
        return this.http.get(`${this.resourceUrl}/patient/${patientId}/latest`);
    }

    getOpportunisticInfectionsByClinic(clinicId) {
        return this.http.get(`${this.resourceUrl}/${clinicId}/opportunistic-infections`);
    }

    getAdverseDrugReactionsByClinic(clinicId) {
        return this.http.get(`${this.resourceUrl}/${clinicId}/adverse-drug-reactions`, {observe: 'response'});
    }

    getAdhereByClinic(clinicId) {
        return this.http.get(`${this.resourceUrl}/${clinicId}/adheres`);
    }

    convertDateFromClient(clinic) {
        const copy = Object.assign({}, clinic, {
            dateVisit: clinic.dateVisit != null && clinic.dateVisit.isValid() ? clinic.dateVisit.format(DATE_FORMAT) : null,
            lmp: clinic.lmp != null && clinic.lmp.isValid() ? clinic.lmp.format(DATE_FORMAT) : null,
            nextAppointment: clinic.nextAppointment != null && clinic.nextAppointment.isValid() ? clinic.nextAppointment.format(DATE_FORMAT) : null,
            pregnant: clinic.pregnancyStatus != null && clinic.pregnancyStatus === 2,
            breastfeeding: clinic.pregnancyStatus != null && clinic.pregnancyStatus === 3,
            bp: clinic.bp1 > 0 && clinic.bp2 > 0 ? clinic.bp1 + '/' + clinic.bp2 : null
        });
        return copy;
    }

    convertDateFromServer(res) {
        if (res.body) {
            res.body.nextAppointment = res.body.nextAppointment != null ? moment(res.body.nextAppointment) : null;
            res.body.dateVisit = res.body.dateVisit != null ? moment(res.body.dateVisit) : null;
            res.body.lmp = res.body.lmp != null ? moment(res.body.lmp) : null;
            res.body.pregnancyStatus = res.body.pregnant ? 2 : res.body.breastfeeding ? 3 : 1;
            if (res.body.bp) {
                const parts = res.body.bp.split('/');
                res.body.bp1 = parseInt(parts[0]);
                res.body.bp2 = parts.length === 2 ? parseInt(parts[1]) : null;
            }
        }
        return res;
    }

    convertDateArrayFromServer(res) {
        if (res.body) {
            res.body.forEach((clinic) => {
                clinic.dateVisit = clinic.dateVisit != null ? moment(clinic.dateVisit) : null;
                clinic.lmp = clinic.lmp != null ? moment(clinic.lmp) : null;
                clinic.nextAppointment = clinic.nextAppointment != null ? moment(clinic.nextAppointment) : null;
                clinic.pregnancyStatus = clinic.pregnant ? 2 : clinic.breastfeeding ? 3 : 1;
            });
        }
        return res;
    }
};
ClinicService.ctorParameters = () => [
    {type: HttpClient},
    {type: undefined, decorators: [{type: Inject, args: [SERVER_API_URL_CONFIG,]}]}
];
ClinicService.ngInjectableDef = i0.ɵɵdefineInjectable({
    factory: function ClinicService_Factory() {
        return new ClinicService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG));
    }, token: ClinicService, providedIn: "root"
});
ClinicService = tslib_1.__decorate([
    Injectable({providedIn: 'root'}),
    tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
    tslib_1.__metadata("design:paramtypes", [HttpClient, Object])
], ClinicService);
export {ClinicService};
//# sourceMappingURL=data:application/json;base64,
