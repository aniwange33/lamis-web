import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import * as moment_ from 'moment';
import { ClinicService } from '../../services/clinic.service';
import { NotificationService } from '@alfresco/adf-core';
import { ActivatedRoute } from '@angular/router';
import { AppLoaderService, DATE_FORMAT } from '@lamis/web-core';
import { CervicalCancerScreeningService } from '../../services/cervical-cancer-screening.service';
var moment = moment_;
var CervicalCancerScreeningComponent = /** @class */ (function () {
    function CervicalCancerScreeningComponent(clinicService, screeningService, notification, activatedRoute, appLoaderService) {
        this.clinicService = clinicService;
        this.screeningService = screeningService;
        this.notification = notification;
        this.activatedRoute = activatedRoute;
        this.appLoaderService = appLoaderService;
        this.entity = {};
        this.observation = {};
        this.today = moment();
        this.isSaving = false;
    }
    CervicalCancerScreeningComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.activatedRoute.data.subscribe(function (_a) {
            var entity = _a.entity;
            _this.observation = !!entity && entity.body ? entity.body : entity;
            if (!!_this.observation) {
                _this.entity = _this.observation.data;
            }
            else {
                _this.observation = {};
            }
            if (_this.entity === undefined) {
                _this.entity = {};
            }
            var patientId = _this.activatedRoute.snapshot.paramMap.get('patientId');
            _this.clinicService.getPatient(patientId).subscribe(function (res) {
                _this.patient = res;
                if (!!_this.entity) {
                    _this.screeningService.getScreeningByPatient(res.id).subscribe(function (r) {
                        _this.entity = r.body && r.body.data;
                        _this.observation = r.body;
                    });
                }
            });
        });
    };
    CervicalCancerScreeningComponent.prototype.previousState = function () {
        window.history.back();
    };
    CervicalCancerScreeningComponent.prototype.save = function () {
        //this.submitButton.disabled = true;
        //this.progressBar.mode = 'indeterminate';
        this.isSaving = true;
        this.appLoaderService.open('Saving cancer screening..');
        var data = {
            id: this.observation && this.observation.id || null,
            patient: this.patient,
            date: this.entity.dateScreened.format(DATE_FORMAT),
            facility: this.patient.facility,
            type: 'CERVICAL_CANCER_SCREENING',
            data: {
                cervicalCancerScreening: Object.assign({}, this.entity, {
                    dateScreened: this.entity.dateScreened != null && this.entity.dateScreened.isValid() ?
                        this.entity.dateScreened.format(DATE_FORMAT) : null,
                    dateTreated: this.entity.dateTreated != null && this.entity.dateTreated.isValid() ?
                        this.entity.dateTreated.format(DATE_FORMAT) : null,
                })
            }
        };
        if (!!this.observation.id) {
            this.subscribeToSaveResponse(this.screeningService.update(data));
        }
        else {
            this.subscribeToSaveResponse(this.screeningService.save(data));
        }
    };
    CervicalCancerScreeningComponent.prototype.subscribeToSaveResponse = function (result) {
        var _this = this;
        result.subscribe(function (res) { return _this.onSaveSuccess(res.body); }, function (res) {
            _this.onSaveError();
            _this.onError(res.message);
        });
    };
    CervicalCancerScreeningComponent.prototype.onSaveSuccess = function (result) {
        this.appLoaderService.close();
        this.isSaving = false;
        this.notification.showInfo('Cancer screening successfully saved');
        this.previousState();
    };
    CervicalCancerScreeningComponent.prototype.onSaveError = function () {
        this.isSaving = false;
        this.appLoaderService.close();
        //this.submitButton.disabled = true;
        this.notification.showError('Error occurred saving cancer screening; try again');
        //this.progressBar.mode = 'determinate';
    };
    CervicalCancerScreeningComponent.prototype.onError = function (errorMessage) {
        this.appLoaderService.close();
        this.notification.showError(errorMessage);
    };
    CervicalCancerScreeningComponent.ctorParameters = function () { return [
        { type: ClinicService },
        { type: CervicalCancerScreeningService },
        { type: NotificationService },
        { type: ActivatedRoute },
        { type: AppLoaderService }
    ]; };
    CervicalCancerScreeningComponent = tslib_1.__decorate([
        Component({
            selector: 'cancer-screening',
            template: "<div class=\"lamis-edit-form\">\n    <div class=\"lamis-edit-form-container\">\n        <form name=\"form\" role=\"form\" novalidate (ngSubmit)=\"save()\" #screeningForm=\"ngForm\">\n            <mat-card class=\"default\">\n                <mat-card-content *ngIf=\"patient\">\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <mat-form-field class=\"full-width\">\n                                <input matInput [matDatepicker]=\"picker\"\n                                       placeholder=\"Date of Screening\"\n                                       [(ngModel)]=\"entity.dateScreened\"\n                                       #visit=\"ngModel\"\n                                       [max]=\"today\"\n                                       [min]=\"patient.dateBirth\"\n                                       name=\"visit\"\n                                       required>\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]=\"picker\">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker></mat-datepicker>\n                                <mat-error\n                                        *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)\">\n                                    Date of Screening is required\n                                </mat-error>\n                                <mat-error\n                                        *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)\">\n                                    Date of Screening cannot be before {{patient.dateBirth}}\n                                </mat-error>\n                                <mat-error\n                                        *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)\">\n                                    Date of Screening cannot be in the future\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <mat-form-field class=\"full-width\">\n                                <mat-label>Screening Type</mat-label>\n                                <mat-select name=\"type\" [(ngModel)]=\"entity.screeningType\" #type=\"ngModel\" required>\n                                    <mat-option></mat-option>\n                                    <mat-option [value]=\"'FIRST_TIME'\">First Time</mat-option>\n                                    <mat-option [value]=\"'FOLLOWUP'\">Followup after previous negative result or\n                                        suspected cancer\n                                    </mat-option>\n                                    <mat-option [value]=\"'POST_TREATMENT_FOLLOWUP'\">Post-treatment Followup</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf=\"type.errors && (type.dirty || type.touched) && (type.errors.required)\">\n                                    Screening type is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <mat-form-field class=\"full-width\">\n                                <mat-label>Screening Method</mat-label>\n                                <mat-select name=\"method\" [(ngModel)]=\"entity.screeningMethod\" #method=\"ngModel\"\n                                            required>\n                                    <mat-option></mat-option>\n                                    <mat-option [value]=\"'VIA'\">Visual Inspection with Acetric Acid (VIA)</mat-option>\n                                    <mat-option [value]=\"'VILI'\">Visual Inspection with Lugos Iodine (VILI)</mat-option>\n                                    <mat-option [value]=\"'PAP_SMEAR'\">PAP Smear</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf=\"method.errors && (method.dirty || method.touched) && (method.errors.required)\">\n                                    Screening method is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <mat-form-field class=\"full-width\">\n                                <mat-label>Result of Screening</mat-label>\n                                <mat-select name=\"result\" [(ngModel)]=\"entity.screeningResult\" #result=\"ngModel\"\n                                            required>\n                                    <mat-option></mat-option>\n                                    <mat-option [value]=\"'NEGATIVE'\">Negative</mat-option>\n                                    <mat-option [value]=\"'POSITIVE'\">Positive</mat-option>\n                                    <mat-option [value]=\"'SUSPICIOUS'\">Suspicious Cancerous Lesions</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf=\"result.errors && (result.dirty || result.touched) && (result.errors.required)\">\n                                    Result of Screening is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-md-6\" *ngIf=\"entity.screeningResult === 'POSITIVE'\">\n                            <mat-checkbox [(ngModel)]=\"entity.referredForTreatment\"\n                                          name=\"uibn\"\n                            >\n                                Referred for Treatment?\n                            </mat-checkbox>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"entity.referredForTreatment\">\n                        <div class=\"col-md-6\">\n                            <mat-form-field class=\"full-width\" *ngIf=\"entity.dateScreened\">\n                                <input matInput [matDatepicker]=\"picker1\"\n                                       placeholder=\"Date Treated\"\n                                       [(ngModel)]=\"entity.dateTreated\"\n                                       #treat=\"ngModel\"\n                                       [max]=\"today\"\n                                       [min]=\"entity.dateScreened\"\n                                       name=\"treat\"\n                                       required>\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]=\"picker1\">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker1></mat-datepicker>\n                                <mat-error\n                                        *ngIf=\"treat.errors && (treat.dirty || treat.touched) && (treat.errors.required)\">\n                                    Date Treated is required\n                                </mat-error>\n                                <mat-error\n                                        *ngIf=\"treat.errors && (treat.dirty || treat.touched) && (treat.errors.min)\">\n                                    Date Treated cannot be before {{entity.dateScreened}}\n                                </mat-error>\n                                <mat-error\n                                        *ngIf=\"treat.errors && (treat.dirty || treat.touched) && (treat.errors.max)\">\n                                    Date Treated cannot be in the future\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <mat-form-field class=\"full-width\">\n                                <mat-label>Precancerous Lesions Treatment Method</mat-label>\n                                <mat-select name=\"pc\" [(ngModel)]=\"entity.precancerousLesionsTreatmentMethod\"\n                                            #pc=\"ngModel\" required>\n                                    <mat-option></mat-option>\n                                    <mat-option [value]=\"'CRYOTHERAPY'\">Cryotherapy</mat-option>\n                                    <mat-option [value]=\"'THERMAL_ABLATION'\">Thermal Ablation/ Thermocoagulation\n                                    </mat-option>\n                                    <mat-option [value]=\"'LEETZ_LEEP'\">LEETZ/ LEEP</mat-option>\n                                    <mat-option [value]=\"'CONIZATION'\">Conization Knifer/ Lagor</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf=\"pc.errors && (pc.dirty || pc.touched) && (pc.errors.required)\">\n                                    Treatment method is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </mat-card-content>\n                <mat-card-actions class=\"lamis-edit-form-actions\">\n                    <button mat-raised-button type=\"button\" (click)=\"previousState()\">Back</button>\n                    <button mat-raised-button color='primary'\n                            [disabled]=\"screeningForm.invalid || isSaving\"\n                            type=\"submit\">\n                        {{!!observation ? 'Update' : 'Save'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n"
        }),
        tslib_1.__metadata("design:paramtypes", [ClinicService,
            CervicalCancerScreeningService,
            NotificationService,
            ActivatedRoute,
            AppLoaderService])
    ], CervicalCancerScreeningComponent);
    return CervicalCancerScreeningComponent;
}());
export { CervicalCancerScreeningComponent };
//# sourceMappingURL=data:application/json;base64,