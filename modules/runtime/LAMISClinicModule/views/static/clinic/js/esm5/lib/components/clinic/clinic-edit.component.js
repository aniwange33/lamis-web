import * as tslib_1 from "tslib";
import {Component} from '@angular/core';
import {ClinicService} from '../../services/clinic.service';
import {NotificationService} from '@alfresco/adf-core';
import {ActivatedRoute} from '@angular/router';
import * as moment_ from 'moment';
import {AppLoaderService, entityCompare} from '@lamis/web-core';
import {ColumnMode} from '@swimlane/ngx-datatable';

var moment = moment_;
var ClinicEditComponent = /** @class */ (function () {
    function ClinicEditComponent(clinicService, notification, activatedRoute, appLoaderService) {
        this.clinicService = clinicService;
        this.notification = notification;
        this.activatedRoute = activatedRoute;
        this.appLoaderService = appLoaderService;
        this.error = false;
        this.today = moment();
        this.visitDates = [];
        this.selectedClinicAdr = [];
        this.oiList = [];
        this.adhereList = [];
        this.ColumnMode = ColumnMode;
        this.adr = false;
    }

    ClinicEditComponent.prototype.createEntity = function () {
        return {};
    };
    ClinicEditComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.clinicService.opportunisticInfections().subscribe(function (res) {
            return _this.opportunisticInfections = res;
        });
        this.clinicService.adheres().subscribe(function (res) {
            return _this.adheres = res;
        });
        this.isSaving = false;
        this.clinicService.getRegimenLines().subscribe(function (res) {
            _this.regimenLines = res;
        });
        this.activatedRoute.data.subscribe(function (_a) {
            var entity = _a.entity;
            _this.commence = !!_this.activatedRoute.snapshot.data['commence'];
            _this.entity = !!entity && entity.body ? entity.body : entity;
            if (_this.entity === undefined) {
                _this.entity = _this.createEntity();
            }
            var patientId = _this.activatedRoute.snapshot.paramMap.get('patientId');
            _this.clinicService.getPatient(patientId).subscribe(function (res) {
                _this.entity.patient = res;
                _this.entity.facility = res.facility;
                _this.dateBirth = res.dateBirth;
                _this.dateRegistration = res.dateRegistration;
                _this.clinicService.getVisitDatesByPatient(_this.entity.patient.id).subscribe(function (res) {
                    _this.visitDates = res;
                });
            });
            if (_this.entity.commence && _this.entity.regimenType) {
                _this.regimenLineChange(_this.entity.regimenType);
            }
            _this.commence = _this.commence || _this.entity.commence;
            if (_this.commence) {
                _this.entity.commence = true;
                if (_this.entity.regimenType) {
                    _this.regimenLineChange(_this.entity.regimenType);
                }
                if (_this.entity.patient.statusAtRegistration === 'ART_TRANSFER_IN') {
                    _this.dateRegistration = _this.entity.patient.dateRegistration.clone().subtract(10, 'years');
                    if (_this.dateRegistration.isBefore(_this.entity.patient.dateBirth)) {
                        _this.dateRegistration = _this.entity.patient.dateBirth.clone().add(3, 'months');
                    }
                }
            }
            if (_this.entity.id) {
                _this.appointmentMin = _this.entity.dateVisit.clone().add(14, 'days');
                _this.appointmentMax = _this.entity.dateVisit.clone().add(6, 'months');
                _this.clinicService.getAdhereByClinic(_this.entity.id).subscribe(function (res) {
                    _this.adhereList = res.map(function (ca) {
                        return ca.adhere;
                    });
                });
                _this.clinicService.adverseDrugReactions().subscribe(function (res1) {
                    _this.adverseDrugReactions = res1;
                    _this.clinicService.getAdverseDrugReactionsByClinic(_this.entity.id).subscribe(function (res) {
                        if (res.body && res.body.length > 0) {
                            _this.adr = true;
                        }
                        _this.adverseDrugReactions.forEach(function (adr) {
                            var found = false;
                            if (res.body) {
                                res.body.forEach(function (cadr) {
                                    if (cadr.adverseDrugReaction.id === adr.id) {
                                        found = true;
                                        _this.selectedClinicAdr.push(cadr);
                                    }
                                });
                            }
                            if (!found) {
                                _this.selectedClinicAdr.push({
                                    adverseDrugReaction: adr
                                });
                            }
                        });
                        _this.selectedClinicAdr = tslib_1.__spread(_this.selectedClinicAdr);
                    });
                });
                _this.clinicService.getOpportunisticInfectionsByClinic(_this.entity.id).subscribe(function (res) {
                    _this.oiList = res.map(function (co) {
                        return co.opportunisticInfection;
                    });
                });
            } else {
                _this.clinicService.adverseDrugReactions().subscribe(function (res) {
                    _this.adverseDrugReactions = res;
                    _this.adverseDrugReactions.forEach(function (adr) {
                        _this.selectedClinicAdr.push({
                            adverseDrugReaction: adr
                        });
                    });
                });
                _this.selectedClinicAdr = tslib_1.__spread(_this.selectedClinicAdr);
            }
        });
    };
    ClinicEditComponent.prototype.updateValue = function (event, cell, row) {
        console.log('Edit', event, cell, row);
        this.selectedClinicAdr = tslib_1.__spread(this.selectedClinicAdr.map(function (cadr) {
            if (cadr.adverseDrugReaction.id === row.id) {
                cadr.severity = event;
            }
            return cadr;
        }));
        console.log('UPDATED!', row, event);
    };
    ClinicEditComponent.prototype.filterDates = function (date) {
        var exists = false;
        this.visitDates.forEach(function (d) {
            if (date.diff(d, 'days') === 0) {
                exists = true;
            }
        });
        return (this.entity.id && date.diff(this.entity.dateVisit, 'days') === 0) || !exists;
    };
    ClinicEditComponent.prototype.dateChanged = function (date) {
        this.appointmentMax = date.clone().add(6, 'months');
        this.lmpMin = date.clone().subtract(2, 'years');
        this.appointmentMin = date.clone().add(14, 'days');
    };
    ClinicEditComponent.prototype.entityCompare = function (e1, e2) {
        return entityCompare(e1, e2);
    };
    ClinicEditComponent.prototype.previousState = function () {
        window.history.back();
    };
    ClinicEditComponent.prototype.save = function () {
        this.isSaving = true;
        var vm = {
            clinic: this.entity,
            adrList: this.selectedClinicAdr.filter(function (cadr) {
                return !!cadr.severity;
            }),
            oiList: this.oiList,
            adhereList: this.adhereList
        };
        this.appLoaderService.open('Saving clinic visit..');
        if (this.entity.id !== undefined) {
            this.subscribeToSaveResponse(this.clinicService.update(vm));
        } else {
            this.subscribeToSaveResponse(this.clinicService.create(vm));
        }
    };
    ClinicEditComponent.prototype.regimenLineChange = function (type) {
        var _this = this;
        this.clinicService.getRegimenByLine(type.id).subscribe(function (res) {
            return _this.regimens = res;
        });
    };
    ClinicEditComponent.prototype.subscribeToSaveResponse = function (result) {
        var _this = this;
        result.subscribe(function (res) {
            return _this.onSaveSuccess(res.body);
        }, function (res) {
            _this.onSaveError();
            _this.onError(res.message);
        });
    };
    ClinicEditComponent.prototype.onSaveSuccess = function (result) {
        this.appLoaderService.close();
        this.isSaving = false;
        this.notification.openSnackMessage('Clinic visit successfully saved');
        this.previousState();
    };
    ClinicEditComponent.prototype.onSaveError = function () {
        this.isSaving = false;
        this.appLoaderService.close();
        this.error = true;
        //this.submitButton.disabled = true;
        this.notification.showError('Error occurred saving clinic visit; try again');
        //this.progressBar.mode = 'determinate';
    };
    ClinicEditComponent.prototype.onError = function (errorMessage) {
        this.appLoaderService.close();
        this.notification.showError(errorMessage);
    };
    ClinicEditComponent.ctorParameters = function () {
        return [
            {type: ClinicService},
            {type: NotificationService},
            {type: ActivatedRoute},
            {type: AppLoaderService}
        ];
    };
    ClinicEditComponent = tslib_1.__decorate([
        Component({
            selector: 'lamis-clinic-edit',
            template: "<div class=\"lamis-edit-form\">\r\n    <div class=\"lamis-edit-form-container\">\r\n        <form name=\"form\" role=\"form\" novalidate (ngSubmit)=\"save()\" #clinicForm=\"ngForm\">\r\n            <mat-card class=\"default\">\r\n                <mat-card-content>\r\n                    <ng-container *ngIf=\"commence === true\">\r\n                        <div>\r\n                            <mat-form-field class=\"full-width\">\r\n                                <input matInput [matDatepicker]=\"picker\"\r\n                                       placeholder=\"ART Start Date\"\r\n                                       [(ngModel)]=\"entity.dateVisit\"\r\n                                       #visit=\"ngModel\"\r\n                                       (dateChange)=\"dateChanged($event.value)\"\r\n                                       [matDatepickerFilter]=\"filterDates.bind(this)\"\r\n                                       [max]=\"today\"\r\n                                       [min]=\"dateRegistration\"\r\n                                       name=\"visit\"\r\n                                       required>\r\n                                <mat-datepicker-toggle\r\n                                        matSuffix\r\n                                        [for]=\"picker\">\r\n                                </mat-datepicker-toggle>\r\n                                <mat-datepicker #picker></mat-datepicker>\r\n                                <mat-error\r\n                                        *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)\">\r\n                                    ART Start Date is required\r\n                                </mat-error>\r\n                                <mat-error\r\n                                        *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)\">\r\n                                    Date of visit cannot be before {{dateRegistration | date: 'dd MMM, yyyy'}}\r\n                                </mat-error>\r\n                                <mat-error\r\n                                        *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)\">\r\n                                    ART Start Date cannot be in the future\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-6\">\r\n                                <mat-form-field class=\"full-width\">\r\n                                    <input matInput placeholder=\"CD4 at start of ART\" [min]=\"0\" type=\"number\"\r\n                                           #cd4=\"ngModel\" name=\"cd4\" [(ngModel)]=\"entity.cd4\"/>\r\n                                    <mat-error\r\n                                            *ngIf=\"cd4.errors && (cd4.dirty || cd4.touched) && (cd4.errors.min)\">\r\n                                        Minimum CD4 is 0\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div class=\"col-md-6\">\r\n                                <mat-form-field class=\"full-width\">\r\n                                    <input matInput placeholder=\"CD4 %\" [min]=\"0\" [max]=\"100\" type=\"number\"\r\n                                           #cd4p=\"ngModel\" name=\"cd4p\" [(ngModel)]=\"entity.cd4p\"/>\r\n                                    <mat-error\r\n                                            *ngIf=\"cd4p.errors && (cd4p.dirty || cd4p.touched) && (cd4p.errors.min)\">\r\n                                        Minimum CD4 % is 0\r\n                                    </mat-error>\r\n                                    <mat-error\r\n                                            *ngIf=\"cd4p.errors && (cd4p.dirty || cd4p.touched) && (cd4p.errors.max)\">\r\n                                        Maximum CD4 % is 100\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-6\">\r\n                                <mat-form-field class=\"full-width\">\r\n                                    <mat-select [(ngModel)]=\"entity.regimenType\"\r\n                                                placeholder=\"Original Regimen Line\"\r\n                                                #rtype=\"ngModel\" required name=\"rt\"\r\n                                                [compareWith]=\"entityCompare\"\r\n                                                (selectionChange)=\"regimenLineChange($event.value)\">\r\n                                        <mat-option>None</mat-option>\r\n                                        <mat-option *ngFor=\"let line of regimenLines\"\r\n                                                    [value]=\"line\">{{line.description}}</mat-option>\r\n                                        <mat-error\r\n                                                *ngIf=\"rtype.errors && (rtype.dirty || rtype.touched) && (rtype.errors.required)\">\r\n                                            Regimen Line is required\r\n                                        </mat-error>\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div class=\"col-md-6\">\r\n                                <mat-form-field class=\"full-width\">\r\n                                    <mat-select [(ngModel)]=\"entity.regimen\"\r\n                                                placeholder=\"Original Regimen\"\r\n                                                [compareWith]=\"entityCompare\"\r\n                                                #rm=\"ngModel\" required name=\"rm\">\r\n                                        <mat-option>None</mat-option>\r\n                                        <mat-option *ngFor=\"let regimen of regimens\"\r\n                                                    [value]=\"regimen\">{{regimen.description}}</mat-option>\r\n                                        <mat-error\r\n                                                *ngIf=\"rm.errors && (rm.dirty || rm.touched) && (rm.errors.required)\">\r\n                                            Regimen is required\r\n                                        </mat-error>\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </ng-container>\r\n                    <div *ngIf=\"commence === false || commence === undefined\">\r\n                        <mat-form-field class=\"full-width\">\r\n                            <input matInput [matDatepicker]=\"picker\"\r\n                                   placeholder=\"Date of Visit\"\r\n                                   [(ngModel)]=\"entity.dateVisit\"\r\n                                   [matDatepickerFilter]=\"filterDates.bind(this)\"\r\n                                   #visit=\"ngModel\"\r\n                                   (dateChange)=\"dateChanged($event.value)\"\r\n                                   [max]=\"today\"\r\n                                   [min]=\"dateRegistration\"\r\n                                   name=\"visit\"\r\n                                   required>\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]=\"picker\">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)\">\r\n                                Date of visit is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)\">\r\n                                Date of visit cannot be before {{dateRegistration | date: 'dd MMM, yyyy'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)\">\r\n                                Date of visit cannot be in the future\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class=\"full-width\">\r\n                            <mat-select [(ngModel)]=\"entity.clinicStage\"\r\n                                        placeholder=\"Clinical Stage\"\r\n                                        #clinicStage=\"ngModel\" name=\"cs\">\r\n                                <mat-option>None</mat-option>\r\n                                <mat-option [value]=\"'Stage I'\">Stage I</mat-option>\r\n                                <mat-option [value]=\"'Stage II'\">Stage II</mat-option>\r\n                                <mat-option [value]=\"'Stage III'\">Stage III</mat-option>\r\n                                <mat-option [value]=\"'Stage IV'\">Stage IV</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class=\"full-width\">\r\n                            <mat-select [(ngModel)]=\"entity.funcStatus\"\r\n                                        placeholder=\"Functional Status\"\r\n                                        #funcStatus=\"ngModel\" name=\"fs\">\r\n                                <mat-option>None</mat-option>\r\n                                <mat-option [value]=\"'Working'\">Working</mat-option>\r\n                                <mat-option [value]=\"'Ambulatory'\">Ambulatory</mat-option>\r\n                                <mat-option [value]=\"'Bedridden'\">Bedridden</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class=\"full-width\">\r\n                            <mat-select [(ngModel)]=\"entity.tbStatus\"\r\n                                        placeholder=\"TB Status\"\r\n                                        name=\"tb\"\r\n                                        #tbStatus=\"ngModel\">\r\n                                <mat-option>None</mat-option>\r\n                                <mat-option [value]=\"'No sign or symptoms of TB'\">No sign or symptoms of TB</mat-option>\r\n                                <mat-option [value]=\"'TB suspected and referred for evaluation'\">TB suspected and\r\n                                    referred\r\n                                    for evaluation\r\n                                </mat-option>\r\n                                <mat-option [value]=\"'Currently on INH prophylaxis'\">Currently on INH prophylaxis\r\n                                </mat-option>\r\n                                <mat-option [value]=\"'Currently on TB treatment'\">Currently on TB treatment</mat-option>\r\n                                <mat-option [value]=\"'TB positive not on TB drugs'\">TB positive not on TB drugs\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class=\"full-width\">\r\n                            <input matInput placeholder=\"Body weight(Kg)\" [min]=\"0\" [max]=\"250\" type=\"number\"\r\n                                   #weight=\"ngModel\" name=\"weight\" [(ngModel)]=\"entity.bodyWeight\"/>\r\n                            <mat-error\r\n                                    *ngIf=\"weight.errors && (weight.dirty || weight.touched) && (weight.errors.min)\">\r\n                                Minimum body weight is 0\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"weight.errors && (weight.dirty || weight.touched) && (weight.errors.max)\">\r\n                                Maximum body weight is 250\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class=\"full-width\">\r\n                            <input matInput placeholder=\"Height (m)\" [min]=\"0\" [max]=\"1.8\" type=\"number\"\r\n                                   #height=\"ngModel\" name=\"height\" [(ngModel)]=\"entity.height\"/>\r\n                            <mat-error\r\n                                    *ngIf=\"height.errors && (height.dirty || height.touched) && (height.errors.min)\">\r\n                                Minimum height is 0\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"height.errors && (height.dirty || height.touched) && (height.errors.max)\">\r\n                                Maximum height is 1.8m\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <fieldset>\r\n                        <h6>Blood Pressure(mmHg)</h6>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-3\">\r\n                                <mat-form-field class=\"full-width\">\r\n                                    <input matInput placeholder=\"Systolic\"\r\n                                           name=\"bp1\" type=\"number\"\r\n                                           [max]=\"190\"\r\n                                           [min]=\"70\"\r\n                                           [required]=\"!!entity.bp2\"\r\n                                           #bp1=\"ngModel\" [(ngModel)]=\"entity.bp1\"/>\r\n                                    <mat-error\r\n                                            *ngIf=\"bp1.errors && (bp1.dirty || bp1.touched) && (bp1.errors.max)\">\r\n                                        Maximum Systolic is 190\r\n                                    </mat-error>\r\n                                    <mat-error\r\n                                            *ngIf=\"bp1.errors && (bp1.dirty || bp1.touched) && (bp1.errors.min)\">\r\n                                        Minimum Systolic is 70\r\n                                    </mat-error>\r\n                                    <mat-error\r\n                                            *ngIf=\"bp1.errors && (bp1.dirty || bp1.touched) && (bp1.errors.required)\">\r\n                                        Systolic is required\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div class=\"col-md-3\">\r\n                                <mat-form-field class=\"full-width\">\r\n                                    <input matInput placeholder=\"Diastolic\"\r\n                                           name=\"bp2\" type=\"number\"\r\n                                           [max]=\"100\"\r\n                                           [min]=\"40\"\r\n                                           [required]=\"!!entity.bp1\"\r\n                                           #bp2=\"ngModel\" [(ngModel)]=\"entity.bp2\"/>\r\n                                    <mat-error\r\n                                            *ngIf=\"bp2.errors && (bp2.dirty || bp2.touched) && (bp2.errors.max)\">\r\n                                        Maximum Diastolic is 100\r\n                                    </mat-error>\r\n                                    <mat-error\r\n                                            *ngIf=\"bp2.errors && (bp2.dirty || bp2.touched) && (bp2.errors.min)\">\r\n                                        Minimum Diastolic is 40\r\n                                    </mat-error>\r\n                                    <mat-error\r\n                                            *ngIf=\"bp2.errors && (bp2.dirty || bp2.touched) && (bp2.errors.required)\">\r\n                                        Diastolic is required\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </fieldset>\r\n                    <div *ngIf=\"entity.patient && entity.patient.gender === 'FEMALE'\">\r\n                        <mat-form-field class=\"full-width\">\r\n                            <mat-select [(ngModel)]=\"entity.pregnancyStatus\"\r\n                                        placeholder=\"Pregnancy Status\"\r\n                                        #pregStatus=\"ngModel\" name=\"ps\">\r\n                                <mat-option>None</mat-option>\r\n                                <mat-option [value]=\"1\">Not Pregnant</mat-option>\r\n                                <mat-option [value]=\"2\">Pregnant</mat-option>\r\n                                <mat-option [value]=\"3\">Breastfeeding</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf=\"entity.patient && entity.patient.gender === 'FEMALE' && lmpMin\">\r\n                        <mat-form-field class=\"full-width\">\r\n                            <input matInput [matDatepicker]=\"picker1\"\r\n                                   placeholder=\"LMP\"\r\n                                   [(ngModel)]=\"entity.lmp\"\r\n                                   #lmp=\"ngModel\"\r\n                                   [max]=\"entity.dateVisit\"\r\n                                   [min]=\"lmpMin\"\r\n                                   name=\"lmp\">\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]=\"picker1\">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker1></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf=\"lmp.errors && (lmp.dirty || lmp.touched) && (lmp.errors.max)\">\r\n                                LMP cannot be after {{entity.dateVisit | date: 'dd MMM, yyyy'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"lmp.errors && (lmp.dirty || lmp.touched) && (lmp.errors.min)\">\r\n                                LMP cannot be before {{lmpMin | date: 'dd MMM, yyyy'}}\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class=\"full-width\">\r\n                            <mat-select [(ngModel)]=\"oiList\"\r\n                                        placeholder=\"Opportunistic Infections\"\r\n                                        [compareWith]=\"entityCompare\"\r\n                                        name=\"ois\"\r\n                                        #oiIds=\"ngModel\" multiple>\r\n                                <mat-option>None</mat-option>\r\n                                <mat-option *ngFor=\"let oi of opportunisticInfections\"\r\n                                            [value]=\"oi\">{{oi.description}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-4\">\r\n                            <mat-checkbox [(ngModel)]=\"adr\"\r\n                                          name=\"ad\">Adverse Drug Reaction Screened?\r\n                            </mat-checkbox>\r\n                        </div>\r\n                        <div style=\"height: 300px; overflow-y: auto;\" *ngIf=\"adr\" class=\"col-md-8\">\r\n                            <adf-datatable [rows]=\"selectedClinicAdr\"\r\n                                           [stickyHeader]=\"true\">\r\n                                <data-columns>\r\n                                    <data-column key=\"adverseDrugReaction.description\" title=\"Description\"\r\n                                                 sortable=\"true\"></data-column>\r\n                                    <data-column key=\"severity\" title=\"Severity\" sortable=\"false\">\r\n                                        <ng-template let-context=\"$implicit\">\r\n                                            <mat-form-field class=\"full-width\">\r\n                                                <mat-select autofocus\r\n                                                            [value]=\"context.row.getValue('severity')\"\r\n                                                            name=\"severity\"\r\n                                                            (valueChange)=\"updateValue($event, 'severity', context.row.getValue('adverseDrugReaction'))\">\r\n                                                    <mat-option>None</mat-option>\r\n                                                    <mat-option [value]=\"'Grade 1'\">Grade 1</mat-option>\r\n                                                    <mat-option [value]=\"'Grade 2'\">Grade 2</mat-option>\r\n                                                    <mat-option [value]=\"'Grade 3'\">Grade 3</mat-option>\r\n                                                    <mat-option [value]=\"'Grade 4'\">Grade 4</mat-option>\r\n                                                </mat-select>\r\n                                            </mat-form-field>\r\n                                        </ng-template>\r\n                                    </data-column>\r\n                                </data-columns>\r\n                            </adf-datatable>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <mat-form-field class=\"full-width\">\r\n                                <mat-select [(ngModel)]=\"entity.adherenceLevel\"\r\n                                            placeholder=\"Level of Adherence\"\r\n                                            #adherence=\"ngModel\" name=\"al\">\r\n                                    <mat-option>None</mat-option>\r\n                                    <mat-option [value]=\"'Good'\">Good</mat-option>\r\n                                    <mat-option [value]=\"'Fair'\">Fair</mat-option>\r\n                                    <mat-option [value]=\"'Poor'\">Poor</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <mat-form-field class=\"full-width\"\r\n                                            *ngIf=\"entity.adherenceLevel === 'Fair' || entity.adherenceLevel === 'Poor'\">\r\n                                <mat-select [(ngModel)]=\"adhereList\"\r\n                                            placeholder=\"Adherence\"\r\n                                            name=\"ads\"\r\n                                            [compareWith]=\"entityCompare\"\r\n                                            #adrIds=\"ngModel\" multiple>\r\n                                    <mat-option>None</mat-option>\r\n                                    <mat-option *ngFor=\"let adhere of adheres\"\r\n                                                [value]=\"adhere\">{{adhere.description}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div *ngIf=\"!!appointmentMin\">\r\n                        <mat-form-field class=\"full-width\">\r\n                            <input matInput [matDatepicker]=\"picker2\"\r\n                                   placeholder=\"Date of Next Appointment\"\r\n                                   [(ngModel)]=\"entity.nextAppointment\"\r\n                                   #na=\"ngModel\"\r\n                                   [min]=\"appointmentMin\"\r\n                                   [max]=\"appointmentMax\"\r\n                                   name=\"na\"\r\n                                   required>\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]=\"picker2\">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker2></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf=\"na.errors && (na.dirty || na.touched) && (na.errors.required)\">\r\n                                Date of next appointment is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"na.errors && (na.dirty || na.touched) && (na.errors.max)\">\r\n                                Date of next appointment cannot be after {{appointmentMax | date: 'dd MMM, yyyy'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"na.errors && (na.dirty || na.touched) && (na.errors.min)\">\r\n                                Date of next appointment cannot be before {{appointmentMin | date: 'dd MMM, yyyy'}}\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class=\"full-width\">\r\n                            <textarea matInput placeholder=\"Clinical Notes\"\r\n                                      cols=\"30\"\r\n                                      rows=\"3\"\r\n                                      name=\"notes\"\r\n                                      #note=\"ngModel\" [(ngModel)]=\"entity.notes\"></textarea>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <mat-card-actions class=\"lamis-edit-form-actions\">\r\n                        <button mat-raised-button type=\"button\" (click)=\"previousState()\">Back</button>\r\n                        <button mat-raised-button color='primary'\r\n                                [disabled]=\"clinicForm.invalid || isSaving\"\r\n                                type=\"submit\">\r\n                            {{entity.id !== undefined ? 'Update' : 'Save'}}\r\n                        </button>\r\n                    </mat-card-actions>\r\n                </mat-card-content>\r\n            </mat-card>\r\n        </form>\r\n    </div>\r\n</div>\r\n"
        }),
        tslib_1.__metadata("design:paramtypes", [ClinicService,
            NotificationService,
            ActivatedRoute,
            AppLoaderService])
    ], ClinicEditComponent);
    return ClinicEditComponent;
}());
export {ClinicEditComponent};
//# sourceMappingURL=data:application/json;base64,
