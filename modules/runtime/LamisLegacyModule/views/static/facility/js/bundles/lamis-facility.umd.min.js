!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common/http"),require("@lamis/web-core"),require("@angular/common"),require("@angular/material"),require("@angular/router"),require("@alfresco/adf-core"),require("@angular/forms")):"function"==typeof define&&define.amd?define("lamis-facility",["exports","@angular/core","@angular/common/http","@lamis/web-core","@angular/common","@angular/material","@angular/router","@alfresco/adf-core","@angular/forms"],e):e((t=t||self)["lamis-facility"]={},t.ng.core,t.ng.common.http,t.webCore,t.ng.common,t.ng.material,t.ng.router,t.adfCore,t.ng.forms)}(this,(function(t,e,r,i,n,a,o,c,l){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */function s(t,e,r,i){var n,a=arguments.length,o=a<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,r,i);else for(var c=t.length-1;c>=0;c--)(n=t[c])&&(o=(a<3?n(o):a>3?n(e,r,o):n(e,r))||o);return a>3&&o&&Object.defineProperty(e,r,o),o}function f(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}var u=function(){function t(t,e){this.http=t,this.serverUrl=e,this.resourceUrl="",this.resourceUrl=e.SERVER_API_URL+"/api/facilities"}var n,a;return t.prototype.update=function(t){return this.http.post(this.resourceUrl+"/switch",t,{observe:"response"})},t.prototype.getFacilitiesByLga=function(t){return this.http.get(this.resourceUrl+"/lga/"+t,{observe:"body"})},t.prototype.getStates=function(){return this.http.get("/api/states")},t.prototype.getLgaByState=function(t){return this.http.get("/api/provinces/state/"+t)},t.prototype.getActive=function(){return this.http.get(this.resourceUrl+"/active",{observe:"response"})},t.ctorParameters=function(){return[{type:r.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[i.SERVER_API_URL_CONFIG]}]}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(r.HttpClient),e.ɵɵinject(i.SERVER_API_URL_CONFIG))},token:t,providedIn:"root"}),t=s([e.Injectable({providedIn:"root"}),(n=1,a=e.Inject(i.SERVER_API_URL_CONFIG),function(t,e){a(t,e,n)}),f("design:paramtypes",[r.HttpClient,Object])],t)}(),d=function(){function t(t,e){this.facilityService=t,this.notification=e}return t.prototype.ngOnInit=function(){var t=this;this.facilityService.getStates().subscribe((function(e){return t.states=e})),this.facility=this.facilityService.getActive().subscribe((function(e){e.body&&(t.facility=e.body)}))},t.prototype.entityCompare=function(t,e){return i.entityCompare(t,e)},t.prototype.stateChanged=function(t){var e=this;this.facilityService.getLgaByState(t).subscribe((function(t){return e.lgas=t}))},t.prototype.lgaChanged=function(t){var e=this;this.facilityService.getFacilitiesByLga(t).subscribe((function(t){return e.facilities=t}))},t.prototype.setActive=function(){var t=this;this.facilityService.update(this.active).subscribe((function(e){e.ok&&e.body&&t.notification.showInfo("Facility switched to "+e.body.name)}))},t.ctorParameters=function(){return[{type:u},{type:c.NotificationService}]},t=s([e.Component({selector:"lamis-facility",template:'<div class="lamis-edit-form">\r\n    <div class="lamis-edit-form-container">\r\n        <mat-card>\r\n            <mat-card-header>\r\n                Switch Facility\r\n            </mat-card-header>\r\n            <form name="form" role="form" novalidate (ngSubmit)="setActive()" #facilityForm="ngForm">\r\n                <mat-card-content>\r\n                    <div class="row">\r\n                        <div class="col-md-12">\r\n                            Active Facility: {{facility.name}}\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-select placeholder="State"\r\n                                            (selectionChange)="stateChanged($event.value)">\r\n                                    <mat-option *ngFor="let state of states"\r\n                                                [value]="state.id">{{state.name}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-select placeholder="LGA"\r\n                                            (selectionChange)="lgaChanged($event.value)">\r\n                                    <mat-option *ngFor="let lga of lgas"\r\n                                                [value]="lga.id">{{lga.name}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-select placeholder="Facility"\r\n                                            [(ngModel)]="active"\r\n                                            required\r\n                                            [compareWith]="entityCompare"\r\n                                            #fac="ngModel"\r\n                                            name="facility">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option *ngFor="let facility of facilities"\r\n                                                [value]="facility">{{facility.name}}</mat-option>\r\n                                </mat-select>\r\n                                <mat-error *ngIf="fac.errors">\r\n                                    Facility is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <mat-divider></mat-divider>\r\n                </mat-card-content>\r\n                <mat-card-actions class="lamis-edit-form-actions">\r\n                    <button mat-raised-button color="primary" [disabled]="facilityForm.invalid">Switch Facility</button>\r\n                </mat-card-actions>\r\n            </form>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n',styles:[".bold{font-weight:700}"]}),f("design:paramtypes",[u,c.NotificationService])],t)}(),m=[{path:"",data:{title:"Facility Switch",breadcrumb:"FACILITY SWITCH"},children:[{path:"",component:d,data:{authorities:["ROLE_USER"],title:"Facility Switch",breadcrumb:"FACILITY SWITCH"}}]}],p=function(){function t(){}return t=s([e.NgModule({declarations:[d],imports:[n.CommonModule,a.MatInputModule,a.MatIconModule,a.MatDividerModule,a.MatCardModule,a.MatSelectModule,a.MatButtonModule,l.FormsModule,o.RouterModule.forChild(m)],exports:[d],entryComponents:[],providers:[]})],t)}();t.FacilityModule=p,t.FacilityService=u,t.ɵa=d,t.ɵb=m,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=lamis-facility.umd.min.js.map