!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common/http"),require("@lamis/web-core"),require("@angular/common"),require("@angular/material"),require("@angular/router"),require("@alfresco/adf-core"),require("@angular/forms"),require("rxjs"),require("rxjs/operators"),require("@covalent/core"),require("@ng-bootstrap/ng-bootstrap")):"function"==typeof define&&define.amd?define("lamis-facility-1.2.0",["exports","@angular/core","@angular/common/http","@lamis/web-core","@angular/common","@angular/material","@angular/router","@alfresco/adf-core","@angular/forms","rxjs","rxjs/operators","@covalent/core","@ng-bootstrap/ng-bootstrap"],e):e(((t=t||self)["lamis-facility-1"]=t["lamis-facility-1"]||{},t["lamis-facility-1"][2]=t["lamis-facility-1"][2]||{},t["lamis-facility-1"][2][0]={}),t.ng.core,t.ng.common.http,t.webCore,t.ng.common,t.ng.material,t.ng.router,t.adfCore,t.ng.forms,t.rxjs,t.rxjs.operators,t.core$1,t.ngBootstrap)}(this,(function(t,e,n,i,a,o,r,s,c,l,d,m,u){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function p(t,e,n,i){var a,o=arguments.length,r=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,n,i);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(r=(o<3?a(r):o>3?a(e,n,r):a(e,n))||r);return o>3&&r&&Object.defineProperty(e,n,r),r}function f(t,e){return function(n,i){e(n,i,t)}}var h=function(){function t(t,e){this.http=t,this.serverUrl=e,this.resourceUrl="",this.resourceUrl=e.SERVER_API_URL+"/api/facilities"}return t.prototype.update=function(t){return this.http.post(this.resourceUrl+"/switch",t,{observe:"response"})},t.prototype.getFacilitiesByLga=function(t){return this.http.get(this.resourceUrl+"/lga/"+t,{observe:"body"})},t.prototype.getStates=function(){return this.http.get("/api/states")},t.prototype.getLgaByState=function(t){return this.http.get("/api/provinces/state/"+t)},t.prototype.getActive=function(){return this.http.get(this.resourceUrl+"/active",{observe:"response"})},t.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[i.SERVER_API_URL_CONFIG]}]}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(n.HttpClient),e.ɵɵinject(i.SERVER_API_URL_CONFIG))},token:t,providedIn:"root"}),t=p([e.Injectable({providedIn:"root"}),f(1,e.Inject(i.SERVER_API_URL_CONFIG))],t)}(),y=function(){function t(t,e){this.facilityService=t,this.notification=e}return t.prototype.ngOnInit=function(){var t=this;this.facilityService.getStates().subscribe((function(e){return t.states=e})),this.facility=this.facilityService.getActive().subscribe((function(e){e.body&&(t.facility=e.body)}))},t.prototype.entityCompare=function(t,e){return i.entityCompare(t,e)},t.prototype.stateChanged=function(t){var e=this;this.facilityService.getLgaByState(t).subscribe((function(t){return e.lgas=t}))},t.prototype.lgaChanged=function(t){var e=this;this.facilityService.getFacilitiesByLga(t).subscribe((function(t){return e.facilities=t}))},t.prototype.setActive=function(){var t=this;this.facilityService.update(this.active).subscribe((function(e){e.ok&&e.body&&(t.facilityService.getActive().subscribe((function(e){e.body&&(t.facility=e.body)})),t.notification.showInfo("Facility switched to "+e.body.name))}))},t.ctorParameters=function(){return[{type:h},{type:s.NotificationService}]},t=p([e.Component({selector:"lamis-facility",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <mat-card>\n            <mat-card-header>\n                Switch Facility\n            </mat-card-header>\n            <form name="form" role="form" novalidate (ngSubmit)="setActive()" #facilityForm="ngForm">\n                <mat-card-content>\n                    <div class="row">\n                        <div class="col-md-12">\n                            Active Facility: {{facility.name}}\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-select placeholder="State"\n                                            (selectionChange)="stateChanged($event.value)">\n                                    <mat-option *ngFor="let state of states"\n                                                [value]="state.id">{{state.name}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-select placeholder="LGA"\n                                            (selectionChange)="lgaChanged($event.value)">\n                                    <mat-option *ngFor="let lga of lgas"\n                                                [value]="lga.id">{{lga.name}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-select placeholder="Facility"\n                                            [(ngModel)]="active"\n                                            required\n                                            [compareWith]="entityCompare"\n                                            #fac="ngModel"\n                                            name="facility">\n                                    <mat-option></mat-option>\n                                    <mat-option *ngFor="let facility of facilities"\n                                                [value]="facility">{{facility.name}}</mat-option>\n                                </mat-select>\n                                <mat-error *ngIf="fac.errors">\n                                    Facility is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <mat-divider></mat-divider>\n                </mat-card-content>\n                <mat-card-actions class="lamis-edit-form-actions">\n                    <button mat-raised-button color="primary" [disabled]="facilityForm.invalid">Switch Facility</button>\n                </mat-card-actions>\n            </form>\n        </mat-card>\n    </div>\n</div>\n',styles:[".bold{font-weight:700}"]})],t)}(),v=[{path:"",data:{title:"Facility Switch",breadcrumb:"FACILITY SWITCH"},children:[{path:"",component:y,data:{authorities:["ROLE_USER"],title:"Facility Switch",breadcrumb:"FACILITY SWITCH"}}]}],g=function(){function t(){}return t=p([e.NgModule({declarations:[y],imports:[a.CommonModule,o.MatInputModule,o.MatIconModule,o.MatDividerModule,o.MatCardModule,o.MatSelectModule,o.MatButtonModule,c.FormsModule,r.RouterModule.forChild(v)],exports:[y],entryComponents:[],providers:[]})],t)}(),b=function(){function t(t,e){this.http=t,this.serverUrl=e,this.resourceUrl="",this.resourceUrl=e.SERVER_API_URL+"/api/community-pharmacies"}return t.prototype.create=function(t){return this.http.post(this.resourceUrl,t,{observe:"response"})},t.prototype.update=function(t){return this.http.put(this.resourceUrl,t,{observe:"response"})},t.prototype.find=function(t){return this.http.get(this.resourceUrl+"/"+t,{observe:"response"})},t.prototype.delete=function(t){return this.http.delete(this.resourceUrl+"/"+t,{observe:"response"})},t.prototype.query=function(t){var e=i.createRequestOption(t);return this.http.get(this.resourceUrl,{params:e,observe:"response"})},t.prototype.getLgasByState=function(t){return this.http.get("/api/provinces/state/"+t)},t.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[i.SERVER_API_URL_CONFIG]}]}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(n.HttpClient),e.ɵɵinject(i.SERVER_API_URL_CONFIG))},token:t,providedIn:"root"}),t=p([e.Injectable({providedIn:"root"}),f(1,e.Inject(i.SERVER_API_URL_CONFIG))],t)}(),C=function(){function t(t,e,n,i,a){this.service=t,this.facilityService=e,this.notification=n,this.router=i,this.activatedRoute=a,this.page=0,this.loading=!1,this.itemsPerPage=10,this.currentSearch="",this.totalItems=0,this.display="list"}return t.prototype.ngOnInit=function(){var t=this;this.facilityService.getActive().subscribe((function(e){t.facility=e.body,t.onPageChange(0)}))},t.prototype.select=function(t){this.router.navigate(["..","community-pharmacies",t.obj.id,"view"],{relativeTo:this.activatedRoute})},t.prototype.onPageChange=function(t){this.page=t,this.loadAll(t-1)},t.prototype.loadPage=function(t){this.page=t,this.loadAll(t-1)},t.prototype.loadAll=function(t){var e=this;this.loading=!0,this.service.query({keyword:this.currentSearch,page:t<0?0:t,stateId:this.facility&&this.facility.state&&this.facility.state.id||0,size:this.itemsPerPage,sort:["id","asc"]}).subscribe((function(t){e.onSuccess(t.body,t.headers)}),(function(t){return e.onError(t)}))},t.prototype.onSuccess=function(t,e){this.communityPharmacies=t,this.totalItems=e.get("X-Total-Count"),this.loading=!1},t.prototype.onError=function(t){this.notification.openSnackMessage(t.message),this.loading=!1},t.ctorParameters=function(){return[{type:b},{type:h},{type:s.NotificationService},{type:r.Router},{type:r.ActivatedRoute}]},t=p([e.Component({selector:"community-pharmacies",template:'<div class="layout">\n    <div class="list-container">\n        <adf-datatable *ngIf="communityPharmacies"\n                       [rows]="communityPharmacies"\n                       [loading]="loading"\n                       [display]="display"\n                       (rowClick)="select($event.value)">\n            <data-columns>\n                <data-column key="name" title="Name" sortable="true"></data-column>\n                <data-column key="pin" title="PIN" sortable="true"></data-column>\n                <data-column key="phone" title="Telephone Number" sortable="true"></data-column>\n                <data-column key="address" title="Address" class="full-width ellipsis-cell"></data-column>\n                <data-column key="active" title="Active" sortable="true">\n                    <ng-template let-context="$implicit">\n                        <mat-checkbox [checked]="context.row.getValue(\'active\')"></mat-checkbox>\n                    </ng-template>\n                </data-column>\n            </data-columns>\n            <adf-loading-content-template>\n                <ng-template>\n                    <mat-progress-spinner\n                            class="adf-document-list-loading-margin"\n                            [color]="\'primary\'"\n                            [mode]="\'indeterminate\'">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n        </adf-datatable>\n    </div>\n    <adf-empty-content\n            *ngIf="!communityPharmacies"\n            icon="blur_on"\n            [title]="\'No Community Pharmacies found\'"\n            [subtitle]="\'No Community Pharmacies matching search criteria or no Community Pharmacies available\'">\n    </adf-empty-content>\n    <ngb-pagination [collectionSize]="totalItems"\n                    [(page)]="page"\n                    [pageSize]="itemsPerPage"\n                    [maxSize]="5"\n                    size="sm"\n                    [rotate]="true"\n                    [boundaryLinks]="true"\n                    (pageChange)="loadPage(page)">\n    </ngb-pagination>\n\n</div>\n<div class="fab-container">\n    <button mat-fab\n            [matTooltip]="\'Add New Community Pharmacy\'"\n            [routerLink]="[\'new\']">\n        <mat-icon>add</mat-icon>\n    </button>\n</div>\n'})],t)}(),S=function(){function t(t,e,n,i,a){this.router=t,this.route=e,this.service=n,this._dialogService=i,this.notificationService=a,this.properties=[]}return t.prototype.ngOnInit=function(){var t=this;this.route.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,t.buildProperties()}))},t.prototype.edit=function(){this.router.navigate(["/","admin","config","community-pharmacies",this.entity.id,"edit"])},t.prototype.delete=function(){var t=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this Community Pharmacy, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(e){e&&t.service.delete(t.entity.id).subscribe((function(e){e.ok?t.router.navigate(["admin","config","community-pharmacies"]):t.notificationService.showError("Error deleting Community Pharmacy, please try again")}))}))},t.prototype.buildProperties=function(){this.properties.push(new s.CardViewTextItemModel({label:"Name",key:"cs",value:this.entity.name})),this.properties.push(new s.CardViewTextItemModel({label:"Address",key:"fs",value:this.entity.address})),this.properties.push(new s.CardViewTextItemModel({label:"PIN",key:"fs",value:this.entity.pin})),this.properties.push(new s.CardViewTextItemModel({label:"Phone",key:"ts",value:this.entity.phone})),this.properties.push(new s.CardViewTextItemModel({label:"Email",key:"cd4p",value:this.entity.email})),this.properties.push(new s.CardViewBoolItemModel({label:"Active",key:"cd4p",value:this.entity.active}))},t.prototype.previousState=function(){window.history.back()},t.ctorParameters=function(){return[{type:r.Router},{type:r.ActivatedRoute},{type:b},{type:m.TdDialogService},{type:s.NotificationService}]},t=p([e.Component({selector:"community-pharmacy-details",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <mat-card>\n            <mat-card-header>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-card-view [properties]="properties" editable="false"></adf-card-view>\n            </mat-card-content>\n            <mat-card-actions class="lamis-edit-form-actions">\n                <button mat-button (click)="previousState()">Back</button>\n                <button mat-raised-button color="primary" (click)="edit()">Edit</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n'})],t)}(),I=function(){function t(t,e,n,i,a){this.service=t,this.notification=e,this.facilityService=n,this.activatedRoute=i,this.appLoaderService=a,this.states=[],this.lgas=[]}return t.prototype.createEntity=function(){return{}},t.prototype.ngOnInit=function(){var t=this;this.isSaving=!1,this.activatedRoute.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,void 0===t.entity&&(t.entity=t.createEntity(),t.entity.active=!0)})),this.facilityService.getActive().subscribe((function(e){var n=e.body;t.entity.state=n.state,t.states.push(t.entity.state),t.stateChange(n.state.id)}))},t.prototype.save=function(){this.isSaving=!0,this.appLoaderService.open("Saving Community Pharmacy.."),void 0!==this.entity.id?this.subscribeToSaveResponse(this.service.update(this.entity)):this.subscribeToSaveResponse(this.service.create(this.entity))},t.prototype.previousState=function(){window.history.back()},t.prototype.subscribeToSaveResponse=function(t){var e=this;t.subscribe((function(t){return e.onSaveSuccess(t.body)}),(function(t){e.onSaveError(),e.onError(t.message)}))},t.prototype.onSaveSuccess=function(t){this.appLoaderService.close(),this.isSaving=!1,this.notification.openSnackMessage("Community Pharmacy successfully saved"),this.previousState()},t.prototype.onSaveError=function(){this.isSaving=!1,this.appLoaderService.close(),this.notification.showError("Error occurred saving Community Pharmacy; try again")},t.prototype.onError=function(t){this.appLoaderService.close(),this.notification.showError(t)},t.prototype.stateChange=function(t){var e=this;this.service.getLgasByState(t).subscribe((function(t){return e.lgas=t}))},t.prototype.entityCompare=function(t,e){return i.entityCompare(t,e)},t.ctorParameters=function(){return[{type:b},{type:s.NotificationService},{type:h},{type:r.ActivatedRoute},{type:i.AppLoaderService}]},t=p([e.Component({selector:"community-pharmacy-edit",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #cpForm="ngForm">\n            <mat-card class="default">\n                <mat-card-content>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Name</mat-label>\n                                <input matInput name="name" #name="ngModel"\n                                       required\n                                       [(ngModel)]="entity.name"/>\n                                <mat-error\n                                        *ngIf="name.errors && (name.dirty || name.touched) && (name.errors.required)">\n                                    Community Pharmacy name is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>PIN</mat-label>\n                                <input matInput name="pin" #pin="ngModel"\n                                       required\n                                       [(ngModel)]="entity.pin"/>\n                                <mat-error\n                                        *ngIf="pin.errors && (pin.dirty || pin.touched) && (pin.errors.required)">\n                                    PIN is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>State</mat-label>\n                                <mat-select name="state" [(ngModel)]="entity.state"\n                                            [compareWith]="entityCompare"\n                                            required\n                                            #s="ngModel"\n                                            (selectionChange)="stateChange($event.value.id)">\n                                    <mat-option></mat-option>\n                                    <mat-option *ngFor="let state of states" [value]="state">{{state.name}}</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf="s.errors && (s.dirty || s.touched || !!entity.id) && (s.errors.required)">\n                                    State is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>LGA</mat-label>\n                                <mat-select name="lga" [(ngModel)]="entity.lga" required #l="ngModel"\n                                            [compareWith]="entityCompare">\n                                    <mat-option></mat-option>\n                                    <mat-option *ngFor="let lga of lgas" [value]="lga">{{lga.name}}</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf="l.errors && (l.dirty || l.touched || !!entity.id) && (l.errors.required)">\n                                    LGA is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Address</mat-label>\n                                <textarea matInput name="address" [(ngModel)]="entity.address" #address="ngModel"\n                                          rows="2" >\n                                </textarea>\n                                <mat-error\n                                        *ngIf="address.errors && (address.dirty || address.touched) && (address.errors.required)">\n                                    Community Pharmacy address is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Email</mat-label>\n                                <input matInput name="email" type="email" #email="ngModel"\n                                       [(ngModel)]="entity.email"/>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Telephone</mat-label>\n                                <input matInput name="phone" phoneNumber [(ngModel)]="entity.phone"\n                                       #phone="ngModel"/>\n                                <mat-error\n                                        *ngIf="phone.errors && (phone.dirty || phone.touched) && (phone.errors.invalidPhone)">\n                                    Invalid phone number\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-checkbox name="active" [(ngModel)]="entity.active">Active</mat-checkbox>\n                        </div>\n                    </div>\n                </mat-card-content>\n                <mat-card-actions class="lamis-edit-form-actions">\n                    <button mat-raised-button type="button" (click)="previousState()">Back</button>\n                    <button mat-raised-button color=\'primary\'\n                            [disabled]="cpForm.invalid || isSaving"\n                            type="submit">\n                        {{entity.id !== undefined ? \'Update\' : \'Save\'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n'})],t)}(),M=function(){function t(t){this.service=t}return t.prototype.resolve=function(t,e){var n=t.params.id?t.params.id:null;return n?this.service.find(n).pipe(d.filter((function(t){return t.ok})),d.map((function(t){return t.body}))):l.of({})},t.ctorParameters=function(){return[{type:b}]},t=p([e.Injectable()],t)}(),w=[{path:"",data:{title:"Community Pharmacies",breadcrumb:"COMMUNITY PHARMACIES"},children:[{path:"",component:C,data:{authorities:["ROLE_USER"],title:"Community Pharmacies",breadcrumb:"COMMUNITY PHARMACIES"}},{path:":id/view",component:S,resolve:{entity:M},data:{authorities:["ROLE_USER"],title:"Community Pharmacy",breadcrumb:"COMMUNITY PHARMACY"}},{path:"new",component:I,data:{authorities:["ROLE_DEC"],title:"Add Community Pharmacy",breadcrumb:"ADD COMMUNITY PHARMACY"}},{path:":id/edit",component:I,resolve:{entity:M},data:{authorities:["ROLE_DEC"],title:"Community Pharmacy Edit",breadcrumb:"COMMUNITY PHARMACY EDIT"}}]}],P=function(){function t(){}return t=p([e.NgModule({declarations:[S,I,C],imports:[a.CommonModule,o.MatInputModule,o.MatIconModule,o.MatDividerModule,o.MatCardModule,o.MatSelectModule,o.MatButtonModule,c.FormsModule,r.RouterModule.forChild(w),s.CoreModule,m.CovalentCommonModule,m.CovalentDialogsModule,u.NgbModule,i.LamisCoreModule],exports:[],providers:[M]})],t)}();t.CommunityPharmacyModule=P,t.FacilityModule=g,t.FacilityService=h,t.ɵa=y,t.ɵb=v,t.ɵc=S,t.ɵd=b,t.ɵe=I,t.ɵf=C,t.ɵg=M,t.ɵh=w,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=lamis-facility-1.2.0.umd.min.js.map