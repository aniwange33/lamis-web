import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { CommunityPharmacyService } from './community-pharmacy.service';
import { of } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { CommunityPharmacyListComponent } from '../components/community-pharmacy/community-pharmacy-list.component';
import { CommunityPharmacyDetailsComponent } from '../components/community-pharmacy/community-pharmacy.details.component';
import { CommunityPharmacyEditComponent } from '../components/community-pharmacy/community-pharmacy.edit.component';
var CommunityPharmacyResolve = /** @class */ (function () {
    function CommunityPharmacyResolve(service) {
        this.service = service;
    }
    CommunityPharmacyResolve.prototype.resolve = function (route, state) {
        var id = route.params['id'] ? route.params['id'] : null;
        if (id) {
            return this.service.find(id).pipe(filter(function (response) { return response.ok; }), map(function (patient) { return patient.body; }));
        }
        return of({});
    };
    CommunityPharmacyResolve.ctorParameters = function () { return [
        { type: CommunityPharmacyService }
    ]; };
    CommunityPharmacyResolve = tslib_1.__decorate([
        Injectable()
    ], CommunityPharmacyResolve);
    return CommunityPharmacyResolve;
}());
export { CommunityPharmacyResolve };
var ɵ0 = {
    title: 'Community Pharmacies',
    breadcrumb: 'COMMUNITY PHARMACIES'
}, ɵ1 = {
    authorities: ['ROLE_USER'],
    title: 'Community Pharmacies',
    breadcrumb: 'COMMUNITY PHARMACIES'
}, ɵ2 = {
    authorities: ['ROLE_USER'],
    title: 'Community Pharmacy',
    breadcrumb: 'COMMUNITY PHARMACY'
}, ɵ3 = {
    authorities: ['ROLE_DEC'],
    title: 'Add Community Pharmacy',
    breadcrumb: 'ADD COMMUNITY PHARMACY'
}, ɵ4 = {
    authorities: ['ROLE_DEC'],
    title: 'Community Pharmacy Edit',
    breadcrumb: 'COMMUNITY PHARMACY EDIT'
};
export var ROUTES = [
    {
        path: '',
        data: ɵ0,
        children: [
            {
                path: '',
                component: CommunityPharmacyListComponent,
                data: ɵ1,
            },
            {
                path: ':id/view',
                component: CommunityPharmacyDetailsComponent,
                resolve: {
                    entity: CommunityPharmacyResolve
                },
                data: ɵ2,
            },
            {
                path: 'new',
                component: CommunityPharmacyEditComponent,
                data: ɵ3,
            },
            {
                path: ':id/edit',
                component: CommunityPharmacyEditComponent,
                resolve: {
                    entity: CommunityPharmacyResolve
                },
                data: ɵ4,
            }
        ]
    }
];
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Aucm91dGVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbGFtaXMtZmFjaWxpdHktMS4yLjAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvY3Aucm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxvRUFBb0UsQ0FBQztBQUNwSCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx1RUFBdUUsQ0FBQztBQUMxSCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxvRUFBb0UsQ0FBQztBQUdwSDtJQUNJLGtDQUFvQixPQUFpQztRQUFqQyxZQUFPLEdBQVAsT0FBTyxDQUEwQjtJQUNyRCxDQUFDO0lBRUQsMENBQU8sR0FBUCxVQUFRLEtBQTZCLEVBQUUsS0FBMEI7UUFDN0QsSUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzFELElBQUksRUFBRSxFQUFFO1lBQ0osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQzdCLE1BQU0sQ0FBQyxVQUFDLFFBQXlDLElBQUssT0FBQSxRQUFRLENBQUMsRUFBRSxFQUFYLENBQVcsQ0FBQyxFQUNsRSxHQUFHLENBQUMsVUFBQyxPQUF3QyxJQUFLLE9BQUEsT0FBTyxDQUFDLElBQUksRUFBWixDQUFZLENBQUMsQ0FDbEUsQ0FBQztTQUNMO1FBQ0QsT0FBTyxFQUFFLENBQW9CLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7O2dCQVo0Qix3QkFBd0I7O0lBRDVDLHdCQUF3QjtRQURwQyxVQUFVLEVBQUU7T0FDQSx3QkFBd0IsQ0FjcEM7SUFBRCwrQkFBQztDQUFBLEFBZEQsSUFjQztTQWRZLHdCQUF3QjtTQW1CdkI7SUFDRixLQUFLLEVBQUUsc0JBQXNCO0lBQzdCLFVBQVUsRUFBRSxzQkFBc0I7Q0FDckMsT0FLYTtJQUNGLFdBQVcsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUMxQixLQUFLLEVBQUUsc0JBQXNCO0lBQzdCLFVBQVUsRUFBRSxzQkFBc0I7Q0FDckMsT0FTSztJQUNGLFdBQVcsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUMxQixLQUFLLEVBQUUsb0JBQW9CO0lBQzNCLFVBQVUsRUFBRSxvQkFBb0I7Q0FDbkMsT0FNSztJQUNGLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQztJQUN6QixLQUFLLEVBQUUsd0JBQXdCO0lBQy9CLFVBQVUsRUFBRSx3QkFBd0I7Q0FDdkMsT0FTSztJQUNGLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQztJQUN6QixLQUFLLEVBQUUseUJBQXlCO0lBQ2hDLFVBQVUsRUFBRSx5QkFBeUI7Q0FDeEM7QUFuRGpCLE1BQU0sQ0FBQyxJQUFNLE1BQU0sR0FBVztJQUMxQjtRQUNJLElBQUksRUFBRSxFQUFFO1FBQ1IsSUFBSSxJQUdIO1FBQ0QsUUFBUSxFQUFFO1lBQ047Z0JBQ0ksSUFBSSxFQUFFLEVBQUU7Z0JBQ1IsU0FBUyxFQUFFLDhCQUE4QjtnQkFDekMsSUFBSSxJQUlIO2FBRUo7WUFDRDtnQkFDSSxJQUFJLEVBQUUsVUFBVTtnQkFDaEIsU0FBUyxFQUFFLGlDQUFpQztnQkFDNUMsT0FBTyxFQUFFO29CQUNMLE1BQU0sRUFBRSx3QkFBd0I7aUJBQ25DO2dCQUNELElBQUksSUFJSDthQUVKO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsU0FBUyxFQUFFLDhCQUE4QjtnQkFDekMsSUFBSSxJQUlIO2FBRUo7WUFDRDtnQkFDSSxJQUFJLEVBQUUsVUFBVTtnQkFDaEIsU0FBUyxFQUFFLDhCQUE4QjtnQkFDekMsT0FBTyxFQUFFO29CQUNMLE1BQU0sRUFBRSx3QkFBd0I7aUJBQ25DO2dCQUNELElBQUksSUFJSDthQUVKO1NBQ0o7S0FDSjtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSZXNvbHZlLCBSb3V0ZXJTdGF0ZVNuYXBzaG90LCBSb3V0ZXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQ29tbXVuaXR5UGhhcm1hY3kgfSBmcm9tICcuLi9tb2RlbC9jb21tdW5pdHktcGhhcm1hY3kubW9kZWwnO1xuaW1wb3J0IHsgQ29tbXVuaXR5UGhhcm1hY3lTZXJ2aWNlIH0gZnJvbSAnLi9jb21tdW5pdHktcGhhcm1hY3kuc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBDb21tdW5pdHlQaGFybWFjeUxpc3RDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbW11bml0eS1waGFybWFjeS9jb21tdW5pdHktcGhhcm1hY3ktbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tbXVuaXR5UGhhcm1hY3lEZXRhaWxzQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb21tdW5pdHktcGhhcm1hY3kvY29tbXVuaXR5LXBoYXJtYWN5LmRldGFpbHMuY29tcG9uZW50JztcbmltcG9ydCB7IENvbW11bml0eVBoYXJtYWN5RWRpdENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29tbXVuaXR5LXBoYXJtYWN5L2NvbW11bml0eS1waGFybWFjeS5lZGl0LmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb21tdW5pdHlQaGFybWFjeVJlc29sdmUgaW1wbGVtZW50cyBSZXNvbHZlPENvbW11bml0eVBoYXJtYWN5PiB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOiBDb21tdW5pdHlQaGFybWFjeVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICByZXNvbHZlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IE9ic2VydmFibGU8Q29tbXVuaXR5UGhhcm1hY3k+IHtcbiAgICAgICAgY29uc3QgaWQgPSByb3V0ZS5wYXJhbXNbJ2lkJ10gPyByb3V0ZS5wYXJhbXNbJ2lkJ10gOiBudWxsO1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2UuZmluZChpZCkucGlwZShcbiAgICAgICAgICAgICAgICBmaWx0ZXIoKHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8Q29tbXVuaXR5UGhhcm1hY3k+KSA9PiByZXNwb25zZS5vayksXG4gICAgICAgICAgICAgICAgbWFwKChwYXRpZW50OiBIdHRwUmVzcG9uc2U8Q29tbXVuaXR5UGhhcm1hY3k+KSA9PiBwYXRpZW50LmJvZHkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZig8Q29tbXVuaXR5UGhhcm1hY3k+e30pO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IFJPVVRFUzogUm91dGVzID0gW1xuICAgIHtcbiAgICAgICAgcGF0aDogJycsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnQ29tbXVuaXR5IFBoYXJtYWNpZXMnLFxuICAgICAgICAgICAgYnJlYWRjcnVtYjogJ0NPTU1VTklUWSBQSEFSTUFDSUVTJ1xuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhdGg6ICcnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogQ29tbXVuaXR5UGhhcm1hY3lMaXN0Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXRpZXM6IFsnUk9MRV9VU0VSJ10sXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQ29tbXVuaXR5IFBoYXJtYWNpZXMnLFxuICAgICAgICAgICAgICAgICAgICBicmVhZGNydW1iOiAnQ09NTVVOSVRZIFBIQVJNQUNJRVMnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvL2NhbkFjdGl2YXRlOiBbVXNlclJvdXRlQWNjZXNzU2VydmljZV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGF0aDogJzppZC92aWV3JyxcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IENvbW11bml0eVBoYXJtYWN5RGV0YWlsc0NvbXBvbmVudCxcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGVudGl0eTogQ29tbXVuaXR5UGhhcm1hY3lSZXNvbHZlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml0aWVzOiBbJ1JPTEVfVVNFUiddLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0NvbW11bml0eSBQaGFybWFjeScsXG4gICAgICAgICAgICAgICAgICAgIGJyZWFkY3J1bWI6ICdDT01NVU5JVFkgUEhBUk1BQ1knXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvL2NhbkFjdGl2YXRlOiBbVXNlclJvdXRlQWNjZXNzU2VydmljZV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGF0aDogJ25ldycsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBDb21tdW5pdHlQaGFybWFjeUVkaXRDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3JpdGllczogWydST0xFX0RFQyddLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0FkZCBDb21tdW5pdHkgUGhhcm1hY3knLFxuICAgICAgICAgICAgICAgICAgICBicmVhZGNydW1iOiAnQUREIENPTU1VTklUWSBQSEFSTUFDWSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vY2FuQWN0aXZhdGU6IFtVc2VyUm91dGVBY2Nlc3NTZXJ2aWNlXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXRoOiAnOmlkL2VkaXQnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogQ29tbXVuaXR5UGhhcm1hY3lFZGl0Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5OiBDb21tdW5pdHlQaGFybWFjeVJlc29sdmVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXRpZXM6IFsnUk9MRV9ERUMnXSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdDb21tdW5pdHkgUGhhcm1hY3kgRWRpdCcsXG4gICAgICAgICAgICAgICAgICAgIGJyZWFkY3J1bWI6ICdDT01NVU5JVFkgUEhBUk1BQ1kgRURJVCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vY2FuQWN0aXZhdGU6IFtVc2VyUm91dGVBY2Nlc3NTZXJ2aWNlXVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfVxuXTtcbiJdfQ==