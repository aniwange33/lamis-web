{"version":3,"sources":["../../../../../../../../node_modules/tslib/tslib.es6.js","ng://lamis-pharmacy-1.4.0/lib/services/pharmacy.service.ts","ng://lamis-pharmacy-1.4.0/lib/components/pharmacy-edit.component.ts","ng://lamis-pharmacy-1.4.0/lib/components/pharmacy-details.component.ts","ng://lamis-pharmacy-1.4.0/lib/services/pharmacy.route.ts","ng://lamis-pharmacy-1.4.0/lib/components/pharmacy.widget.ts","ng://lamis-pharmacy-1.4.0/lib/material.module.ts","ng://lamis-pharmacy-1.4.0/lib/pharmacy.widget.module.ts","ng://lamis-pharmacy-1.4.0/lib/pharmacy.module.ts","ng://lamis-pharmacy-1.4.0/lib/services/devolve.service.ts","ng://lamis-pharmacy-1.4.0/lib/components/devolve.details.component.ts","ng://lamis-pharmacy-1.4.0/lib/components/devolve.edit.component.ts","ng://lamis-pharmacy-1.4.0/lib/components/end.devolve.component.ts","ng://lamis-pharmacy-1.4.0/lib/services/devolve.route.ts","ng://lamis-pharmacy-1.4.0/lib/devolve.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","__spread","concat","moment","moment_","PharmacyService","http","serverUrl","this","resourceUrl","SERVER_API_URL","prototype","create","pharmacy","_this","copy","convertDateFromClient","post","observe","pipe","map","res","convertDateFromServer","update","console","log","put","find","id","get","findByUuid","delete","getPatient","dateRegistration","getVisitDatesByPatient","patientId","forEach","hasDeadStatus","puuid","body","dateStatus","regimenTypes","regimenInfo","adrs","getLinesByPharmacy","pharmacyId","regimesByRegimenType","getDrugsByRegimen","getRegimenById","latestVisit","getDevolvement","date","format","DATE_FORMAT","dateDevolved","dateReturnedToFacility","dateNextClinic","dateNextRefill","assign","dateVisit","isValid","nextAppointment","convertDateArrayFromServer","HttpClient","Inject","args","SERVER_API_URL_CONFIG","Injectable","providedIn","tslib_1.__param","IPT_TYPE","START_INITIATION","START_REFILL","FOLLOWUP_INITIATION","FOLLOWUP_REFILL","PharmacyEditComponent","pharmacyService","notification","appLoaderService","activatedRoute","entity","regimens","selectedRegimens","tomorrow","add","today","ColumnMode","editing","rows","drugIds","Set","visitDates","drugs","iptSelected","ipt","createEntity","ngOnInit","isSaving","data","subscribe","_a","undefined","snapshot","paramMap","patient","facility","minNextAppointment","clone","res1","filter","t","extra","prep","registered","deadStatus","dateCompleted","lines","regimen_id","description","regimenDrug","regimen_drug_id","drug","name","morning","afternoon","evening","regimen_type_id","quantity","duration","rs","includes","sort","r1","r2","pop","devolve","updateDmocType","dateVisitChanged","suggestedNextAppointment","subtract","maxNextVisit","weekday","isoWeekday","type","dmocType","filterDates","exists","diff","previousState","window","history","back","entityCompare","e1","e2","save","submitButton","disabled","open","isBefore","showError","close","subscribeToSaveResponse","regimenTypeChange","regimen","durationChanged","mmdType","iptTypes","regimenChange","event","regimenType","row","regimen1","drug1","updateValue","cell","rowIndex","total","parseInt","result","onSaveSuccess","onSaveError","onError","message","showInfo","errorMessage","NotificationService","AppLoaderService","ActivatedRoute","tslib_1.__decorate","ViewChild","MatProgressBar","static","MatButton","Component","selector","template","PharmacyDetailsComponent","router","route","_dialogService","notificationService","properties","buildProperties","edit","navigate","uuid","openConfirm","title","cancelButton","acceptButton","width","afterClosed","accept","ok","CardViewDateItemModel","label","dataSource","CardViewIntItemModel","CardViewTextItemModel","CardViewBoolItemModel","adrScreened","prescriptionError","ngOnDestroy","Router","TdDialogService","PharmacyResolve","service","resolve","state","params","response","of","ROUTES","path","breadcrumb","children","component","authorities","PharmacyWidget","Input","modules","MatAutocompleteModule","MatButtonModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatDatepickerModule","MatDialogModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatNativeDateModule","MatOptionModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSlideToggleModule","MatTableModule","MatTabsModule","MatMenuModule","MatProgressBarModule","MatSidenavModule","MatSnackBarModule","MatToolbarModule","MatTooltipModule","MatDatetimepickerModule","MatNativeDatetimeModule","MaterialModule","NgModule","imports","exports","PharmacyWidgetModule","CommonModule","CoreModule","declarations","entryComponents","providers","PharmacyModule","RouterModule","forChild","FormsModule","CovalentMessageModule","CovalentDialogsModule","NgxDatatableModule","ReactiveFormsModule","MatDateFormatModule","CustomFormsModule","DevolveService","getDevolveDatesByPatient","getStates","getLgasByState","getCommunityPharmaciesByLga","getRelatedPharmacy","devolveId","getRelatedClinic","getRelatedViralLoad","dateResultReceived","getRelatedCD4","getStateByLga","dateDiscontinued","DevolveDetailsComponent","devolveService","relatedClinic","clinicStage","relatedPharmacy","relatedViralLoad","relatedCD4","communityPharmacy","reasonDiscontinued","DevolveEditComponent","states","dmocTypes","devolveDates","enableCommunityPharmacy","updateRelated","dmoc","lga","lgaChanged","stateChanged","minDate","minDiscontinued","dateDiscontinuedChanged","lgas","communityPharmacies","communityPharmacyChanged","address","phone","email","dmocChanged","dateDevolvedChanged","relatedCd4","EndDevolveComponent","DevolveResolve","DevolveModule","CovalentCommonModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig} from '@lamis/web-core';\nimport {map} from 'rxjs/operators';\nimport {\n    Adr,\n    Devolve,\n    DrugDTO,\n    Patient,\n    Pharmacy,\n    PharmacyLine,\n    Regimen,\n    RegimenInfo,\n    RegimenType, StatusHistory\n} from '../model/pharmacy.model';\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Pharmacy>;\ntype EntityArrayResponseType = HttpResponse<Pharmacy[]>;\n\n@Injectable({providedIn: 'root'})\nexport class PharmacyService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/pharmacies';\n    }\n\n    create(pharmacy: Pharmacy): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(pharmacy);\n        return this.http\n            .post<Pharmacy>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(pharmacy: Pharmacy): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(pharmacy);\n        console.log('Lines', copy);\n        return this.http\n            .put<Pharmacy>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<Pharmacy>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: string): Observable<EntityResponseType> {\n        return this.http\n            .get<Pharmacy>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getPatient(id: any) {\n        return this.http.get<Patient>(`/api/patients/by-uuid/${id}`, {observe: 'body'})\n            .pipe(map((res) => {\n                if (res) {\n                    res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null;\n                }\n                return res;\n            }));\n    }\n\n    getVisitDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`${this.resourceUrl}/patient/${patientId}/visit-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            );\n    }\n\n    hasDeadStatus(puuid: string) {\n        return this.http.get<StatusHistory>(`${this.resourceUrl}/patient/${puuid}/has-dead-status`, {observe: 'response'})\n            .pipe(map(res => {\n                if (res.body) {\n                    res.body.dateStatus = res.body.dateStatus != null ? moment(res.body.dateStatus) : null;\n                }\n                return res;\n            }));\n    }\n\n    regimenTypes() {\n        return this.http.get<RegimenType[]>(`${this.resourceUrl}/regimen-types`);\n    }\n\n    regimenInfo(patientId: number) {\n        return this.http.get<RegimenInfo>(`${this.resourceUrl}/regimen-info/patient/${patientId}`);\n    }\n\n    adrs() {\n        return this.http.get<Adr[]>(`${this.resourceUrl}/adrs`);\n    }\n\n    getLinesByPharmacy(pharmacyId: number) {\n        return this.http.get<PharmacyLine[]>(`${this.resourceUrl}/${pharmacyId}/lines`);\n    }\n\n    regimesByRegimenType(id: number) {\n        return this.http.get<Regimen[]>(`${this.resourceUrl}/regimens/regimen-type/${id}`);\n    }\n\n    getDrugsByRegimen(id: number) {\n        return this.http.get<DrugDTO[]>(`${this.resourceUrl}/drugs/regimen/${id}`);\n    }\n\n    getRegimenById(id) {\n        return this.http.get<Regimen>(`${this.resourceUrl}/regimen/${id}`);\n    }\n\n    latestVisit(patientId: number) {\n        return this.http.get<Pharmacy>(`${this.resourceUrl}/patient/${patientId}/latest`);\n    }\n\n    getDevolvement(patientId: number, date: Moment) {\n        const d = date.format(DATE_FORMAT);\n        return this.http.get<Devolve>(`${this.resourceUrl}/patient/${patientId}/devolvement/at/${d}`)\n            .pipe(map(res => {\n                res.dateDevolved = res.dateDevolved != null ? moment(res.dateDevolved) : null;\n                res.dateReturnedToFacility = res.dateReturnedToFacility != null ? moment(res.dateReturnedToFacility) : null;\n                res.dateNextClinic = res.dateNextClinic != null ? moment(res.dateNextClinic) : null;\n                res.dateNextRefill = res.dateNextRefill != null ? moment(res.dateNextRefill) : null;\n                return res;\n            }));\n    }\n\n    protected convertDateFromClient(pharmacy: Pharmacy): Pharmacy {\n        const copy: Pharmacy = Object.assign({}, pharmacy, {\n            dateVisit: pharmacy.dateVisit != null && pharmacy.dateVisit.isValid() ? pharmacy.dateVisit.format(DATE_FORMAT) : null,\n            nextAppointment: pharmacy.nextAppointment != null && pharmacy.nextAppointment.isValid() ?\n                pharmacy.nextAppointment.format(DATE_FORMAT) : null\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.nextAppointment = res.body.nextAppointment != null ? moment(res.body.nextAppointment) : null;\n            res.body.dateVisit = res.body.dateVisit != null ? moment(res.body.dateVisit) : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((pharmacy: Pharmacy) => {\n                pharmacy.dateVisit = pharmacy.dateVisit != null ? moment(pharmacy.dateVisit) : null;\n                pharmacy.nextAppointment = pharmacy.nextAppointment != null ? moment(pharmacy.nextAppointment) : null;\n            });\n        }\n        return res;\n    }\n}\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {Adr, Devolve, Drug, DrugDTO, Patient, Pharmacy, PharmacyLine, Regimen, RegimenType, StatusHistory} from '../model/pharmacy.model';\nimport {PharmacyService} from '../services/pharmacy.service';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {ActivatedRoute} from '@angular/router';\nimport {MatButton, MatProgressBar} from '@angular/material';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {ColumnMode} from '@swimlane/ngx-datatable';\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\nimport {AppLoaderService, DATE_FORMAT, entityCompare} from '@lamis/web-core';\n\nconst moment = moment_;\n\nexport const IPT_TYPE = {\n    'START_INITIATION': 'Start Initiation',\n    'START_REFILL': 'Start Refill',\n    'FOLLOWUP_INITIATION': 'Followup Initiation',\n    'FOLLOWUP_REFILL': 'Followup Refill'\n};\n\nexport interface Ipt {\n    type?: string;\n    completed?: boolean;\n    dateCompleted?: Moment;\n}\n\n@Component({\n    selector: 'lamis-pharmacy-edit',\n    templateUrl: './pharmacy-edit.component.html'\n})\nexport class PharmacyEditComponent implements OnInit {\n    @ViewChild(MatProgressBar, {static: true}) progressBar: MatProgressBar;\n    @ViewChild(MatButton, {static: true}) submitButton: MatButton;\n    entity: Pharmacy = {};\n    patient: Patient;\n    dateRegistration: Moment;\n    maxNextVisit: Moment;\n    regimenTypes: RegimenType[] = [];\n    regimens: Regimen[] = [];\n    selectedRegimens: Regimen[] = [];\n    adrs: Adr[];\n    isSaving: boolean;\n    error = false;\n    tomorrow = moment().add(1, 'days');\n    today = moment();\n    minNextAppointment: Moment;\n    ColumnMode = ColumnMode;\n    editing = {};\n    rows: PharmacyLine[] = [];\n    drugIds = new Set();\n    visitDates: Moment[] = [];\n    devolve: Devolve;\n    dmocType: string;\n    drugs: Drug[] = [];\n    iptSelected = false;\n    ipt: Ipt = {};\n    deadStatus: StatusHistory;\n\n    constructor(private pharmacyService: PharmacyService,\n                protected notification: NotificationService,\n                private appLoaderService: AppLoaderService,\n                protected activatedRoute: ActivatedRoute) {\n    }\n\n    createEntity(): Pharmacy {\n        return <Pharmacy>{};\n    }\n\n    ngOnInit(): void {\n        this.isSaving = false;\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.pharmacyService.getPatient(patientId).subscribe((res) => {\n                this.entity.patient = res;\n                this.patient = res;\n                this.dateRegistration = res.dateRegistration;\n                this.entity.facility = res.facility;\n                this.minNextAppointment = this.dateRegistration.clone().add(15, 'days');\n                this.pharmacyService.getVisitDatesByPatient(res.id).subscribe((res1) => {\n                    this.visitDates = res1;\n                });\n\n                this.pharmacyService.regimenTypes().subscribe(res1 => {\n                    this.regimenTypes = res1.filter(t => {\n                        return this.entity.patient.extra && this.entity.patient.extra.prep && this.entity.patient.extra.prep.registered ?\n                            t.id === 30 : t.id !== 30;\n                    });\n                });\n\n                this.pharmacyService.hasDeadStatus(patientId).subscribe(r => this.deadStatus = r.body);\n            });\n\n            if (this.entity.id) {\n                if (this.entity.extra && this.entity.extra.ipt) {\n                    this.ipt = Object.assign({}, this.entity.extra.ipt, {\n                        dateCompleted: this.entity.extra.ipt.dateCompleted != null ? moment(this.entity.extra.ipt.dateCompleted) : null\n                    });\n                }\n\n                this.rows = [...this.entity.lines.map(r => {\n                    this.pharmacyService.getDrugsByRegimen(r.regimen_id).subscribe((res: DrugDTO[]) => {\n                        r.description = res.find(d => d.regimenDrug.id === r.regimen_drug_id).drug.name;\n                    });\n                    r.morning = r.morning || 0;\n                    r.afternoon = r.afternoon || 0;\n                    r.evening = r.evening || 0;\n                    if (r.regimen_type_id === 15) {\n                        this.iptSelected = true;\n                    }\n                    r.quantity = ((r.morning || 0) + (r.afternoon || 0) + (r.evening || 0)) * r.duration;\n\n                    this.pharmacyService.getRegimenById(r.regimen_id).subscribe(res => {\n                        if (!this.regimens.map(rs => rs.id).includes(r.regimen_id)) {\n                            this.regimens.push(res);\n                            this.selectedRegimens.push(res);\n                            this.regimens = [...this.regimens];\n                            this.selectedRegimens = [...this.selectedRegimens];\n                        }\n                    });\n                    return r;\n                })];\n\n                this.entity.duration = this.entity.lines.map(r => r.duration)\n                    .sort((r1, r2) => r1 - r2)\n                    .pop();\n\n                this.pharmacyService.getDevolvement(this.entity.patient.id, this.entity.dateVisit).subscribe(res => {\n                    this.devolve = res;\n                    this.updateDmocType();\n                });\n            }\n        });\n    }\n\n    dateVisitChanged(date: Moment) {\n        this.entity.nextAppointment = this.suggestedNextAppointment();\n        this.minNextAppointment = this.entity.nextAppointment.clone().subtract(7, 'days');\n        this.maxNextVisit = this.entity.nextAppointment.clone().add(8, 'months');\n        this.pharmacyService.getDevolvement(this.entity.patient.id, this.entity.dateVisit).subscribe(res => {\n            this.devolve = res;\n            this.updateDmocType();\n        });\n\n    }\n\n    suggestedNextAppointment(): Moment {\n        if (this.entity.dateVisit) {\n            let nextAppointment = this.entity.dateVisit.clone().add(this.entity.duration - 2 || 13, 'days');\n            const weekday = nextAppointment.isoWeekday();\n            if (weekday === 6) {\n                nextAppointment = nextAppointment.clone().add(2, 'days');\n            } else if (weekday === 7) {\n                nextAppointment = nextAppointment.clone().add(1, 'days');\n            }\n            return nextAppointment;\n        }\n        return null;\n    }\n\n    updateDmocType() {\n        let type = 'MMD';\n        switch (this.devolve.dmocType) {\n            case 'ARC':\n                type = 'Adolescent Refill Club';\n                break;\n            case 'CPARP':\n                type = 'CPARP';\n                break;\n            case 'CARC':\n                type = 'CARC';\n                break;\n            case 'F_CARG':\n                type = 'F-CARG';\n                break;\n            case 'FAST_TRACK':\n                type = 'Fast Track';\n                break;\n            case 'S_CARG':\n                type = 'S-CARG';\n                break;\n            case 'MMS':\n                type = 'MMS';\n                break;\n        }\n        this.dmocType = type;\n    }\n\n    filterDates(date: Moment): boolean {\n        let exists = false;\n\n        this.visitDates.forEach(d => {\n            if (date.diff(d, 'days') === 0) {\n                exists = true;\n            }\n        });\n        return (this.entity.id && date.diff(this.entity.dateVisit, 'days') === 0) || !exists;\n    }\n\n\n    previousState() {\n        window.history.back();\n    }\n\n    entityCompare(e1, e2) {\n        return entityCompare(e1, e2);\n    }\n\n    save() {\n        this.submitButton.disabled = true;\n        // this.progressBar.mode = 'indeterminate';\n        this.appLoaderService.open('Saving visit...');\n        this.entity.lines = this.rows;\n        this.isSaving = true;\n        if (!this.entity.extra) {\n            this.entity.extra = {};\n        }\n        if (this.iptSelected && this.ipt) {\n            this.entity.extra.ipt = Object.assign({}, this.ipt, {\n                dateCompleted: this.ipt.dateCompleted != null && this.ipt.dateCompleted.isValid() ?\n                    this.ipt.dateCompleted.format(DATE_FORMAT) : null\n            });\n        }\n\n        if (this.deadStatus && this.deadStatus.dateStatus) {\n            if (this.deadStatus.dateStatus.isBefore(this.entity.dateVisit)) {\n                this.notification.showError(`Cannot save refill, patient was declared dead\n                 (${this.deadStatus.dateStatus.format('DD MMMM, YYYY')}) before date of current refill`);\n                this.appLoaderService.close();\n                this.isSaving = false;\n                return;\n            }\n        }\n\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.pharmacyService.update(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.pharmacyService.create(this.entity));\n        }\n    }\n\n    regimenTypeChange(type: any) {\n        this.pharmacyService.regimesByRegimenType(type.id).subscribe((res: Regimen[]) => {\n            res.forEach((regimen: Regimen) => {\n                if (!this.regimens.map(r => r.id).includes(regimen.id)) {\n                    this.regimens.push(regimen);\n                    this.regimens = [...this.regimens];\n                }\n            });\n        });\n    }\n\n    durationChanged(duration) {\n        this.rows = this.rows.map(r => {\n            r.duration = duration;\n            r.quantity = (r.morning + r.afternoon + r.evening) * duration;\n            return r;\n        });\n        this.rows = [...this.rows];\n\n        this.entity.nextAppointment = this.suggestedNextAppointment();\n\n        if (duration === 90) {\n            this.entity.mmdType = 'MMD-3';\n        } else if (duration === 120) {\n            this.entity.mmdType = 'MMD-4';\n        } else if (duration === 150) {\n            this.entity.mmdType = 'MMD-5';\n        } else if (duration === 180) {\n            this.entity.mmdType = 'MMD-6';\n        } else {\n            this.entity.mmdType = null;\n        }\n\n        if (this.entity.dateVisit) {\n            this.ipt['dateCompleted'] = this.entity.dateVisit.clone().add(duration, 'days');\n        }\n    }\n\n    iptTypes() {\n        return IPT_TYPE;\n    }\n\n    regimenChange(event) {\n        this.selectedRegimens.forEach(regimen => {\n            if (regimen.regimenType.id === 15) {\n                this.iptSelected = true;\n            }\n            this.pharmacyService.getDrugsByRegimen(regimen.id).subscribe((res: DrugDTO[]) => {\n                res.forEach((drug: DrugDTO) => {\n                    if (!this.rows.map(r => r.description).includes(drug.drug.name)) {\n                        this.rows.push({\n                            drug: drug.drug,\n                            description: drug.drug.name,\n                            morning: drug.drug.morning,\n                            afternoon: drug.drug.afternoon,\n                            evening: drug.drug.evening,\n                            regimen_id: regimen.id,\n                            duration: this.entity.duration,\n                            quantity: this.entity.duration * ((drug.drug.morning || 0) + (drug.drug.afternoon || 0)\n                                + (drug.drug.evening || 0)),\n                            regimen_type_id: regimen.regimenType.id,\n                            regimen_drug_id: drug.regimenDrug.id\n                        });\n                        this.rows = [...this.rows];\n                        // this.drugs.push(drug.drug);\n                    }\n\n                    this.rows = this.rows.filter(row => this.selectedRegimens.map(regimen1 => regimen1.id).includes(row.regimen_id));\n                    this.drugs.forEach(drug1 => {\n                        if (!this.rows.map(r => r.description).includes(drug1.name)) {\n                            this.drugs = this.drugs.filter(d => d.id !== drug1.id);\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    updateValue(event, cell, rowIndex) {\n        this.editing[rowIndex + '-' + cell] = false;\n        this.rows[rowIndex][cell] = event.target.value;\n        if (this.entity.duration) {\n            const total = parseInt(this.rows[rowIndex]['morning'] + '' || '0', 10) +\n                parseInt(this.rows[rowIndex]['afternoon'] + '' || '0', 10) +\n                parseInt(this.rows[rowIndex]['evening'] + '' || '0', 10);\n            this.rows[rowIndex]['quantity'] = (total * this.entity.duration);\n        }\n        if (cell === 'duration' && this.rows[rowIndex].regimen_type_id === 15) {\n            if (this.entity.dateVisit) {\n                this.ipt['dateCompleted'] = this.entity.dateVisit.clone().add(event.target.value, 'days');\n            }\n        }\n        this.rows = [...this.rows];\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.appLoaderService.close();\n                this.onSaveError();\n                this.onError(res.message);\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Pharmacy visit successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.error = true;\n        this.notification.showError('Error saving pharmacy visit');\n    }\n\n    protected onError(errorMessage: string) {\n        this.isSaving = false;\n        this.notification.showError(errorMessage);\n    }\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {DrugDTO, Pharmacy, PharmacyLine, RegimenInfo} from '../model/pharmacy.model';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {PharmacyService} from '../services/pharmacy.service';\nimport {TdDialogService} from '@covalent/core';\nimport {\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewIntItemModel,\n    CardViewItem,\n    CardViewTextItemModel,\n    NotificationService\n} from '@alfresco/adf-core';\nimport {IPT_TYPE} from './pharmacy-edit.component';\nimport * as moment_ from 'moment';\nimport {ColumnMode} from '@swimlane/ngx-datatable';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'lamis-pharmacy',\n    templateUrl: './pharmacy-details.component.html'\n})\nexport class PharmacyDetailsComponent implements OnInit, OnDestroy {\n    properties: CardViewItem[] = [];\n    entity: Pharmacy;\n    ColumnMode = ColumnMode;\n    public dataSource: PharmacyLine[];\n\n    constructor(private router: Router, private route: ActivatedRoute, private pharmacyService: PharmacyService,\n                private _dialogService: TdDialogService,\n                private notificationService: NotificationService) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            const patientId = this.route.snapshot.paramMap.get('patientId');\n            this.pharmacyService.getPatient(patientId).subscribe((res) => this.entity.patient = res);\n            this.buildProperties();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['/', 'pharmacies', this.entity.uuid, 'patient', this.entity.patient.uuid, 'edit']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this pharmacy refill, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.pharmacyService.delete(this.entity.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['patients']);\n                    } else {\n                        this.notificationService.showError('Error deleting visit, please try again');\n                    }\n                });\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateVisit,\n            label: 'Date of Dispensing',\n            format: 'dd MMM, yyyy'\n        }));\n        /*this.pharmacyService.getLinesByPharmacy(this.entity.id)\n            .subscribe(res => {\n                this.dataSource = res;\n                this.properties.push(new CardViewIntItemModel({\n                    label: 'Refill Period (days)',\n                    key: 'cs',\n                    value: res.map(r => r.duration)\n                        .sort((r1, r2) => r1 - r2)\n                        .pop()\n                }));\n            });*/\n        this.dataSource = [...this.entity.lines.map(r => {\n            r.morning = r.morning || 0;\n            r.afternoon = r.afternoon || 0;\n            r.evening = r.evening || 0;\n            r.quantity = ((r.morning) + (r.afternoon) + (r.evening)) * r.duration;\n            this.pharmacyService.getDrugsByRegimen(r.regimen_id).subscribe((res: DrugDTO[]) => {\n                r.description = res.find(d => d.regimenDrug.id === r.regimen_drug_id).drug.name;\n            });\n            return r;\n        })];\n        this.dataSource = [...this.dataSource];\n        this.properties.push(new CardViewIntItemModel({\n            label: 'Refill Period (days)',\n            key: 'cs',\n            value: this.entity.lines.map(r => r.duration)\n                .sort((r1, r2) => r1 - r2)\n                .pop()\n        }));\n\n        this.properties.push(new CardViewDateItemModel({\n            key: 'na',\n            value: this.entity.nextAppointment,\n            label: 'Next Pharmacy Refill',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'MMD Type',\n            key: 'fs',\n            value: this.entity.mmdType\n        }));\n        this.properties.push(new CardViewBoolItemModel({\n            label: 'Adverse Drug Reactions',\n            key: 'adr',\n            value: this.entity.adrScreened\n        }));\n        this.properties.push(new CardViewBoolItemModel({\n            label: 'Prescription error',\n            key: 'bw',\n            value: this.entity.prescriptionError\n        }));\n        this.pharmacyService.regimenInfo(this.entity.patient.id)\n            .subscribe((res: RegimenInfo) => {\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'Regimen Line',\n                    key: 'cs',\n                    value: res.regimenType\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'Regimen',\n                    key: 'ts',\n                    value: res.regimen\n                }));\n            });\n        if (this.entity.extra && this.entity.extra.ipt) {\n            this.properties.push(new CardViewTextItemModel({\n                label: 'IPT Type',\n                key: 'fs',\n                value: IPT_TYPE[this.entity.extra.ipt.type]\n            }));\n\n            if (this.entity.extra.ipt.dateCompleted) {\n                this.properties.push(new CardViewDateItemModel({\n                    key: 'na',\n                    value: moment(this.entity.extra.ipt.dateCompleted),\n                    label: 'Date of Completion',\n                    format: 'dd MMM, yyyy'\n                }));\n            }\n        }\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    public ngOnDestroy() {\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpResponse} from '@angular/common/http';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes} from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport {PharmacyService} from './pharmacy.service';\nimport {Pharmacy} from '../model/pharmacy.model';\nimport {PharmacyDetailsComponent} from '../components/pharmacy-details.component';\nimport {PharmacyEditComponent} from '../components/pharmacy-edit.component';\n\n@Injectable()\nexport class PharmacyResolve implements Resolve<Pharmacy> {\n    constructor(private service: PharmacyService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Pharmacy> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Pharmacy>) => response.ok),\n                map((patient: HttpResponse<Pharmacy>) => patient.body)\n            );\n        }\n        return of(<Pharmacy>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Pharmacy Refill',\n            breadcrumb: 'PHARMACY REFILL'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: PharmacyDetailsComponent,\n                resolve: {\n                    entity: PharmacyResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Pharmacy Refill',\n                    breadcrumb: 'PHARMACY REFILL'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: PharmacyEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Pharmacy Refill',\n                    breadcrumb: 'ADD PHARMACY REFILL'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: PharmacyEditComponent,\n                resolve: {\n                    entity: PharmacyResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Pharmacy Refill Edit',\n                    breadcrumb: 'PHARMACY REFILL EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import {Component, Input, OnInit} from '@angular/core';\nimport {PharmacyService} from '../services/pharmacy.service';\nimport {Pharmacy, RegimenInfo} from '../model/pharmacy.model';\nimport {CardViewDateItemModel, CardViewFloatItemModel, CardViewItem, CardViewTextItemModel} from '@alfresco/adf-core';\n\n@Component({\n    selector: 'pharmacy-widget',\n    templateUrl: './pharmacy.widget.html'\n})\nexport class PharmacyWidget implements OnInit {\n    @Input()\n    patientId: number;\n    pharmacy: Pharmacy;\n    properties: CardViewItem[] = [];\n\n    constructor(private pharmacyService: PharmacyService) {\n    }\n\n    ngOnInit(): void {\n        this.pharmacyService.latestVisit(this.patientId).subscribe((res) => {\n            this.pharmacy = res;\n            this.buildProperties();\n        });\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewDateItemModel({\n            key: 'dv',\n            value: this.pharmacy.dateVisit,\n            label: 'Last Pharmacy Refill',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewDateItemModel({\n            key: 'nv',\n            value: this.pharmacy.nextAppointment,\n            label: 'Next Pharmacy Refill',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'MMD Type',\n            key: 'fs',\n            value: this.pharmacy.mmdType\n        }));\n\n        this.pharmacyService.regimenInfo(this.pharmacy.patient.id)\n            .subscribe((res: RegimenInfo) => {\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'Regimen Line',\n                    key: 'cs',\n                    value: res.regimenType\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'Regimen',\n                    key: 'ts',\n                    value: res.regimen\n                }));\n            });\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatDatetimepickerModule, MatNativeDatetimeModule} from '@mat-datetimepicker/core';\n\nimport {\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatOptionModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatCheckboxModule,\n        MatChipsModule, MatDatepickerModule, MatDialogModule, MatGridListModule, MatIconModule,\n        MatInputModule, MatListModule, MatNativeDateModule, MatOptionModule, MatProgressSpinnerModule, MatRadioModule,\n        MatRippleModule, MatSelectModule, MatSlideToggleModule, MatTableModule, MatTabsModule,\n        MatMenuModule, MatProgressBarModule, MatSidenavModule, MatSnackBarModule, MatToolbarModule,\n        MatTooltipModule, MatDatetimepickerModule, MatNativeDatetimeModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {\n}\n","import {NgModule} from '@angular/core';\nimport {PharmacyWidget} from './components/pharmacy.widget';\nimport {CommonModule} from '@angular/common';\nimport {CoreModule} from '@alfresco/adf-core';\nimport {MaterialModule} from './material.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule\n    ],\n    declarations: [\n        PharmacyWidget\n    ],\n    entryComponents: [\n        PharmacyWidget\n    ],\n    exports: [\n        PharmacyWidget\n    ],\n    providers: []\n})\nexport class PharmacyWidgetModule {\n\n}\n","import {CoreModule} from '@alfresco/adf-core';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatProgressBarModule,\n    MatSelectModule,\n    MatTableModule\n} from '@angular/material';\nimport {RouterModule} from '@angular/router';\nimport {CovalentDialogsModule, CovalentMessageModule} from '@covalent/core';\nimport {PharmacyDetailsComponent} from './components/pharmacy-details.component';\nimport {PharmacyEditComponent} from './components/pharmacy-edit.component';\nimport {PharmacyResolve, ROUTES} from './services/pharmacy.route';\nimport {PharmacyWidgetModule} from './pharmacy.widget.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {NgxDatatableModule} from '@swimlane/ngx-datatable';\nimport {MatDateFormatModule} from '@lamis/web-core';\nimport {CustomFormsModule} from 'ng2-validation';\n\n@NgModule({\n    declarations: [\n        PharmacyDetailsComponent,\n        PharmacyEditComponent\n    ],\n    imports: [\n        CommonModule,\n        MatInputModule,\n        MatIconModule,\n        MatCardModule,\n        MatSelectModule,\n        MatButtonModule,\n        RouterModule.forChild(ROUTES),\n        MatProgressBarModule,\n        FormsModule,\n        CovalentMessageModule,\n        CovalentDialogsModule,\n        MatTableModule,\n        MatListModule,\n        CoreModule,\n        PharmacyWidgetModule,\n        NgxDatatableModule,\n        ReactiveFormsModule,\n        MatDateFormatModule,\n        CustomFormsModule\n    ],\n    exports: [\n        PharmacyDetailsComponent,\n        PharmacyEditComponent\n    ],\n    entryComponents: [],\n    providers: [\n        PharmacyResolve\n    ]\n})\nexport class PharmacyModule {\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig} from '@lamis/web-core';\nimport {map} from 'rxjs/operators';\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\nimport {\n    CommunityPharmacy,\n    Devolve,\n    RelatedCD4,\n    RelatedClinic,\n    RelatedPharmacy,\n    RelatedViralLoad\n} from '../model/pharmacy.model';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Devolve>;\n\n@Injectable({providedIn: 'root'})\nexport class DevolveService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/devolves';\n    }\n\n    create(devolve: Devolve): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(devolve);\n        return this.http\n            .post<Devolve>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(devolve: Devolve): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(devolve);\n        return this.http\n            .put<Devolve>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<Devolve>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: string): Observable<EntityResponseType> {\n        return this.http\n            .get<Devolve>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getDevolveDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`${this.resourceUrl}/patient/${patientId}/visit-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            );\n    }\n\n    getStates() {\n        return this.http.get<any[]>('/api/states');\n    }\n\n    getLgasByState(id) {\n        return this.http.get<any[]>(`/api/provinces/state/${id}`);\n    }\n\n    getCommunityPharmaciesByLga(id) {\n        return this.http.get<CommunityPharmacy[]>(`${this.resourceUrl}/community-pharmacies/lga/${id}`);\n    }\n\n    getRelatedPharmacy(devolveId: number, patientId: number, date: Moment) {\n        const d = date.format(DATE_FORMAT);\n        return this.http.get<RelatedPharmacy>(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-pharmacy/at/${d}`)\n            .pipe(map(res => {\n                if (res.dateVisit) {\n                    res.dateVisit = moment(res.dateVisit).format('DD MMM, YYYY');\n                }\n                return res;\n            }));\n    }\n\n    getRelatedClinic(devolveId: number, patientId: number, date: Moment) {\n        const d = date.format(DATE_FORMAT);\n        return this.http.get<RelatedClinic>(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-clinic/at/${d}`)\n            .pipe(map(res => {\n                if (res.dateVisit) {\n                    res.dateVisit = moment(res.dateVisit).format('DD MMM, YYYY');\n                }\n                return res;\n            }));\n    }\n\n    getRelatedViralLoad(devolveId: number, patientId: number, date: Moment) {\n        const d = date.format(DATE_FORMAT);\n        return this.http.get<RelatedViralLoad>(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-viral-load/at/${d}`)\n            .pipe(map(res => {\n                if (res.dateResultReceived) {\n                    res.dateResultReceived = moment(res.dateResultReceived).format('DD MMM, YYYY');\n                }\n                return res;\n            }));\n    }\n\n    getRelatedCD4(devolveId: number, patientId: number, date: Moment) {\n        const d = date.format(DATE_FORMAT);\n        return this.http.get<RelatedCD4>(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-cd4/at/${d}`)\n            .pipe(map(res => {\n                if (res.dateResultReceived) {\n                    res.dateResultReceived = moment(res.dateResultReceived).format('DD MMM, YYYY');\n                }\n                return res;\n            }));\n    }\n\n    getStateByLga(id) {\n        return this.http.get(`/api/provinces/${id}/state`);\n    }\n\n    protected convertDateFromClient(devolve: Devolve): Devolve {\n        const copy: Devolve = Object.assign({}, devolve, {\n            dateDevolved: devolve.dateDevolved != null && devolve.dateDevolved.isValid() ? devolve.dateDevolved.format(DATE_FORMAT) : null,\n            dateNextClinic: devolve.dateNextClinic != null && devolve.dateNextClinic.isValid() ? devolve.dateNextClinic.format(DATE_FORMAT) : null,\n            dateNextRefill: devolve.dateNextRefill != null && devolve.dateNextRefill.isValid() ? devolve.dateNextRefill.format(DATE_FORMAT) : null,\n            dateDiscontinued: devolve.dateDiscontinued != null && devolve.dateDiscontinued.isValid() ? devolve.dateDiscontinued.format(DATE_FORMAT) : null,\n            dateReturnedToFacility: devolve.dateReturnedToFacility != null && devolve.dateReturnedToFacility.isValid() ? devolve.dateReturnedToFacility.format(DATE_FORMAT) : null\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.dateReturnedToFacility = res.body.dateReturnedToFacility != null ? moment(res.body.dateReturnedToFacility) : null;\n            res.body.dateNextRefill = res.body.dateNextRefill != null ? moment(res.body.dateNextRefill) : null;\n            res.body.dateNextClinic = res.body.dateNextClinic != null ? moment(res.body.dateNextClinic) : null;\n            res.body.dateDevolved = res.body.dateDevolved != null ? moment(res.body.dateDevolved) : null;\n            res.body.dateDiscontinued = res.body.dateDiscontinued != null ? moment(res.body.dateDiscontinued) : null;\n        }\n        return res;\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {CardViewDateItemModel, CardViewItem, CardViewTextItemModel, NotificationService} from '@alfresco/adf-core';\nimport {Devolve, RelatedCD4, RelatedClinic, RelatedPharmacy, RelatedViralLoad} from '../model/pharmacy.model';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {TdDialogService} from '@covalent/core';\nimport {DevolveService} from '../services/devolve.service';\n\n@Component({\n    selector: 'devolve-details',\n    templateUrl: './devolve.details.component.html'\n})\nexport class DevolveDetailsComponent implements OnInit {\n    properties: CardViewItem[] = [];\n    entity: Devolve;\n    relatedClinic: RelatedClinic;\n    relatedPharmacy: RelatedPharmacy;\n    relatedCD4: RelatedCD4;\n    relatedViralLoad: RelatedViralLoad;\n\n    constructor(private router: Router, private route: ActivatedRoute, private devolveService: DevolveService,\n                private _dialogService: TdDialogService,\n                private notificationService: NotificationService) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            this.buildProperties();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['/', 'devolves', this.entity.uuid, 'patient', this.entity.patient.uuid, 'edit']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this client devolve, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.devolveService.delete(this.entity.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['patients']);\n                    } else {\n                        this.notificationService.showError('Error deleting devolve, please try again');\n                    }\n                });\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateDevolved,\n            label: 'Date of Devolvement',\n            format: 'dd MMM, yyyy'\n        }));\n        let type = 'MMD';\n        switch (this.entity.dmocType) {\n            case 'ARC':\n                type = 'Adolescent Refill Club';\n                break;\n            case 'CPARP':\n                type = 'CPARP';\n                break;\n            case 'CARC':\n                type = 'CARC';\n                break;\n            case 'F_CARG':\n                type = 'F-CARG';\n                break;\n            case 'FAST_TRACK':\n                type = 'Fast Track';\n                break;\n            case 'S_CARG':\n                type = 's-CARG';\n                break;\n            case 'MMS':\n                type = 'MMS';\n                break;\n        }\n        this.properties.push(new CardViewTextItemModel({\n            key: 'ds',\n            value: type,\n            label: 'Type of DMOC'\n        }));\n        this.devolveService.getRelatedClinic(this.entity.id, this.entity.patient.id, this.entity.dateDevolved).subscribe(res => {\n            this.relatedClinic = res;\n            console.log('Related clinic', res);\n            if (this.relatedClinic.dateVisit) {\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedClinic.dateVisit,\n                    label: 'Date of Clinical Stage'\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedClinic && this.relatedClinic.clinicStage,\n                    label: 'Current Clinical Stage',\n                }));\n            }\n        });\n        this.devolveService.getRelatedPharmacy(this.entity.id, this.entity.patient.id, this.entity.dateDevolved).subscribe(res => {\n            this.relatedPharmacy = res;\n            if (this.relatedPharmacy.dateVisit) {\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedPharmacy.dateVisit,\n                    label: 'Date of Current ARV Regimen'\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedPharmacy && this.relatedPharmacy.regimen,\n                    label: 'Current ARV Regimen',\n                }));\n            }\n        });\n        this.devolveService.getRelatedViralLoad(this.entity.id, this.entity.patient.id, this.entity.dateDevolved).subscribe(res => {\n            this.relatedViralLoad = res;\n            if (this.relatedViralLoad.dateResultReceived) {\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedViralLoad.dateResultReceived,\n                    label: 'Date of Viral Load'\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedViralLoad && this.relatedViralLoad.value,\n                    label: 'Current Viral Load',\n                }));\n            }\n        });\n        this.devolveService.getRelatedCD4(this.entity.id, this.entity.patient.id, this.entity.dateDevolved).subscribe(res => {\n            this.relatedCD4 = res;\n            if (this.relatedCD4.dateResultReceived) {\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedCD4.dateResultReceived,\n                    label: 'Date of CD4'\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedCD4 && this.relatedCD4.value,\n                    label: 'Current Viral Load',\n                }));\n            }\n        });\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateNextClinic,\n            label: 'Date of next Clinic/Lab',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateNextRefill,\n            label: 'Date of Viral Load',\n            format: 'dd MMM, yyyy'\n        }));\n        if (this.entity.communityPharmacy) {\n            this.properties.push(new CardViewTextItemModel({\n                key: 'ds',\n                value: this.entity.communityPharmacy.name,\n                label: 'Community Pharmacy'\n            }));\n        }\n        if (this.entity.dateDiscontinued) {\n            this.properties.push(new CardViewDateItemModel({\n                key: 'ds',\n                value: this.entity.dateDiscontinued,\n                label: 'Date of Discontinuation',\n                format: 'dd MMM, yyyy'\n            }));\n\n            this.properties.push(new CardViewTextItemModel({\n                key: 'ds',\n                value: this.entity.reasonDiscontinued,\n                label: 'Reason of Discontinuation'\n            }));\n\n            if (this.entity.dateReturnedToFacility) {\n                this.properties.push(new CardViewDateItemModel({\n                    key: 'ds',\n                    value: this.entity.dateReturnedToFacility,\n                    label: 'Date Returned to Facility',\n                    format: 'dd MMM, yyyy'\n                }));\n            }\n        }\n    }\n\n    previousState() {\n        window.history.back();\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {\n    CommunityPharmacy,\n    Devolve,\n    Patient,\n    RelatedCD4,\n    RelatedClinic,\n    RelatedPharmacy,\n    RelatedViralLoad\n} from '../model/pharmacy.model';\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\nimport {PharmacyService} from '../services/pharmacy.service';\nimport {CardViewItem, CardViewTextItemModel, NotificationService} from '@alfresco/adf-core';\nimport {AppLoaderService, entityCompare} from '@lamis/web-core';\nimport {ActivatedRoute} from '@angular/router';\nimport {DevolveService} from '../services/devolve.service';\nimport {Observable} from 'rxjs';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\n\nconst moment = moment_;\n\nexport interface Dmoc {\n    name: string;\n    value: string;\n}\n\n@Component({\n    selector: 'devolve-edit',\n    templateUrl: './devolve.edit.component.html'\n})\nexport class DevolveEditComponent implements OnInit {\n    entity: Devolve = {};\n    relatedClinic: RelatedClinic;\n    relatedPharmacy: RelatedPharmacy;\n    relatedCD4: RelatedCD4;\n    relatedViralLoad: RelatedViralLoad;\n    communityPharmacies: CommunityPharmacy[];\n    states: any[] = [];\n    lgas: any[];\n    dmocTypes: Dmoc[] = [];\n    patient: Patient;\n    dateRegistration: Moment;\n    maxNextVisit: Moment;\n    isSaving: boolean;\n    error = false;\n    tomorrow = moment().add(1, 'days');\n    today = moment();\n    minNextAppointment: Moment;\n    editing = {};\n    state: any;\n    lga: any;\n    devolveDates: Moment[] = [];\n    enableCommunityPharmacy = false;\n    properties: Array<CardViewItem> = [];\n    minDate: Moment;\n    minDiscontinued: Moment;\n\n    constructor(private pharmacyService: PharmacyService,\n                private devolveService: DevolveService,\n                protected notification: NotificationService,\n                private appLoaderService: AppLoaderService,\n                protected activatedRoute: ActivatedRoute) {\n    }\n\n    createEntity(): Devolve {\n        return <Devolve>{};\n    }\n\n    ngOnInit(): void {\n        this.dmocTypes.push({\n            name: 'Adolescent Refill Club',\n            value: 'ARC'\n        });\n        this.dmocTypes.push({\n            name: 'CARC',\n            value: 'CARC'\n        });\n        this.dmocTypes.push({\n            name: 'CPARP',\n            value: 'CPARP'\n        });\n        this.dmocTypes.push({\n            name: 'F-CARG',\n            value: 'F_CARG'\n        });\n        this.dmocTypes.push({\n            name: 'Fast Track',\n            value: 'FAST_TRACK'\n        });\n        this.dmocTypes.push({\n            name: 'S-CARG',\n            value: 'S_CARG'\n        });\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.pharmacyService.getPatient(patientId).subscribe((res) => {\n                this.entity.patient = res;\n                this.patient = res;\n                this.dateRegistration = res.dateRegistration;\n                this.entity.facility = res.facility;\n                this.minNextAppointment = this.dateRegistration.add(15, 'days');\n                /*this.devolveService.getDevolveDatesByPatient(res.id).subscribe((res) => {\n                    this.devolveDates = res;\n                });*/\n                this.updateRelated();\n            });\n\n            if (this.entity.id) {\n                const dmoc = this.entity.dmocType;\n                if (dmoc === 'MMD') {\n                    this.dmocTypes.push({\n                        name: 'MMD',\n                        value: 'MMD'\n                    });\n                } else if (dmoc === 'MMS') {\n                    this.dmocTypes.push({\n                        name: 'MMS',\n                        value: 'MMS'\n                    });\n                }\n\n                if (this.entity.communityPharmacy) {\n                    this.enableCommunityPharmacy = true;\n                    this.devolveService.getStateByLga(this.entity.communityPharmacy.lga.id).subscribe(res => {\n                        this.state = res;\n                        this.lga = this.entity.communityPharmacy.lga;\n                        this.lgaChanged(this.lga.id);\n                        this.stateChanged(this.state.id);\n                    });\n                }\n\n                if (this.entity.dateDiscontinued) {\n                    this.minDate = this.entity.dateDiscontinued.clone().add(2, 'day');\n                } else {\n                    this.minDiscontinued = this.entity.dateDevolved.clone().add(1, 'day');\n                    this.minDate = this.entity.dateDevolved.clone().add(2, 'day');\n                }\n            }\n\n            this.devolveService.getStates().subscribe(res => this.states = res);\n        });\n    }\n\n    dateDiscontinuedChanged() {\n        if (this.entity.dateDiscontinued) {\n            this.minDate = this.entity.dateDiscontinued.clone().add(1, 'day');\n        }\n    }\n\n    filterDates(date: Moment): boolean {\n        let exists = false;\n\n        this.devolveDates.forEach(d => {\n            if (date.diff(d, 'days') === 0) {\n                exists = true;\n            }\n        });\n        return (this.entity.id && date.diff(this.entity.dateDevolved, 'days') === 0) || !exists;\n    }\n\n    stateChanged(id) {\n        this.devolveService.getLgasByState(id).subscribe(res => this.lgas = res);\n    }\n\n    lgaChanged(id) {\n        this.devolveService.getCommunityPharmaciesByLga(id).subscribe(res => this.communityPharmacies = res);\n    }\n\n    communityPharmacyChanged(communityPharmacy: CommunityPharmacy) {\n        this.properties = [];\n        this.properties.push(new CardViewTextItemModel({\n            key: 'add',\n            label: 'Address',\n            value: communityPharmacy.address\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            key: 'phone',\n            label: 'Telephone Number',\n            value: communityPharmacy.phone\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            key: 'email',\n            label: 'Email',\n            value: communityPharmacy.email\n        }));\n    }\n\n    dmocChanged(dmocType: string) {\n        this.enableCommunityPharmacy = dmocType === 'CPARP';\n    }\n\n    dateDevolvedChanged(date: Moment) {\n        this.minNextAppointment = date.clone().add(7, 'days');\n        this.maxNextVisit = date.clone().add(3, 'months');\n        console.log('Dates', this.minNextAppointment, this.maxNextVisit);\n        this.updateRelated();\n    }\n\n    updateRelated() {\n        this.entity.relatedViralLoad = null;\n        this.entity.relatedClinic = null;\n        this.entity.relatedCd4 = null;\n        this.entity.relatedPharmacy = null;\n        if (this.entity.dateDevolved) {\n            this.devolveService.getRelatedClinic(this.entity.id || 0, this.patient.id, this.entity.dateDevolved).subscribe(res => {\n                this.relatedClinic = res;\n                this.entity.relatedClinic = {id: res.id};\n            });\n            this.devolveService.getRelatedPharmacy(this.entity.id || 0, this.patient.id, this.entity.dateDevolved).subscribe(res => {\n                this.relatedPharmacy = res;\n                this.entity.relatedPharmacy = {id: res.id};\n            });\n            this.devolveService.getRelatedCD4(this.entity.id || 0, this.patient.id, this.entity.dateDevolved).subscribe(res => {\n                this.relatedCD4 = res;\n                this.entity.relatedCd4 = {id: res.id};\n            });\n            this.devolveService.getRelatedViralLoad(this.entity.id || 0, this.patient.id, this.entity.dateDevolved).subscribe(res => {\n                this.relatedViralLoad = res;\n                this.entity.relatedViralLoad = {id: res.id};\n            });\n        }\n    }\n\n    entityCompare(e1, e2) {\n        return entityCompare(e1, e2);\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    save() {\n        // this.progressBar.mode = 'indeterminate';\n        this.appLoaderService.open('Saving visit...');\n        this.isSaving = true;\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.devolveService.update(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.devolveService.create(this.entity));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.appLoaderService.close();\n                this.onSaveError();\n                this.onError(res.message);\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Devolve successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.error = true;\n        this.notification.showError('Error saving devolve');\n    }\n\n    protected onError(errorMessage: string) {\n        this.isSaving = false;\n        this.notification.showError(errorMessage);\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {PharmacyService} from '../services/pharmacy.service';\nimport {DevolveService} from '../services/devolve.service';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {AppLoaderService} from '@lamis/web-core';\nimport {ActivatedRoute} from '@angular/router';\nimport {Devolve} from '../model/pharmacy.model';\nimport {Observable} from 'rxjs';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {Moment} from 'moment';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'end-devolve',\n    templateUrl: './end.devolve.component.html'\n})\nexport class EndDevolveComponent implements OnInit {\n    entity: Devolve = {};\n    dmocType: string = '';\n    isSaving = false;\n    minDate: Moment;\n    minDiscontinued: Moment;\n    today = moment();\n\n    constructor(private pharmacyService: PharmacyService,\n                private devolveService: DevolveService,\n                protected notification: NotificationService,\n                private appLoaderService: AppLoaderService,\n                protected activatedRoute: ActivatedRoute) {\n    }\n\n    ngOnInit(): void {\n        const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n        this.pharmacyService.getPatient(patientId).subscribe((res) => {\n            this.pharmacyService.getDevolvement(res.id, moment()).subscribe(r => {\n                this.entity = r;\n                if (this.entity.dateDiscontinued) {\n                    this.minDate = r.dateDiscontinued.clone().add(2, 'day');\n                } else {\n                    this.minDiscontinued = r.dateDevolved.clone().add(1, 'day');\n                    this.minDate = r.dateDevolved.clone().add(2, 'day');\n                }\n\n                let type = 'MMD';\n                switch (r.dmocType) {\n                    case 'ARC':\n                        type = 'Adolescent Refill Club';\n                        break;\n                    case 'CPARP':\n                        type = 'CPARP';\n                        break;\n                    case 'CARC':\n                        type = 'CARC';\n                        break;\n                    case 'F_CARG':\n                        type = 'F-CARG';\n                        break;\n                    case 'FAST_TRACK':\n                        type = 'Fast Track';\n                        break;\n                    case 'S_CARG':\n                        type = 'S-CARG';\n                        break;\n                    case 'MMS':\n                        type = 'MMS';\n                        break;\n                }\n                this.dmocType = type;\n            });\n        });\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n        });\n\n    }\n\n    dateDiscontinuedChanged() {\n        if (this.entity.dateDiscontinued) {\n            this.minDate = this.entity.dateDiscontinued.clone().add(1, 'day');\n        }\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    save() {\n        this.appLoaderService.open('Saving visit...');\n        this.isSaving = true;\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.devolveService.update(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.devolveService.create(this.entity));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.appLoaderService.close();\n                this.onSaveError();\n                this.onError(res.message);\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Devolve successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.notification.showError('Error saving devolve');\n    }\n\n    protected onError(errorMessage: string) {\n        this.isSaving = false;\n        this.notification.showError(errorMessage);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpResponse} from '@angular/common/http';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes} from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport {Devolve} from '../model/pharmacy.model';\nimport {DevolveEditComponent} from '../components/devolve.edit.component';\nimport {DevolveDetailsComponent} from '../components/devolve.details.component';\nimport {DevolveService} from './devolve.service';\nimport {EndDevolveComponent} from '../components/end.devolve.component';\n\n@Injectable()\nexport class DevolveResolve implements Resolve<Devolve> {\n    constructor(private service: DevolveService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Devolve> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Devolve>) => response.ok),\n                map((patient: HttpResponse<Devolve>) => patient.body)\n            );\n        }\n        return of(<Devolve>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Client Devolvement',\n            breadcrumb: 'CLIENT DEVOLVEMENT'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: DevolveDetailsComponent,\n                resolve: {\n                    entity: DevolveResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Client Devolve',\n                    breadcrumb: 'CLIENT DEVOLVE'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: DevolveEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Client Devolve',\n                    breadcrumb: 'DEVOLVE CLIENT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: DevolveEditComponent,\n                resolve: {\n                    entity: DevolveResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Devolve Edit',\n                    breadcrumb: 'DEVOLVE EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'return/patient/:patientId/new',\n                component: EndDevolveComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'End Devolve',\n                    breadcrumb: 'END CLIENT DEVOLVE'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import {NgModule} from '@angular/core';\nimport {DevolveDetailsComponent} from './components/devolve.details.component';\nimport {DevolveEditComponent} from './components/devolve.edit.component';\nimport {CoreModule} from '@alfresco/adf-core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CustomFormsModule} from 'ng2-validation';\nimport {MatDateFormatModule} from '@lamis/web-core';\nimport {\n    MatButtonModule,\n    MatCardModule,\n    MatDatepickerModule,\n    MatInputModule,\n    MatSelectModule\n} from '@angular/material';\nimport {DevolveResolve, ROUTES} from './services/devolve.route';\nimport {RouterModule} from '@angular/router';\nimport {CovalentCommonModule, CovalentDialogsModule} from '@covalent/core';\nimport {EndDevolveComponent} from './components/end.devolve.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        ReactiveFormsModule,\n        CustomFormsModule,\n        CoreModule,\n        MatDatepickerModule,\n        MatDateFormatModule,\n        MatInputModule,\n        MatButtonModule,\n        MatCardModule,\n        MatSelectModule,\n        CovalentCommonModule,\n        CovalentDialogsModule\n    ],\n    declarations: [\n        DevolveDetailsComponent,\n        DevolveEditComponent,\n        EndDevolveComponent\n    ],\n    providers: [\n        DevolveResolve\n    ]\n})\nexport class DevolveModule {\n\n}\n"]}