{
    "version": 3,
    "sources": [
        "../../../../../../../../node_modules/tslib/tslib.es6.js",
        "ng://lamis-pharmacy-1.1.4/lib/services/pharmacy.service.ts",
        "ng://lamis-pharmacy-1.1.4/lib/components/pharmacy-details.component.ts",
        "ng://lamis-pharmacy-1.1.4/lib/components/pharmacy-edit.component.ts",
        "ng://lamis-pharmacy-1.1.4/lib/services/pharmacy.route.ts",
        "ng://lamis-pharmacy-1.1.4/lib/components/pharmacy.widget.ts",
        "ng://lamis-pharmacy-1.1.4/lib/material.module.ts",
        "ng://lamis-pharmacy-1.1.4/lib/pharmacy.widget.module.ts",
        "ng://lamis-pharmacy-1.1.4/lib/pharmacy.module.ts",
        "ng://lamis-pharmacy-1.1.4/lib/services/devolve.service.ts",
        "ng://lamis-pharmacy-1.1.4/lib/components/devolve.details.component.ts",
        "ng://lamis-pharmacy-1.1.4/lib/components/devolve.edit.component.ts",
        "ng://lamis-pharmacy-1.1.4/lib/components/end.devolve.component.ts",
        "ng://lamis-pharmacy-1.1.4/lib/services/devolve.route.ts",
        "ng://lamis-pharmacy-1.1.4/lib/devolve.module.ts"
    ],
    "names": [
        "__decorate",
        "decorators",
        "target",
        "key",
        "desc",
        "d",
        "c",
        "arguments",
        "length",
        "r",
        "Object",
        "getOwnPropertyDescriptor",
        "Reflect",
        "decorate",
        "i",
        "defineProperty",
        "__param",
        "paramIndex",
        "decorator",
        "__metadata",
        "metadataKey",
        "metadataValue",
        "metadata",
        "__read",
        "o",
        "n",
        "m",
        "Symbol",
        "iterator",
        "e",
        "call",
        "ar",
        "next",
        "done",
        "push",
        "value",
        "error",
        "__spread",
        "concat",
        "moment",
        "moment_",
        "PharmacyService",
        "http",
        "serverUrl",
        "this",
        "resourceUrl",
        "SERVER_API_URL",
        "prototype",
        "create",
        "pharmacy",
        "_this",
        "copy",
        "convertDateFromClient",
        "post",
        "observe",
        "pipe",
        "map",
        "res",
        "convertDateFromServer",
        "update",
        "put",
        "find",
        "id",
        "get",
        "findByUuid",
        "delete",
        "getPatient",
        "dateRegistration",
        "getVisitDatesByPatient",
        "patientId",
        "forEach",
        "regimenTypes",
        "regimenInfo",
        "adrs",
        "getLinesByPharmacy",
        "pharmacyId",
        "regimesByRegimenType",
        "getDrugsByRegimen",
        "getRegimenById",
        "latestVisit",
        "getDevolvement",
        "date",
        "format",
        "DATE_FORMAT",
        "dateDevolved",
        "dateReturnedToFacility",
        "dateNextClinic",
        "dateNextRefill",
        "assign",
        "dateVisit",
        "isValid",
        "nextAppointment",
        "body",
        "convertDateArrayFromServer",
        "HttpClient",
        "Inject",
        "args",
        "SERVER_API_URL_CONFIG",
        "Injectable",
        "providedIn",
        "tslib_1.__param",
        "PharmacyDetailsComponent",
        "router",
        "route",
        "pharmacyService",
        "_dialogService",
        "notificationService",
        "properties",
        "ngOnInit",
        "data",
        "subscribe",
        "_a",
        "entity",
        "snapshot",
        "paramMap",
        "patient",
        "buildProperties",
        "edit",
        "navigate",
        "uuid",
        "openConfirm",
        "title",
        "message",
        "cancelButton",
        "acceptButton",
        "width",
        "afterClosed",
        "accept",
        "ok",
        "showError",
        "CardViewDateItemModel",
        "label",
        "dataSource",
        "CardViewIntItemModel",
        "duration",
        "sort",
        "r1",
        "r2",
        "pop",
        "CardViewTextItemModel",
        "mmdType",
        "CardViewBoolItemModel",
        "adrScreened",
        "prescriptionError",
        "regimenType",
        "regimen",
        "previousState",
        "window",
        "history",
        "back",
        "ngOnDestroy",
        "Router",
        "ActivatedRoute",
        "TdDialogService",
        "NotificationService",
        "Component",
        "selector",
        "template",
        "PharmacyEditComponent",
        "notification",
        "appLoaderService",
        "activatedRoute",
        "regimens",
        "selectedRegimens",
        "tomorrow",
        "add",
        "today",
        "ColumnMode",
        "editing",
        "rows",
        "drugIds",
        "Set",
        "visitDates",
        "drugs",
        "createEntity",
        "isSaving",
        "undefined",
        "facility",
        "minNextAppointment",
        "clone",
        "quantity",
        "morning",
        "afternoon",
        "evening",
        "includes",
        "devolve",
        "updateDmocType",
        "dateVisitChanged",
        "suggestedNextAppointment",
        "subtract",
        "maxNextVisit",
        "weekday",
        "isoWeekday",
        "type",
        "dmocType",
        "filterDates",
        "exists",
        "diff",
        "entityCompare",
        "e1",
        "e2",
        "save",
        "submitButton",
        "disabled",
        "open",
        "lines",
        "subscribeToSaveResponse",
        "regimenTypeChange",
        "durationChanged",
        "regimenChange",
        "event",
        "drug",
        "console",
        "log",
        "description",
        "name",
        "regimenDrug",
        "filter",
        "row",
        "updateValue",
        "cell",
        "rowIndex",
        "total",
        "parseInt",
        "result",
        "onSaveSuccess",
        "close",
        "onSaveError",
        "onError",
        "showInfo",
        "errorMessage",
        "AppLoaderService",
        "tslib_1.__decorate",
        "ViewChild",
        "MatProgressBar",
        "static",
        "MatButton",
        "PharmacyResolve",
        "service",
        "resolve",
        "state",
        "params",
        "response",
        "of",
        "ROUTES",
        "path",
        "breadcrumb",
        "children",
        "component",
        "authorities",
        "PharmacyWidget",
        "Input",
        "modules",
        "MatAutocompleteModule",
        "MatButtonModule",
        "MatCardModule",
        "MatCheckboxModule",
        "MatChipsModule",
        "MatDatepickerModule",
        "MatDialogModule",
        "MatGridListModule",
        "MatIconModule",
        "MatInputModule",
        "MatListModule",
        "MatNativeDateModule",
        "MatOptionModule",
        "MatProgressSpinnerModule",
        "MatRadioModule",
        "MatRippleModule",
        "MatSelectModule",
        "MatSlideToggleModule",
        "MatTableModule",
        "MatTabsModule",
        "MatMenuModule",
        "MatProgressBarModule",
        "MatSidenavModule",
        "MatSnackBarModule",
        "MatToolbarModule",
        "MatTooltipModule",
        "MatDatetimepickerModule",
        "MatNativeDatetimeModule",
        "MaterialModule",
        "NgModule",
        "imports",
        "exports",
        "PharmacyWidgetModule",
        "CommonModule",
        "CoreModule",
        "declarations",
        "entryComponents",
        "providers",
        "PharmacyModule",
        "RouterModule",
        "forChild",
        "FormsModule",
        "CovalentMessageModule",
        "CovalentDialogsModule",
        "NgxDatatableModule",
        "ReactiveFormsModule",
        "MatDateFormatModule",
        "CustomFormsModule",
        "DevolveService",
        "getDevolveDatesByPatient",
        "getStates",
        "getLgasByState",
        "getCommunityPharmaciesByLga",
        "getRelatedPharmacy",
        "devolveId",
        "getRelatedClinic",
        "getRelatedViralLoad",
        "dateResultReceived",
        "getRelatedCD4",
        "getStateByLga",
        "dateDiscontinued",
        "DevolveDetailsComponent",
        "devolveService",
        "relatedClinic",
        "clinicStage",
        "relatedPharmacy",
        "relatedViralLoad",
        "relatedCD4",
        "communityPharmacy",
        "reasonDiscontinued",
        "DevolveEditComponent",
        "states",
        "dmocTypes",
        "devolveDates",
        "enableCommunityPharmacy",
        "updateRelated",
        "dmoc",
        "lga",
        "lgaChanged",
        "stateChanged",
        "minDate",
        "minDiscontinued",
        "dateDiscontinuedChanged",
        "lgas",
        "communityPharmacies",
        "communityPharmacyChanged",
        "address",
        "phone",
        "email",
        "dmocChanged",
        "dateDevolvedChanged",
        "relatedCd4",
        "EndDevolveComponent",
        "DevolveResolve",
        "DevolveModule",
        "CovalentCommonModule"
    ],
    "mappings": "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",
    "sourcesContent": [
        "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
        "import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\nimport { map } from 'rxjs/operators';\nimport {\n    Adr,\n    Devolve,\n    DrugDTO,\n    Patient,\n    Pharmacy,\n    PharmacyLine,\n    Regimen,\n    RegimenInfo,\n    RegimenType\n} from '../model/pharmacy.model';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Pharmacy>;\ntype EntityArrayResponseType = HttpResponse<Pharmacy[]>;\n\n@Injectable({providedIn: 'root'})\nexport class PharmacyService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/pharmacies';\n    }\n\n    create(pharmacy: Pharmacy): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(pharmacy);\n        return this.http\n            .post<Pharmacy>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(pharmacy: Pharmacy): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(pharmacy);\n        return this.http\n            .put<Pharmacy>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<Pharmacy>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: string): Observable<EntityResponseType> {\n        return this.http\n            .get<Pharmacy>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getPatient(id: any) {\n        return this.http.get<Patient>(`/api/patients/by-uuid/${id}`, {observe: 'body'})\n            .pipe(map((res) => {\n                if (res) {\n                    res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null\n                }\n                return res;\n            }))\n    }\n\n    getVisitDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`${this.resourceUrl}/patient/${patientId}/visit-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            )\n    }\n\n    regimenTypes() {\n        return this.http.get<RegimenType[]>(`${this.resourceUrl}/regimen-types`)\n    }\n\n    regimenInfo(patientId: number) {\n        return this.http.get<RegimenInfo>(`${this.resourceUrl}/regimen-info/patient/${patientId}`)\n    }\n\n    adrs() {\n        return this.http.get<Adr[]>(`${this.resourceUrl}/adrs`)\n    }\n\n    getLinesByPharmacy(pharmacyId: number) {\n        return this.http.get<PharmacyLine[]>(`${this.resourceUrl}/${pharmacyId}/lines`)\n    }\n\n    regimesByRegimenType(id: number) {\n        return this.http.get<Regimen[]>(`${this.resourceUrl}/regimens/regimen-type/${id}`)\n    }\n\n    getDrugsByRegimen(id: number) {\n        return this.http.get<DrugDTO[]>(`${this.resourceUrl}/drugs/regimen/${id}`)\n    }\n\n    getRegimenById(id) {\n        return this.http.get<Regimen>(`${this.resourceUrl}/regimen/${id}`)\n    }\n\n    latestVisit(patientId: number) {\n        return this.http.get<Pharmacy>(`${this.resourceUrl}/patient/${patientId}/latest`)\n    }\n\n    getDevolvement(patientId: number, date: Moment) {\n        const d = date.format(DATE_FORMAT);\n        return this.http.get<Devolve>(`${this.resourceUrl}/patient/${patientId}/devolvement/at/${d}`)\n            .pipe(map(res => {\n                res.dateDevolved = res.dateDevolved != null ? moment(res.dateDevolved) : null;\n                res.dateReturnedToFacility = res.dateReturnedToFacility != null ? moment(res.dateReturnedToFacility) : null;\n                res.dateNextClinic = res.dateNextClinic != null ? moment(res.dateNextClinic) : null;\n                res.dateNextRefill = res.dateNextRefill != null ? moment(res.dateNextRefill) : null;\n                return res;\n            }))\n    }\n\n    protected convertDateFromClient(pharmacy: Pharmacy): Pharmacy {\n        const copy: Pharmacy = Object.assign({}, pharmacy, {\n            dateVisit: pharmacy.dateVisit != null && pharmacy.dateVisit.isValid() ? pharmacy.dateVisit.format(DATE_FORMAT) : null,\n            nextAppointment: pharmacy.nextAppointment != null && pharmacy.nextAppointment.isValid() ? pharmacy.nextAppointment.format(DATE_FORMAT) : null\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.nextAppointment = res.body.nextAppointment != null ? moment(res.body.nextAppointment) : null;\n            res.body.dateVisit = res.body.dateVisit != null ? moment(res.body.dateVisit) : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((pharmacy: Pharmacy) => {\n                pharmacy.dateVisit = pharmacy.dateVisit != null ? moment(pharmacy.dateVisit) : null;\n                pharmacy.nextAppointment = pharmacy.nextAppointment != null ? moment(pharmacy.nextAppointment) : null;\n                1\n            });\n        }\n        return res;\n    }\n}\n",
        "import { Component, ComponentFactoryResolver, OnDestroy, OnInit } from '@angular/core';\r\nimport { Pharmacy, PharmacyLine, RegimenInfo } from '../model/pharmacy.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PharmacyService } from '../services/pharmacy.service';\r\nimport { TdDialogService } from '@covalent/core';\r\nimport {\r\n    CardViewBoolItemModel,\r\n    CardViewDateItemModel,\r\n    CardViewIntItemModel,\r\n    CardViewItem,\r\n    CardViewTextItemModel,\r\n    NotificationService\r\n} from '@alfresco/adf-core';\r\n\r\n@Component({\r\n    selector: 'lamis-pharmacy',\r\n    templateUrl: './pharmacy-details.component.html'\r\n})\r\nexport class PharmacyDetailsComponent implements OnInit, OnDestroy {\r\n    properties: CardViewItem[] = [];\r\n    entity: Pharmacy;\r\n    public dataSource: PharmacyLine[];\r\n\r\n    constructor(private router: Router, private route: ActivatedRoute, private pharmacyService: PharmacyService,\r\n                private _dialogService: TdDialogService,\r\n                private notificationService: NotificationService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            const patientId = this.route.snapshot.paramMap.get('patientId');\r\n            this.pharmacyService.getPatient(patientId).subscribe((res) => this.entity.patient = res);\r\n            this.buildProperties();\r\n        });\r\n    }\r\n\r\n    edit() {\r\n        this.router.navigate(['/', 'pharmacies', this.entity.uuid, 'patient', this.entity.patient.id, 'edit']);\r\n    }\r\n\r\n    delete() {\r\n        this._dialogService.openConfirm({\r\n            title: 'Confirm',\r\n            message: 'Do you want to delete this pharmacy refill, action cannot be reversed?',\r\n            cancelButton: 'No',\r\n            acceptButton: 'Yes',\r\n            width: '500px',\r\n        }).afterClosed().subscribe((accept: boolean) => {\r\n            if (accept) {\r\n                this.pharmacyService.delete(this.entity.id).subscribe((res) => {\r\n                    if (res.ok) {\r\n                        this.router.navigate(['patients'])\r\n                    } else {\r\n                        this.notificationService.showError('Error deleting visit, please try again')\r\n                    }\r\n                })\r\n            } else {\r\n                // DO SOMETHING ELSE\r\n            }\r\n        });\r\n    }\r\n\r\n    buildProperties() {\r\n        this.properties.push(new CardViewDateItemModel({\r\n            key: 'ds',\r\n            value: this.entity.dateVisit,\r\n            label: 'Date of Dispensing',\r\n            format: 'dd MMM, yyyy'\r\n        }));\r\n        this.pharmacyService.getLinesByPharmacy(this.entity.id)\r\n            .subscribe(res => {\r\n                this.dataSource = res;\r\n                this.properties.push(new CardViewIntItemModel({\r\n                    label: 'Refill Period (days)',\r\n                    key: 'cs',\r\n                    value: res.map(r => r.duration)\r\n                        .sort((r1, r2) => r1 - r2)\r\n                        .pop()\r\n                }));\r\n            });\r\n\r\n        this.properties.push(new CardViewDateItemModel({\r\n            key: 'na',\r\n            value: this.entity.nextAppointment,\r\n            label: 'Next Pharmacy Refill',\r\n            format: 'dd MMM, yyyy'\r\n        }));\r\n        this.properties.push(new CardViewTextItemModel({\r\n            label: 'MMD Type',\r\n            key: 'fs',\r\n            value: this.entity.mmdType\r\n        }));\r\n        this.properties.push(new CardViewBoolItemModel({\r\n            label: 'Adverse Drug Reactions',\r\n            key: 'adr',\r\n            value: this.entity.adrScreened\r\n        }));\r\n        this.properties.push(new CardViewBoolItemModel({\r\n            label: 'Prescription error',\r\n            key: 'bw',\r\n            value: this.entity.prescriptionError\r\n        }));\r\n        this.pharmacyService.regimenInfo(this.entity.patient.id)\r\n            .subscribe((res: RegimenInfo) => {\r\n                this.properties.push(new CardViewTextItemModel({\r\n                    label: 'Regimen Line',\r\n                    key: 'cs',\r\n                    value: res.regimenType\r\n                }));\r\n                this.properties.push(new CardViewTextItemModel({\r\n                    label: 'Regimen',\r\n                    key: 'ts',\r\n                    value: res.regimen\r\n                }));\r\n            });\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n    }\r\n}\r\n",
        "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport {\r\n    Adr,\r\n    Devolve,\r\n    Drug,\r\n    DrugDTO,\r\n    Patient,\r\n    Pharmacy,\r\n    PharmacyLine,\r\n    Regimen,\r\n    RegimenType\r\n} from '../model/pharmacy.model';\r\nimport { PharmacyService } from '../services/pharmacy.service';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatButton, MatProgressBar } from '@angular/material';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ColumnMode } from '@swimlane/ngx-datatable';\r\nimport * as moment_ from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { AppLoaderService, entityCompare } from '@lamis/web-core';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-pharmacy-edit',\r\n    templateUrl: './pharmacy-edit.component.html'\r\n})\r\nexport class PharmacyEditComponent implements OnInit {\r\n    @ViewChild(MatProgressBar, {static: true}) progressBar: MatProgressBar;\r\n    @ViewChild(MatButton, {static: true}) submitButton: MatButton;\r\n    entity: Pharmacy = {};\r\n    patient: Patient;\r\n    dateRegistration: Moment;\r\n    maxNextVisit: Moment;\r\n    regimenTypes: RegimenType[] = [];\r\n    regimens: Regimen[] = [];\r\n    selectedRegimens: Regimen[] = [];\r\n    adrs: Adr[];\r\n    isSaving: boolean;\r\n    error = false;\r\n    tomorrow = moment().add(1, 'days');\r\n    today = moment();\r\n    minNextAppointment: Moment;\r\n    ColumnMode = ColumnMode;\r\n    editing = {};\r\n    rows: PharmacyLine[] = [];\r\n    drugIds = new Set();\r\n    visitDates: Moment[] = [];\r\n    devolve: Devolve;\r\n    dmocType: string;\r\n    drugs: Drug[] = [];\r\n\r\n    constructor(private pharmacyService: PharmacyService,\r\n                protected notification: NotificationService,\r\n                private appLoaderService: AppLoaderService,\r\n                protected activatedRoute: ActivatedRoute) {\r\n    }\r\n\r\n    createEntity(): Pharmacy {\r\n        return <Pharmacy>{};\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isSaving = false;\r\n        this.activatedRoute.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            if (this.entity === undefined) {\r\n                this.entity = this.createEntity();\r\n            }\r\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\r\n            this.pharmacyService.getPatient(patientId).subscribe((res) => {\r\n                this.entity.patient = res;\r\n                this.patient = res;\r\n                this.dateRegistration = res.dateRegistration;\r\n                this.entity.facility = res.facility;\r\n                this.minNextAppointment = this.dateRegistration.clone().add(15, 'days');\r\n                this.pharmacyService.getVisitDatesByPatient(res.id).subscribe((res) => {\r\n                    this.visitDates = res;\r\n                });\r\n            });\r\n\r\n            if (this.entity.id) {\r\n                this.pharmacyService.getLinesByPharmacy(this.entity.id)\r\n                    .subscribe((res: PharmacyLine[]) => {\r\n                        this.rows = res.map(r => {\r\n                            r.quantity = (r.morning + r.afternoon + r.evening) * r.duration;\r\n\r\n                            this.pharmacyService.getRegimenById(r.regimen.id).subscribe(res => {\r\n                                if (!this.regimens.map(r => r.id).includes(r.regimen.id)) {\r\n                                    this.regimens.push(res);\r\n                                    this.selectedRegimens.push(res);\r\n                                    this.regimens = [...this.regimens];\r\n                                    this.selectedRegimens = [...this.selectedRegimens];\r\n                                }\r\n                            });\r\n                            return r;\r\n                        });\r\n\r\n                        this.entity.duration = res.map(r => r.duration)\r\n                            .sort((r1, r2) => r1 - r2)\r\n                            .pop();\r\n                    });\r\n                this.pharmacyService.getDevolvement(this.entity.patient.id, this.entity.dateVisit).subscribe(res => {\r\n                    this.devolve = res;\r\n                    this.updateDmocType();\r\n                });\r\n            }\r\n\r\n            this.pharmacyService.regimenTypes().subscribe(res => this.regimenTypes = res);\r\n        });\r\n    }\r\n\r\n    dateVisitChanged(date: Moment) {\r\n        this.entity.nextAppointment = this.suggestedNextAppointment();\r\n        this.minNextAppointment = this.entity.nextAppointment.clone().subtract(7, 'days');\r\n        this.maxNextVisit = this.entity.nextAppointment.clone().add(180, 'days');\r\n        this.pharmacyService.getDevolvement(this.entity.patient.id, this.entity.dateVisit).subscribe(res => {\r\n            this.devolve = res;\r\n            this.updateDmocType();\r\n        });\r\n\r\n    }\r\n\r\n    suggestedNextAppointment(): Moment {\r\n        if (this.entity.dateVisit) {\r\n            let nextAppointment = this.entity.dateVisit.clone().add(this.entity.duration - 2 || 13, 'days');\r\n            const weekday = nextAppointment.isoWeekday();\r\n            if (weekday === 6) {\r\n                nextAppointment = nextAppointment.clone().add(2, 'days');\r\n            } else if (weekday === 7) {\r\n                nextAppointment = nextAppointment.clone().add(1, 'days');\r\n            }\r\n            return nextAppointment;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    updateDmocType() {\r\n        let type = 'MMD';\r\n        switch (this.devolve.dmocType) {\r\n            case 'ARC':\r\n                type = 'Adolescent Refill Club';\r\n                break;\r\n            case 'CPARP':\r\n                type = 'CPARP';\r\n                break;\r\n            case 'CARC':\r\n                type = 'CARC';\r\n                break;\r\n            case 'F_CARG':\r\n                type = 'F-CARG';\r\n                break;\r\n            case 'FAST_TRACK':\r\n                type = 'Fast Track';\r\n                break;\r\n            case 'S_CARG':\r\n                type = 'S-CARG';\r\n                break;\r\n            case 'MMS':\r\n                type = 'MMS';\r\n                break;\r\n        }\r\n        this.dmocType = type;\r\n    }\r\n\r\n    filterDates(date: Moment): boolean {\r\n        let exists = false;\r\n\r\n        this.visitDates.forEach(d => {\r\n            if (date.diff(d, 'days') === 0) {\r\n                exists = true;\r\n            }\r\n        });\r\n        return (this.entity.id && date.diff(this.entity.dateVisit, 'days') === 0) || !exists;\r\n    }\r\n\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    entityCompare(e1, e2) {\r\n        return entityCompare(e1, e2)\r\n    }\r\n\r\n    save() {\r\n        this.submitButton.disabled = true;\r\n        //this.progressBar.mode = 'indeterminate';\r\n        this.appLoaderService.open('Saving visit...');\r\n        this.entity.lines = this.rows;\r\n        this.isSaving = true;\r\n        if (this.entity.id !== undefined) {\r\n            this.subscribeToSaveResponse(this.pharmacyService.update(this.entity));\r\n        } else {\r\n            this.subscribeToSaveResponse(this.pharmacyService.create(this.entity));\r\n        }\r\n    }\r\n\r\n    regimenTypeChange(type: any) {\r\n        this.pharmacyService.regimesByRegimenType(type.id).subscribe((res: Regimen[]) => {\r\n            res.forEach((regimen: Regimen) => {\r\n                if (!this.regimens.map(r => r.id).includes(regimen.id)) {\r\n                    this.regimens.push(regimen);\r\n                    this.regimens = [...this.regimens]\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    durationChanged(duration) {\r\n        this.rows = this.rows.map(r => {\r\n            r.duration = duration;\r\n            r.quantity = (r.morning + r.afternoon + r.evening) * duration;\r\n            return r;\r\n        });\r\n        this.rows = [...this.rows];\r\n\r\n        this.entity.nextAppointment = this.suggestedNextAppointment();\r\n\r\n        if (duration === 90) {\r\n            this.entity.mmdType = 'MMD-3';\r\n        } else if (duration === 120) {\r\n            this.entity.mmdType = 'MMD-4';\r\n        } else if (duration === 150) {\r\n            this.entity.mmdType = 'MMD-5';\r\n        } else if (duration === 180) {\r\n            this.entity.mmdType = 'MMD-6';\r\n        } else {\r\n            this.entity.mmdType = null;\r\n        }\r\n    }\r\n\r\n    regimenChange(event) {\r\n        this.selectedRegimens.forEach(regimen => {\r\n            this.pharmacyService.getDrugsByRegimen(regimen.id).subscribe((res: DrugDTO[]) => {\r\n                res.forEach((drug: DrugDTO) => {\r\n                    console.log('Drug', drug, this.rows);\r\n                    if (!this.rows.map(r => r.drug.id).includes(drug.drug.id)) {\r\n                        this.rows.push({\r\n                            drug: drug.drug,\r\n                            description: drug.drug.name,\r\n                            morning: drug.drug.morning,\r\n                            afternoon: drug.drug.afternoon,\r\n                            evening: drug.drug.evening,\r\n                            regimen: regimen,\r\n                            duration: this.entity.duration,\r\n                            quantity: this.entity.duration * (drug.drug.morning + drug.drug.afternoon + drug.drug.evening),\r\n                            regimenType: regimen.regimenType,\r\n                            regimenDrug: drug.regimenDrug\r\n                        });\r\n                        this.rows = [...this.rows];\r\n                        //this.drugs.push(drug.drug);\r\n                    }\r\n\r\n                    this.rows = this.rows.filter(row => this.selectedRegimens.map(regimen => regimen.id).includes(row.regimen.id));\r\n                    this.drugs.forEach(drug => {\r\n                        if (!this.rows.map(r => r.drug.id).includes(drug.id)) {\r\n                            this.drugs = this.drugs.filter(d => d.id !== drug.id)\r\n                        }\r\n                    })\r\n                });\r\n            })\r\n        })\r\n    }\r\n\r\n    updateValue(event, cell, rowIndex) {\r\n        this.editing[rowIndex + '-' + cell] = false;\r\n        this.rows[rowIndex][cell] = event.target.value;\r\n        if (this.entity.duration) {\r\n            const total = parseInt(this.rows[rowIndex]['morning'] + '' || '0') + parseInt(this.rows[rowIndex]['afternoon'] + '' || '0') +\r\n                parseInt(this.rows[rowIndex]['evening'] + '' || '0');\r\n            this.rows[rowIndex]['quantity'] = (total * this.entity.duration);\r\n        }\r\n        this.rows = [...this.rows];\r\n    }\r\n\r\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\r\n        result.subscribe(\r\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\r\n            (res: HttpErrorResponse) => {\r\n                this.appLoaderService.close();\r\n                this.onSaveError();\r\n                this.onError(res.message)\r\n            });\r\n    }\r\n\r\n    private onSaveSuccess(result: any) {\r\n        this.appLoaderService.close();\r\n        this.isSaving = false;\r\n        this.notification.showInfo('Pharmacy visit successfully saved');\r\n        this.previousState();\r\n    }\r\n\r\n    private onSaveError() {\r\n        this.isSaving = false;\r\n        this.error = true;\r\n        this.notification.showError('Error saving pharmacy visit');\r\n    }\r\n\r\n    protected onError(errorMessage: string) {\r\n        this.isSaving = false;\r\n        this.notification.showError(errorMessage);\r\n    }\r\n}\r\n",
        "import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PharmacyService } from './pharmacy.service';\nimport { Pharmacy } from '../model/pharmacy.model';\nimport { PharmacyDetailsComponent } from '../components/pharmacy-details.component';\nimport { PharmacyEditComponent } from '../components/pharmacy-edit.component';\n\n@Injectable()\nexport class PharmacyResolve implements Resolve<Pharmacy> {\n    constructor(private service: PharmacyService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Pharmacy> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Pharmacy>) => response.ok),\n                map((patient: HttpResponse<Pharmacy>) => patient.body)\n            );\n        }\n        return of(<Pharmacy>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Pharmacy Refill',\n            breadcrumb: 'PHARMACY REFILL'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: PharmacyDetailsComponent,\n                resolve: {\n                    entity: PharmacyResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Pharmacy Refill',\n                    breadcrumb: 'PHARMACY REFILL'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: PharmacyEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Pharmacy Refill',\n                    breadcrumb: 'ADD PHARMACY REFILL'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: PharmacyEditComponent,\n                resolve: {\n                    entity: PharmacyResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Pharmacy Refill Edit',\n                    breadcrumb: 'PHARMACY REFILL EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n",
        "import { Component, Input, OnInit } from '@angular/core';\nimport { PharmacyService } from '../services/pharmacy.service';\nimport { Pharmacy, RegimenInfo } from '../model/pharmacy.model';\nimport { CardViewDateItemModel, CardViewFloatItemModel, CardViewItem, CardViewTextItemModel } from \"@alfresco/adf-core\";\n\n@Component({\n    selector: 'pharmacy-widget',\n    templateUrl: './pharmacy.widget.html'\n})\nexport class PharmacyWidget implements OnInit {\n    @Input()\n    patientId: number;\n    pharmacy: Pharmacy;\n    properties: CardViewItem[] = [];\n\n    constructor(private pharmacyService: PharmacyService) {\n    }\n\n    ngOnInit(): void {\n        this.pharmacyService.latestVisit(this.patientId).subscribe((res) => {\n            this.pharmacy = res;\n            this.buildProperties()\n        })\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewDateItemModel({\n            key: 'dv',\n            value: this.pharmacy.dateVisit,\n            label: 'Last Pharmacy Refill',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewDateItemModel({\n            key: 'nv',\n            value: this.pharmacy.nextAppointment,\n            label: 'Next Pharmacy Refill',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'MMD Type',\n            key: 'fs',\n            value: this.pharmacy.mmdType\n        }));\n\n        this.pharmacyService.regimenInfo(this.pharmacy.patient.id)\n            .subscribe((res: RegimenInfo) => {\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'Regimen Line',\n                    key: 'cs',\n                    value: res.regimenType\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    label: 'Regimen',\n                    key: 'ts',\n                    value: res.regimen\n                }));\n            })\n    }\n\n}\n",
        "/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatDatetimepickerModule, MatNativeDatetimeModule } from '@mat-datetimepicker/core';\n\nimport {\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatOptionModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatCheckboxModule,\n        MatChipsModule, MatDatepickerModule, MatDialogModule, MatGridListModule, MatIconModule,\n        MatInputModule, MatListModule, MatNativeDateModule, MatOptionModule, MatProgressSpinnerModule, MatRadioModule,\n        MatRippleModule, MatSelectModule, MatSlideToggleModule, MatTableModule, MatTabsModule,\n        MatMenuModule, MatProgressBarModule, MatSidenavModule, MatSnackBarModule, MatToolbarModule,\n        MatTooltipModule, MatDatetimepickerModule, MatNativeDatetimeModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {\n}\n",
        "import { NgModule } from '@angular/core';\nimport { PharmacyWidget } from './components/pharmacy.widget';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { MaterialModule } from './material.module';\n\n@NgModule({\n    imports:[\n        CommonModule,\n        MaterialModule,\n        CoreModule\n    ],\n    declarations:[\n      PharmacyWidget\n    ],\n    entryComponents: [\n        PharmacyWidget\n    ],\n    exports: [\n        PharmacyWidget\n    ],\n    providers: [\n    ]\n})\nexport class PharmacyWidgetModule {\n    \n}\n",
        "import { CoreModule } from '@alfresco/adf-core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatProgressBarModule,\r\n    MatSelectModule,\r\n    MatTableModule\r\n} from '@angular/material';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CovalentDialogsModule, CovalentMessageModule } from '@covalent/core';\r\nimport { PharmacyDetailsComponent } from './components/pharmacy-details.component';\r\nimport { PharmacyEditComponent } from './components/pharmacy-edit.component';\r\nimport { PharmacyResolve, ROUTES } from './services/pharmacy.route';\r\nimport { PharmacyWidgetModule } from './pharmacy.widget.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { MatDateFormatModule } from '@lamis/web-core';\r\nimport { CustomFormsModule } from 'ng2-validation';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PharmacyDetailsComponent,\r\n        PharmacyEditComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatCardModule,\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        RouterModule.forChild(ROUTES),\r\n        MatProgressBarModule,\r\n        FormsModule,\r\n        CovalentMessageModule,\r\n        CovalentDialogsModule,\r\n        MatTableModule,\r\n        MatListModule,\r\n        CoreModule,\r\n        PharmacyWidgetModule,\r\n        NgxDatatableModule,\r\n        ReactiveFormsModule,\r\n        MatDateFormatModule,\r\n        CustomFormsModule\r\n    ],\r\n    exports: [\r\n        PharmacyDetailsComponent,\r\n        PharmacyEditComponent\r\n    ],\r\n    entryComponents: [],\r\n    providers: [\r\n        PharmacyResolve\r\n    ]\r\n})\r\nexport class PharmacyModule {\r\n}\r\n",
        "import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\nimport { map } from 'rxjs/operators';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport {\n    CommunityPharmacy,\n    Devolve,\n    RelatedCD4,\n    RelatedClinic,\n    RelatedPharmacy,\n    RelatedViralLoad\n} from '../model/pharmacy.model';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Devolve>;\n\n@Injectable({providedIn: 'root'})\nexport class DevolveService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/devolves';\n    }\n\n    create(devolve: Devolve): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(devolve);\n        return this.http\n            .post<Devolve>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(devolve: Devolve): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(devolve);\n        return this.http\n            .put<Devolve>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<Devolve>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: string): Observable<EntityResponseType> {\n        return this.http\n            .get<Devolve>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getDevolveDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`${this.resourceUrl}/patient/${patientId}/visit-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            )\n    }\n\n    getStates() {\n        return this.http.get<any[]>('/api/states')\n    }\n\n    getLgasByState(id) {\n        return this.http.get<any[]>(`/api/provinces/state/${id}`)\n    }\n\n    getCommunityPharmaciesByLga(id) {\n        return this.http.get<CommunityPharmacy[]>(`${this.resourceUrl}/community-pharmacies/lga/${id}`)\n    }\n\n    getRelatedPharmacy(devolveId: number, patientId: number, date: Moment) {\n        const d = date.format(DATE_FORMAT);\n        return this.http.get<RelatedPharmacy>(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-pharmacy/at/${d}`)\n            .pipe(map(res => {\n                if (res.dateVisit) {\n                    res.dateVisit = moment(res.dateVisit).format('DD MMM, YYYY');\n                }\n                return res;\n            }))\n    }\n\n    getRelatedClinic(devolveId: number, patientId: number, date: Moment) {\n        const d = date.format(DATE_FORMAT);\n        return this.http.get<RelatedClinic>(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-clinic/at/${d}`)\n            .pipe(map(res => {\n                if (res.dateVisit) {\n                    res.dateVisit = moment(res.dateVisit).format('DD MMM, YYYY');\n                }\n                return res;\n            }))\n    }\n\n    getRelatedViralLoad(devolveId: number, patientId: number, date: Moment) {\n        const d = date.format(DATE_FORMAT);\n        return this.http.get<RelatedViralLoad>(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-viral-load/at/${d}`)\n            .pipe(map(res => {\n                if (res.dateResultReceived) {\n                    res.dateResultReceived = moment(res.dateResultReceived).format('DD MMM, YYYY');\n                }\n                return res;\n            }))\n    }\n\n    getRelatedCD4(devolveId: number, patientId: number, date: Moment) {\n        const d = date.format(DATE_FORMAT);\n        return this.http.get<RelatedCD4>(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-cd4/at/${d}`)\n            .pipe(map(res => {\n                if (res.dateResultReceived) {\n                    res.dateResultReceived = moment(res.dateResultReceived).format('DD MMM, YYYY');\n                }\n                return res;\n            }))\n    }\n\n    getStateByLga(id) {\n        return this.http.get(`/api/provinces/${id}/state`)\n    }\n\n    protected convertDateFromClient(devolve: Devolve): Devolve {\n        const copy: Devolve = Object.assign({}, devolve, {\n            dateDevolved: devolve.dateDevolved != null && devolve.dateDevolved.isValid() ? devolve.dateDevolved.format(DATE_FORMAT) : null,\n            dateNextClinic: devolve.dateNextClinic != null && devolve.dateNextClinic.isValid() ? devolve.dateNextClinic.format(DATE_FORMAT) : null,\n            dateNextRefill: devolve.dateNextRefill != null && devolve.dateNextRefill.isValid() ? devolve.dateNextRefill.format(DATE_FORMAT) : null,\n            dateDiscontinued: devolve.dateDiscontinued != null && devolve.dateDiscontinued.isValid() ? devolve.dateDiscontinued.format(DATE_FORMAT) : null,\n            dateReturnedToFacility: devolve.dateReturnedToFacility != null && devolve.dateReturnedToFacility.isValid() ? devolve.dateReturnedToFacility.format(DATE_FORMAT) : null\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.dateReturnedToFacility = res.body.dateReturnedToFacility != null ? moment(res.body.dateReturnedToFacility) : null;\n            res.body.dateNextRefill = res.body.dateNextRefill != null ? moment(res.body.dateNextRefill) : null;\n            res.body.dateNextClinic = res.body.dateNextClinic != null ? moment(res.body.dateNextClinic) : null;\n            res.body.dateDevolved = res.body.dateDevolved != null ? moment(res.body.dateDevolved) : null;\n            res.body.dateDiscontinued = res.body.dateDiscontinued != null ? moment(res.body.dateDiscontinued) : null;\n        }\n        return res;\n    }\n}\n",
        "import { Component, OnInit } from '@angular/core';\nimport { CardViewDateItemModel, CardViewItem, CardViewTextItemModel, NotificationService } from '@alfresco/adf-core';\nimport { Devolve, RelatedCD4, RelatedClinic, RelatedPharmacy, RelatedViralLoad } from '../model/pharmacy.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TdDialogService } from '@covalent/core';\nimport { DevolveService } from '../services/devolve.service';\n\n@Component({\n    selector: 'devolve-details',\n    templateUrl: './devolve.details.component.html'\n})\nexport class DevolveDetailsComponent implements OnInit {\n    properties: CardViewItem[] = [];\n    entity: Devolve;\n    relatedClinic: RelatedClinic;\n    relatedPharmacy: RelatedPharmacy;\n    relatedCD4: RelatedCD4;\n    relatedViralLoad: RelatedViralLoad;\n\n    constructor(private router: Router, private route: ActivatedRoute, private devolveService: DevolveService,\n                private _dialogService: TdDialogService,\n                private notificationService: NotificationService) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            this.buildProperties();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['/', 'devolves', this.entity.uuid, 'patient', this.entity.patient.uuid, 'edit']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this client devolve, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.devolveService.delete(this.entity.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['patients'])\n                    } else {\n                        this.notificationService.showError('Error deleting devolve, please try again')\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateDevolved,\n            label: 'Date of Devolvement',\n            format: 'dd MMM, yyyy'\n        }));\n        let type = 'MMD';\n        switch (this.entity.dmocType) {\n            case 'ARC':\n                type = 'Adolescent Refill Club';\n                break;\n            case 'CPARP':\n                type = 'CPARP';\n                break;\n            case 'CARC':\n                type = 'CARC';\n                break;\n            case 'F_CARG':\n                type = 'F-CARG';\n                break;\n            case 'FAST_TRACK':\n                type = 'Fast Track';\n                break;\n            case 'S_CARG':\n                type = 's-CARG';\n                break;\n            case 'MMS':\n                type = 'MMS';\n                break;\n        }\n        this.properties.push(new CardViewTextItemModel({\n            key: 'ds',\n            value: type,\n            label: 'Type of DMOC'\n        }));\n        this.devolveService.getRelatedClinic(this.entity.id, this.entity.patient.id, this.entity.dateDevolved).subscribe(res => {\n            this.relatedClinic = res;\n            console.log('Related clinic', res);\n            if (this.relatedClinic.dateVisit) {\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedClinic.dateVisit,\n                    label: 'Date of Clinical Stage'\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedClinic && this.relatedClinic.clinicStage,\n                    label: 'Current Clinical Stage',\n                }));\n            }\n        });\n        this.devolveService.getRelatedPharmacy(this.entity.id, this.entity.patient.id, this.entity.dateDevolved).subscribe(res => {\n            this.relatedPharmacy = res;\n            if (this.relatedPharmacy.dateVisit) {\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedPharmacy.dateVisit,\n                    label: 'Date of Current ARV Regimen'\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedPharmacy && this.relatedPharmacy.regimen,\n                    label: 'Current ARV Regimen',\n                }));\n            }\n        });\n        this.devolveService.getRelatedViralLoad(this.entity.id, this.entity.patient.id, this.entity.dateDevolved).subscribe(res => {\n            this.relatedViralLoad = res;\n            if (this.relatedViralLoad.dateResultReceived) {\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedViralLoad.dateResultReceived,\n                    label: 'Date of Viral Load'\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedViralLoad && this.relatedViralLoad.value,\n                    label: 'Current Viral Load',\n                }));\n            }\n        });\n        this.devolveService.getRelatedCD4(this.entity.id, this.entity.patient.id, this.entity.dateDevolved).subscribe(res => {\n            this.relatedCD4 = res;\n            if (this.relatedCD4.dateResultReceived) {\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedCD4.dateResultReceived,\n                    label: 'Date of CD4'\n                }));\n                this.properties.push(new CardViewTextItemModel({\n                    key: 'ds',\n                    value: this.relatedCD4 && this.relatedCD4.value,\n                    label: 'Current Viral Load',\n                }));\n            }\n        });\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateNextClinic,\n            label: 'Date of next Clinic/Lab',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateNextRefill,\n            label: 'Date of Viral Load',\n            format: 'dd MMM, yyyy'\n        }));\n        if (this.entity.communityPharmacy) {\n            this.properties.push(new CardViewTextItemModel({\n                key: 'ds',\n                value: this.entity.communityPharmacy.name,\n                label: 'Community Pharmacy'\n            }));\n        }\n        if (this.entity.dateDiscontinued) {\n            this.properties.push(new CardViewDateItemModel({\n                key: 'ds',\n                value: this.entity.dateDiscontinued,\n                label: 'Date of Discontinuation',\n                format: 'dd MMM, yyyy'\n            }));\n\n            this.properties.push(new CardViewTextItemModel({\n                key: 'ds',\n                value: this.entity.reasonDiscontinued,\n                label: 'Reason of Discontinuation'\n            }));\n\n            if (this.entity.dateReturnedToFacility) {\n                this.properties.push(new CardViewDateItemModel({\n                    key: 'ds',\n                    value: this.entity.dateReturnedToFacility,\n                    label: 'Date Returned to Facility',\n                    format: 'dd MMM, yyyy'\n                }));\n            }\n        }\n    }\n\n    previousState() {\n        window.history.back();\n    }\n}\n",
        "import { Component, OnInit } from '@angular/core';\nimport {\n    CommunityPharmacy,\n    Devolve,\n    Patient,\n    RelatedCD4,\n    RelatedClinic,\n    RelatedPharmacy,\n    RelatedViralLoad\n} from '../model/pharmacy.model';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { PharmacyService } from '../services/pharmacy.service';\nimport { CardViewItem, CardViewTextItemModel, NotificationService } from '@alfresco/adf-core';\nimport { AppLoaderService, entityCompare } from '@lamis/web-core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DevolveService } from '../services/devolve.service';\nimport { Observable } from 'rxjs';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n\nconst moment = moment_;\n\nexport interface Dmoc {\n    name: string;\n    value: string;\n}\n\n@Component({\n    selector: 'devolve-edit',\n    templateUrl: './devolve.edit.component.html'\n})\nexport class DevolveEditComponent implements OnInit {\n    entity: Devolve = {};\n    relatedClinic: RelatedClinic;\n    relatedPharmacy: RelatedPharmacy;\n    relatedCD4: RelatedCD4;\n    relatedViralLoad: RelatedViralLoad;\n    communityPharmacies: CommunityPharmacy[];\n    states: any[] = [];\n    lgas: any[];\n    dmocTypes: Dmoc[] = [];\n    patient: Patient;\n    dateRegistration: Moment;\n    maxNextVisit: Moment;\n    isSaving: boolean;\n    error = false;\n    tomorrow = moment().add(1, 'days');\n    today = moment();\n    minNextAppointment: Moment;\n    editing = {};\n    state: any;\n    lga: any;\n    devolveDates: Moment[] = [];\n    enableCommunityPharmacy: boolean = false;\n    properties: Array<CardViewItem> = [];\n    minDate: Moment;\n    minDiscontinued: Moment;\n\n    constructor(private pharmacyService: PharmacyService,\n                private devolveService: DevolveService,\n                protected notification: NotificationService,\n                private appLoaderService: AppLoaderService,\n                protected activatedRoute: ActivatedRoute) {\n    }\n\n    createEntity(): Devolve {\n        return <Devolve>{};\n    }\n\n    ngOnInit(): void {\n        this.dmocTypes.push({\n            name: 'Adolescent Refill Club',\n            value: 'ARC'\n        });\n        this.dmocTypes.push({\n            name: 'CARC',\n            value: 'CARC'\n        });\n        this.dmocTypes.push({\n            name: 'CPARP',\n            value: 'CPARP'\n        });\n        this.dmocTypes.push({\n            name: 'F-CARG',\n            value: 'F_CARG'\n        });\n        this.dmocTypes.push({\n            name: 'Fast Track',\n            value: 'FAST_TRACK'\n        });\n        this.dmocTypes.push({\n            name: 'S-CARG',\n            value: 'S_CARG'\n        });\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.pharmacyService.getPatient(patientId).subscribe((res) => {\n                this.entity.patient = res;\n                this.patient = res;\n                this.dateRegistration = res.dateRegistration;\n                this.entity.facility = res.facility;\n                this.minNextAppointment = this.dateRegistration.add(15, 'days');\n                /*this.devolveService.getDevolveDatesByPatient(res.id).subscribe((res) => {\n                    this.devolveDates = res;\n                });*/\n                this.updateRelated();\n            });\n\n            if (this.entity.id) {\n                const dmoc = this.entity.dmocType;\n                if (dmoc === 'MMD') {\n                    this.dmocTypes.push({\n                        name: 'MMD',\n                        value: 'MMD'\n                    });\n                } else if (dmoc === 'MMS') {\n                    this.dmocTypes.push({\n                        name: 'MMS',\n                        value: 'MMS'\n                    });\n                }\n\n                if (this.entity.communityPharmacy) {\n                    this.enableCommunityPharmacy = true;\n                    this.devolveService.getStateByLga(this.entity.communityPharmacy.lga.id).subscribe(res => {\n                        this.state = res;\n                        this.lga = this.entity.communityPharmacy.lga;\n                        this.lgaChanged(this.lga.id);\n                        this.stateChanged(this.state.id);\n                    })\n                }\n\n                if (this.entity.dateDiscontinued) {\n                    this.minDate = this.entity.dateDiscontinued.clone().add(2, 'day');\n                } else {\n                    this.minDiscontinued = this.entity.dateDevolved.clone().add(1, 'day');\n                    this.minDate = this.entity.dateDevolved.clone().add(2, 'day');\n                }\n            }\n\n            this.devolveService.getStates().subscribe(res => this.states = res);\n        });\n    }\n\n    dateDiscontinuedChanged() {\n        if (this.entity.dateDiscontinued) {\n            this.minDate = this.entity.dateDiscontinued.clone().add(1, 'day')\n        }\n    }\n\n    filterDates(date: Moment): boolean {\n        let exists = false;\n\n        this.devolveDates.forEach(d => {\n            if (date.diff(d, 'days') === 0) {\n                exists = true;\n            }\n        });\n        return (this.entity.id && date.diff(this.entity.dateDevolved, 'days') === 0) || !exists;\n    }\n\n    stateChanged(id) {\n        this.devolveService.getLgasByState(id).subscribe(res => this.lgas = res)\n    }\n\n    lgaChanged(id) {\n        this.devolveService.getCommunityPharmaciesByLga(id).subscribe(res => this.communityPharmacies = res)\n    }\n\n    communityPharmacyChanged(communityPharmacy: CommunityPharmacy) {\n        this.properties = [];\n        this.properties.push(new CardViewTextItemModel({\n            key: 'add',\n            label: 'Address',\n            value: communityPharmacy.address\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            key: 'phone',\n            label: 'Telephone Number',\n            value: communityPharmacy.phone\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            key: 'email',\n            label: 'Email',\n            value: communityPharmacy.email\n        }));\n    }\n\n    dmocChanged(dmocType: string) {\n        this.enableCommunityPharmacy = dmocType === 'CPARP';\n    }\n\n    dateDevolvedChanged(date: Moment) {\n        this.minNextAppointment = date.clone().add(7, 'days');\n        this.maxNextVisit = date.clone().add(3, 'months');\n        console.log('Dates', this.minNextAppointment, this.maxNextVisit);\n        this.updateRelated();\n    }\n\n    updateRelated() {\n        this.entity.relatedViralLoad = null;\n        this.entity.relatedClinic = null;\n        this.entity.relatedCd4 = null;\n        this.entity.relatedPharmacy = null;\n        if (this.entity.dateDevolved) {\n            this.devolveService.getRelatedClinic(this.entity.id || 0, this.patient.id, this.entity.dateDevolved).subscribe(res => {\n                this.relatedClinic = res;\n                this.entity.relatedClinic = {id: res.id};\n            });\n            this.devolveService.getRelatedPharmacy(this.entity.id || 0, this.patient.id, this.entity.dateDevolved).subscribe(res => {\n                this.relatedPharmacy = res;\n                this.entity.relatedPharmacy = {id: res.id};\n            });\n            this.devolveService.getRelatedCD4(this.entity.id || 0, this.patient.id, this.entity.dateDevolved).subscribe(res => {\n                this.relatedCD4 = res;\n                this.entity.relatedCd4 = {id: res.id};\n            });\n            this.devolveService.getRelatedViralLoad(this.entity.id || 0, this.patient.id, this.entity.dateDevolved).subscribe(res => {\n                this.relatedViralLoad = res;\n                this.entity.relatedViralLoad = {id: res.id};\n            });\n        }\n    }\n\n    entityCompare(e1, e2) {\n        return entityCompare(e1, e2)\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    save() {\n        //this.progressBar.mode = 'indeterminate';\n        this.appLoaderService.open('Saving visit...');\n        this.isSaving = true;\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.devolveService.update(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.devolveService.create(this.entity));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.appLoaderService.close();\n                this.onSaveError();\n                this.onError(res.message)\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Devolve successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.error = true;\n        this.notification.showError('Error saving devolve');\n    }\n\n    protected onError(errorMessage: string) {\n        this.isSaving = false;\n        this.notification.showError(errorMessage);\n    }\n}\n",
        "import { Component, OnInit } from '@angular/core';\nimport { PharmacyService } from '../services/pharmacy.service';\nimport { DevolveService } from '../services/devolve.service';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { AppLoaderService } from '@lamis/web-core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Devolve } from '../model/pharmacy.model';\nimport { Observable } from 'rxjs';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Moment } from 'moment';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'end-devolve',\n    templateUrl: './end.devolve.component.html'\n})\nexport class EndDevolveComponent implements OnInit {\n    entity: Devolve = {};\n    dmocType: string = '';\n    isSaving = false;\n    minDate: Moment;\n    minDiscontinued: Moment;\n    today = moment();\n\n    constructor(private pharmacyService: PharmacyService,\n                private devolveService: DevolveService,\n                protected notification: NotificationService,\n                private appLoaderService: AppLoaderService,\n                protected activatedRoute: ActivatedRoute) {\n    }\n\n    ngOnInit(): void {\n        const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n        this.pharmacyService.getPatient(patientId).subscribe((res) => {\n            this.pharmacyService.getDevolvement(res.id, moment()).subscribe(r => {\n                this.entity = r;\n                if (this.entity.dateDiscontinued) {\n                    this.minDate = r.dateDiscontinued.clone().add(2, 'day');\n                } else {\n                    this.minDiscontinued = r.dateDevolved.clone().add(1, 'day');\n                    this.minDate = r.dateDevolved.clone().add(2, 'day');\n                }\n\n                let type = 'MMD';\n                switch (r.dmocType) {\n                    case 'ARC':\n                        type = 'Adolescent Refill Club';\n                        break;\n                    case 'CPARP':\n                        type = 'CPARP';\n                        break;\n                    case 'CARC':\n                        type = 'CARC';\n                        break;\n                    case 'F_CARG':\n                        type = 'F-CARG';\n                        break;\n                    case 'FAST_TRACK':\n                        type = 'Fast Track';\n                        break;\n                    case 'S_CARG':\n                        type = 'S-CARG';\n                        break;\n                    case 'MMS':\n                        type = 'MMS';\n                        break;\n                }\n                this.dmocType = type;\n            })\n        });\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n        });\n\n    }\n\n    dateDiscontinuedChanged() {\n        if (this.entity.dateDiscontinued) {\n            this.minDate = this.entity.dateDiscontinued.clone().add(1, 'day')\n        }\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    save() {\n        this.appLoaderService.open('Saving visit...');\n        this.isSaving = true;\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.devolveService.update(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.devolveService.create(this.entity));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.appLoaderService.close();\n                this.onSaveError();\n                this.onError(res.message)\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Devolve successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.notification.showError('Error saving devolve');\n    }\n\n    protected onError(errorMessage: string) {\n        this.isSaving = false;\n        this.notification.showError(errorMessage);\n    }\n}\n",
        "import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Devolve } from '../model/pharmacy.model';\nimport { DevolveEditComponent } from '../components/devolve.edit.component';\nimport { DevolveDetailsComponent } from '../components/devolve.details.component';\nimport { DevolveService } from './devolve.service';\nimport { EndDevolveComponent } from '../components/end.devolve.component';\n\n@Injectable()\nexport class DevolveResolve implements Resolve<Devolve> {\n    constructor(private service: DevolveService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Devolve> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Devolve>) => response.ok),\n                map((patient: HttpResponse<Devolve>) => patient.body)\n            );\n        }\n        return of(<Devolve>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Client Devolvement',\n            breadcrumb: 'CLIENT DEVOLVEMENT'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: DevolveDetailsComponent,\n                resolve: {\n                    entity: DevolveResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Client Devolve',\n                    breadcrumb: 'CLIENT DEVOLVE'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: DevolveEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Client Devolve',\n                    breadcrumb: 'DEVOLVE CLIENT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: DevolveEditComponent,\n                resolve: {\n                    entity: DevolveResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Devolve Edit',\n                    breadcrumb: 'DEVOLVE EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'return/patient/:patientId/new',\n                component: EndDevolveComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'End Devolve',\n                    breadcrumb: 'END CLIENT DEVOLVE'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n",
        "import { NgModule } from '@angular/core';\nimport { DevolveDetailsComponent } from './components/devolve.details.component';\nimport { DevolveEditComponent } from './components/devolve.edit.component';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CustomFormsModule } from 'ng2-validation';\nimport { MatDateFormatModule } from '@lamis/web-core';\nimport {\n    MatButtonModule,\n    MatCardModule,\n    MatDatepickerModule,\n    MatInputModule,\n    MatSelectModule\n} from '@angular/material';\nimport { DevolveResolve, ROUTES } from './services/devolve.route';\nimport { RouterModule } from '@angular/router';\nimport { CovalentCommonModule, CovalentDialogsModule } from '@covalent/core';\nimport { EndDevolveComponent } from './components/end.devolve.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        ReactiveFormsModule,\n        CustomFormsModule,\n        CoreModule,\n        MatDatepickerModule,\n        MatDateFormatModule,\n        MatInputModule,\n        MatButtonModule,\n        MatCardModule,\n        MatSelectModule,\n        CovalentCommonModule,\n        CovalentDialogsModule\n    ],\n    declarations: [\n        DevolveDetailsComponent,\n        DevolveEditComponent,\n        EndDevolveComponent\n    ],\n    providers: [\n        DevolveResolve\n    ]\n})\nexport class DevolveModule {\n\n}\n"
    ]
}
