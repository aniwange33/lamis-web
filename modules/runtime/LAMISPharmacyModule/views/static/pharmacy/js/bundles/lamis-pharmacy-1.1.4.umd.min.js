!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common/http"),require("@lamis/web-core"),require("rxjs/operators"),require("moment"),require("@alfresco/adf-core"),require("@angular/common"),require("@angular/material"),require("@angular/router"),require("@covalent/core"),require("@swimlane/ngx-datatable"),require("rxjs"),require("@mat-datetimepicker/core"),require("@angular/forms"),require("ng2-validation")):"function"==typeof define&&define.amd?define("lamis-pharmacy-1.1.4",["exports","@angular/core","@angular/common/http","@lamis/web-core","rxjs/operators","moment","@alfresco/adf-core","@angular/common","@angular/material","@angular/router","@covalent/core","@swimlane/ngx-datatable","rxjs","@mat-datetimepicker/core","@angular/forms","ng2-validation"],t):t(((e=e||self)["lamis-pharmacy-1"]=e["lamis-pharmacy-1"]||{},e["lamis-pharmacy-1"][1]=e["lamis-pharmacy-1"][1]||{},e["lamis-pharmacy-1"][1][4]={}),e.ng.core,e.ng.common.http,e.webCore,e.rxjs.operators,e.moment_,e.adfCore,e.ng.common,e.ng.material,e.ng.router,e.core$1,e.ngxDatatable,e.rxjs,e.core$2,e.ng.forms,e.ng2Validation)}(this,(function(e,t,n,i,r,a,o,d,s,l,c,u,m,p,v,y){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */function f(e,t,n,i){var r,a=arguments.length,o=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,i);else for(var d=e.length-1;d>=0;d--)(r=e[d])&&(o=(a<3?r(o):a>3?r(t,n,o):r(t,n))||o);return a>3&&o&&Object.defineProperty(t,n,o),o}function h(e,t){return function(n,i){t(n,i,e)}}function g(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function b(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var i,r,a=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(i=a.next()).done;)o.push(i.value)}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(r)throw r.error}}return o}function M(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(b(arguments[t]));return e}var D=a,R=function(){function e(e,t){this.http=e,this.serverUrl=t,this.resourceUrl="",this.resourceUrl=t.SERVER_API_URL+"/api/pharmacies"}return e.prototype.create=function(e){var t=this,n=this.convertDateFromClient(e);return this.http.post(this.resourceUrl,n,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.update=function(e){var t=this,n=this.convertDateFromClient(e);return this.http.put(this.resourceUrl,n,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.find=function(e){var t=this;return this.http.get(this.resourceUrl+"/"+e,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.findByUuid=function(e){var t=this;return this.http.get(this.resourceUrl+"/by-uuid/"+e,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.delete=function(e){return this.http.delete(this.resourceUrl+"/"+e,{observe:"response"})},e.prototype.getPatient=function(e){return this.http.get("/api/patients/by-uuid/"+e,{observe:"body"}).pipe(r.map((function(e){return e&&(e.dateRegistration=null!=e.dateRegistration?D(e.dateRegistration):null),e})))},e.prototype.getVisitDatesByPatient=function(e){return this.http.get(this.resourceUrl+"/patient/"+e+"/visit-dates").pipe(r.map((function(e){return e.forEach((function(e){return D(e)})),e})))},e.prototype.regimenTypes=function(){return this.http.get(this.resourceUrl+"/regimen-types")},e.prototype.regimenInfo=function(e){return this.http.get(this.resourceUrl+"/regimen-info/patient/"+e)},e.prototype.adrs=function(){return this.http.get(this.resourceUrl+"/adrs")},e.prototype.getLinesByPharmacy=function(e){return this.http.get(this.resourceUrl+"/"+e+"/lines")},e.prototype.regimesByRegimenType=function(e){return this.http.get(this.resourceUrl+"/regimens/regimen-type/"+e)},e.prototype.getDrugsByRegimen=function(e){return this.http.get(this.resourceUrl+"/drugs/regimen/"+e)},e.prototype.getRegimenById=function(e){return this.http.get(this.resourceUrl+"/regimen/"+e)},e.prototype.latestVisit=function(e){return this.http.get(this.resourceUrl+"/patient/"+e+"/latest")},e.prototype.getDevolvement=function(e,t){var n=t.format(i.DATE_FORMAT);return this.http.get(this.resourceUrl+"/patient/"+e+"/devolvement/at/"+n).pipe(r.map((function(e){return e.dateDevolved=null!=e.dateDevolved?D(e.dateDevolved):null,e.dateReturnedToFacility=null!=e.dateReturnedToFacility?D(e.dateReturnedToFacility):null,e.dateNextClinic=null!=e.dateNextClinic?D(e.dateNextClinic):null,e.dateNextRefill=null!=e.dateNextRefill?D(e.dateNextRefill):null,e})))},e.prototype.convertDateFromClient=function(e){return Object.assign({},e,{dateVisit:null!=e.dateVisit&&e.dateVisit.isValid()?e.dateVisit.format(i.DATE_FORMAT):null,nextAppointment:null!=e.nextAppointment&&e.nextAppointment.isValid()?e.nextAppointment.format(i.DATE_FORMAT):null})},e.prototype.convertDateFromServer=function(e){return e.body&&(e.body.nextAppointment=null!=e.body.nextAppointment?D(e.body.nextAppointment):null,e.body.dateVisit=null!=e.body.dateVisit?D(e.body.dateVisit):null),e},e.prototype.convertDateArrayFromServer=function(e){return e.body&&e.body.forEach((function(e){e.dateVisit=null!=e.dateVisit?D(e.dateVisit):null,e.nextAppointment=null!=e.nextAppointment?D(e.nextAppointment):null})),e},e.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:t.Inject,args:[i.SERVER_API_URL_CONFIG]}]}]},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(n.HttpClient),t.ɵɵinject(i.SERVER_API_URL_CONFIG))},token:e,providedIn:"root"}),e=f([t.Injectable({providedIn:"root"}),h(1,t.Inject(i.SERVER_API_URL_CONFIG)),g("design:paramtypes",[n.HttpClient,Object])],e)}(),C=function(){function e(e,t,n,i,r){this.router=e,this.route=t,this.pharmacyService=n,this._dialogService=i,this.notificationService=r,this.properties=[]}return e.prototype.ngOnInit=function(){var e=this;this.route.data.subscribe((function(t){var n=t.entity;e.entity=n&&n.body?n.body:n;var i=e.route.snapshot.paramMap.get("patientId");e.pharmacyService.getPatient(i).subscribe((function(t){return e.entity.patient=t})),e.buildProperties()}))},e.prototype.edit=function(){this.router.navigate(["/","pharmacies",this.entity.uuid,"patient",this.entity.patient.id,"edit"])},e.prototype.delete=function(){var e=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this pharmacy refill, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(t){t&&e.pharmacyService.delete(e.entity.id).subscribe((function(t){t.ok?e.router.navigate(["patients"]):e.notificationService.showError("Error deleting visit, please try again")}))}))},e.prototype.buildProperties=function(){var e=this;this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateVisit,label:"Date of Dispensing",format:"dd MMM, yyyy"})),this.pharmacyService.getLinesByPharmacy(this.entity.id).subscribe((function(t){e.dataSource=t,e.properties.push(new o.CardViewIntItemModel({label:"Refill Period (days)",key:"cs",value:t.map((function(e){return e.duration})).sort((function(e,t){return e-t})).pop()}))})),this.properties.push(new o.CardViewDateItemModel({key:"na",value:this.entity.nextAppointment,label:"Next Pharmacy Refill",format:"dd MMM, yyyy"})),this.properties.push(new o.CardViewTextItemModel({label:"MMD Type",key:"fs",value:this.entity.mmdType})),this.properties.push(new o.CardViewBoolItemModel({label:"Adverse Drug Reactions",key:"adr",value:this.entity.adrScreened})),this.properties.push(new o.CardViewBoolItemModel({label:"Prescription error",key:"bw",value:this.entity.prescriptionError})),this.pharmacyService.regimenInfo(this.entity.patient.id).subscribe((function(t){e.properties.push(new o.CardViewTextItemModel({label:"Regimen Line",key:"cs",value:t.regimenType})),e.properties.push(new o.CardViewTextItemModel({label:"Regimen",key:"ts",value:t.regimen}))}))},e.prototype.previousState=function(){window.history.back()},e.prototype.ngOnDestroy=function(){},e.ctorParameters=function(){return[{type:l.Router},{type:l.ActivatedRoute},{type:R},{type:c.TdDialogService},{type:o.NotificationService}]},e=f([t.Component({selector:"lamis-pharmacy",template:'<div class="lamis-edit-form">\r\n    <div class="lamis-edit-form-container">\r\n        <mat-card>\r\n            <mat-card-header>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n                <adf-card-view [properties]="properties" editable="false"></adf-card-view>\r\n                <mat-divider></mat-divider>\r\n                <adf-datatable *ngIf="dataSource"\r\n                               [rows]="dataSource">\r\n                    <data-columns>\r\n                        <data-column key="description" title="Description" sortable="true"></data-column>\r\n                        <data-column key="morning" title="Morning" sortable="false"></data-column>\r\n                        <data-column key="afternoon" title="Afternoon" sortable="false"></data-column>\r\n                        <data-column key="evening" title="Evening" sortable="false"></data-column>\r\n                        <data-column key="duration" title="Duration" sortable="false"></data-column>\r\n                    </data-columns>\r\n                </adf-datatable>\r\n            </mat-card-content>\r\n            <mat-card-actions class="lamis-edit-form-actions">\r\n                <button mat-button (click)="previousState()">Back</button>\r\n                <button mat-raised-button color="warn" (click)="delete()">Delete</button>\r\n                <button mat-raised-button color="primary" (click)="edit()">Edit</button>\r\n            </mat-card-actions>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n'}),g("design:paramtypes",[l.Router,l.ActivatedRoute,R,c.TdDialogService,o.NotificationService])],e)}(),w=a,x=function(){function e(e,t,n,i){this.pharmacyService=e,this.notification=t,this.appLoaderService=n,this.activatedRoute=i,this.entity={},this.regimenTypes=[],this.regimens=[],this.selectedRegimens=[],this.error=!1,this.tomorrow=w().add(1,"days"),this.today=w(),this.ColumnMode=u.ColumnMode,this.editing={},this.rows=[],this.drugIds=new Set,this.visitDates=[],this.drugs=[]}return e.prototype.createEntity=function(){return{}},e.prototype.ngOnInit=function(){var e=this;this.isSaving=!1,this.activatedRoute.data.subscribe((function(t){var n=t.entity;e.entity=n&&n.body?n.body:n,void 0===e.entity&&(e.entity=e.createEntity());var i=e.activatedRoute.snapshot.paramMap.get("patientId");e.pharmacyService.getPatient(i).subscribe((function(t){e.entity.patient=t,e.patient=t,e.dateRegistration=t.dateRegistration,e.entity.facility=t.facility,e.minNextAppointment=e.dateRegistration.clone().add(15,"days"),e.pharmacyService.getVisitDatesByPatient(t.id).subscribe((function(t){e.visitDates=t}))})),e.entity.id&&(e.pharmacyService.getLinesByPharmacy(e.entity.id).subscribe((function(t){e.rows=t.map((function(t){return t.quantity=(t.morning+t.afternoon+t.evening)*t.duration,e.pharmacyService.getRegimenById(t.regimen.id).subscribe((function(n){e.regimens.map((function(e){return e.id})).includes(t.regimen.id)||(e.regimens.push(n),e.selectedRegimens.push(n),e.regimens=M(e.regimens),e.selectedRegimens=M(e.selectedRegimens))})),t})),e.entity.duration=t.map((function(e){return e.duration})).sort((function(e,t){return e-t})).pop()})),e.pharmacyService.getDevolvement(e.entity.patient.id,e.entity.dateVisit).subscribe((function(t){e.devolve=t,e.updateDmocType()}))),e.pharmacyService.regimenTypes().subscribe((function(t){return e.regimenTypes=t}))}))},e.prototype.dateVisitChanged=function(e){var t=this;this.entity.nextAppointment=this.suggestedNextAppointment(),this.minNextAppointment=this.entity.nextAppointment.clone().subtract(7,"days"),this.maxNextVisit=this.entity.nextAppointment.clone().add(180,"days"),this.pharmacyService.getDevolvement(this.entity.patient.id,this.entity.dateVisit).subscribe((function(e){t.devolve=e,t.updateDmocType()}))},e.prototype.suggestedNextAppointment=function(){if(this.entity.dateVisit){var e=this.entity.dateVisit.clone().add(this.entity.duration-2||13,"days"),t=e.isoWeekday();return 6===t?e=e.clone().add(2,"days"):7===t&&(e=e.clone().add(1,"days")),e}return null},e.prototype.updateDmocType=function(){var e="MMD";switch(this.devolve.dmocType){case"ARC":e="Adolescent Refill Club";break;case"CPARP":e="CPARP";break;case"CARC":e="CARC";break;case"F_CARG":e="F-CARG";break;case"FAST_TRACK":e="Fast Track";break;case"S_CARG":e="S-CARG";break;case"MMS":e="MMS"}this.dmocType=e},e.prototype.filterDates=function(e){var t=!1;return this.visitDates.forEach((function(n){0===e.diff(n,"days")&&(t=!0)})),this.entity.id&&0===e.diff(this.entity.dateVisit,"days")||!t},e.prototype.previousState=function(){window.history.back()},e.prototype.entityCompare=function(e,t){return i.entityCompare(e,t)},e.prototype.save=function(){this.submitButton.disabled=!0,this.appLoaderService.open("Saving visit..."),this.entity.lines=this.rows,this.isSaving=!0,void 0!==this.entity.id?this.subscribeToSaveResponse(this.pharmacyService.update(this.entity)):this.subscribeToSaveResponse(this.pharmacyService.create(this.entity))},e.prototype.regimenTypeChange=function(e){var t=this;this.pharmacyService.regimesByRegimenType(e.id).subscribe((function(e){e.forEach((function(e){t.regimens.map((function(e){return e.id})).includes(e.id)||(t.regimens.push(e),t.regimens=M(t.regimens))}))}))},e.prototype.durationChanged=function(e){this.rows=this.rows.map((function(t){return t.duration=e,t.quantity=(t.morning+t.afternoon+t.evening)*e,t})),this.rows=M(this.rows),this.entity.nextAppointment=this.suggestedNextAppointment(),this.entity.mmdType=90===e?"MMD-3":120===e?"MMD-4":150===e?"MMD-5":180===e?"MMD-6":null},e.prototype.regimenChange=function(e){var t=this;this.selectedRegimens.forEach((function(e){t.pharmacyService.getDrugsByRegimen(e.id).subscribe((function(n){n.forEach((function(n){console.log("Drug",n,t.rows),t.rows.map((function(e){return e.drug.id})).includes(n.drug.id)||(t.rows.push({drug:n.drug,description:n.drug.name,morning:n.drug.morning,afternoon:n.drug.afternoon,evening:n.drug.evening,regimen:e,duration:t.entity.duration,quantity:t.entity.duration*(n.drug.morning+n.drug.afternoon+n.drug.evening),regimenType:e.regimenType,regimenDrug:n.regimenDrug}),t.rows=M(t.rows)),t.rows=t.rows.filter((function(e){return t.selectedRegimens.map((function(e){return e.id})).includes(e.regimen.id)})),t.drugs.forEach((function(e){t.rows.map((function(e){return e.drug.id})).includes(e.id)||(t.drugs=t.drugs.filter((function(t){return t.id!==e.id})))}))}))}))}))},e.prototype.updateValue=function(e,t,n){if(this.editing[n+"-"+t]=!1,this.rows[n][t]=e.target.value,this.entity.duration){var i=parseInt(this.rows[n].morning+""||"0")+parseInt(this.rows[n].afternoon+""||"0")+parseInt(this.rows[n].evening+""||"0");this.rows[n].quantity=i*this.entity.duration}this.rows=M(this.rows)},e.prototype.subscribeToSaveResponse=function(e){var t=this;e.subscribe((function(e){return t.onSaveSuccess(e.body)}),(function(e){t.appLoaderService.close(),t.onSaveError(),t.onError(e.message)}))},e.prototype.onSaveSuccess=function(e){this.appLoaderService.close(),this.isSaving=!1,this.notification.showInfo("Pharmacy visit successfully saved"),this.previousState()},e.prototype.onSaveError=function(){this.isSaving=!1,this.error=!0,this.notification.showError("Error saving pharmacy visit")},e.prototype.onError=function(e){this.isSaving=!1,this.notification.showError(e)},e.ctorParameters=function(){return[{type:R},{type:o.NotificationService},{type:i.AppLoaderService},{type:l.ActivatedRoute}]},f([t.ViewChild(s.MatProgressBar,{static:!0}),g("design:type",s.MatProgressBar)],e.prototype,"progressBar",void 0),f([t.ViewChild(s.MatButton,{static:!0}),g("design:type",s.MatButton)],e.prototype,"submitButton",void 0),e=f([t.Component({selector:"lamis-pharmacy-edit",template:'<div class="lamis-edit-form">\r\n    <div class="lamis-edit-form-container">\r\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #pharmacyForm="ngForm">\r\n            <mat-card class="default">\r\n                <mat-card-header>\r\n                </mat-card-header>\r\n                <mat-card-content *ngIf="patient">\r\n                    <div>\r\n                        <mat-form-field class="full-width" *ngIf="entity && dateRegistration">\r\n                            <input matInput [matDatepicker]="picker"\r\n                                   placeholder="Date of Dispensing"\r\n                                   [(ngModel)]="entity.dateVisit"\r\n                                   [matDatepickerFilter]="filterDates.bind(this)"\r\n                                   (dateChange)="dateVisitChanged($event.value)"\r\n                                   #visit="ngModel"\r\n                                   [max]="today"\r\n                                   [min]="dateRegistration"\r\n                                   name="visit"\r\n                                   required>\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]="picker">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)">\r\n                                Date of dispensing is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)">\r\n                                Date of dispensing cannot be before {{dateRegistration | date: \'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)">\r\n                                Date of dispensing cannot be in the future\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div class="row" *ngIf="devolve && !devolve.dateReturnedToFacility">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Date of Devolvement</mat-label>\r\n                                <input matInput disabled value="{{devolve.dateDevolved | date: \'dd MMM, yyyy\'}}">\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>DMOC Type</mat-label>\r\n                                <input matInput disabled [value]="dmocType">\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class="full-width">\r\n                            <mat-select [(ngModel)]="entity.duration"\r\n                                        placeholder="Refill Period (days)"\r\n                                        (selectionChange)="durationChanged($event.value)"\r\n                                        #refill="ngModel" required name="refill">\r\n                                <mat-option></mat-option>\r\n                                <mat-option [value]="15">15</mat-option>\r\n                                <mat-option [value]="30">30</mat-option>\r\n                                <mat-option [value]="60">60</mat-option>\r\n                                <mat-option [value]="90">90</mat-option>\r\n                                <mat-option [value]="120">120</mat-option>\r\n                                <mat-option [value]="150">150</mat-option>\r\n                                <mat-option [value]="180">180</mat-option>\r\n                            </mat-select>\r\n                            <mat-error\r\n                                    *ngIf="refill.errors && (refill.dirty || refill.touched) && (refill.errors.required)">\r\n                                Refill Duration is required\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf="minNextAppointment">\r\n                        <mat-form-field class="full-width">\r\n                            <input matInput [matDatepicker]="picker1"\r\n                                   placeholder="Date of Next Appointment"\r\n                                   [(ngModel)]="entity.nextAppointment"\r\n                                   #next="ngModel"\r\n                                   [min]="minNextAppointment"\r\n                                   [max]="maxNextVisit"\r\n                                   name="next"\r\n                                   required>\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]="picker1">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker1></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf="next.errors && (next.dirty || next.touched) && (next.errors.required)">\r\n                                Date of Next Appointment is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="next.errors && (next.dirty || next.touched) && (next.errors.max)">\r\n                                Date of Next Appointment must be after {{maxNextVisit | date:\'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="next.errors && (next.dirty || next.touched) && (next.errors.min)">\r\n                                Date of Next Appointment must be after {{minNextAppointment | date:\'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class="full-width" *ngIf="entity.mmdType">\r\n                            <mat-label>MMD Type</mat-label>\r\n                            <input matInput disabled [value]="entity.mmdType || \'\'">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-checkbox [(ngModel)]="entity.prescriptionError" name="error">Any prescription error?\r\n                            </mat-checkbox>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-checkbox [(ngModel)]="entity.adrScreened" name="screened">Adverse Drug Reactions\r\n                            </mat-checkbox>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field *ngIf="entity.adrScreened">\r\n                                <mat-select multiple [(ngModel)]="entity.adrs"\r\n                                            name="adrs"\r\n                                >\r\n                                    <mat-option></mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field>\r\n                                <mat-select placeholder="Regimen Type"\r\n                                            (selectionChange)="regimenTypeChange($event.value)">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option *ngFor="let type of regimenTypes"\r\n                                                [value]="type">{{type.description}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field>\r\n                                <mat-select placeholder="Regimen"\r\n                                            multiple\r\n                                            name="regimen"\r\n                                            [(ngModel)]="selectedRegimens"\r\n                                            [compareWith]="entityCompare"\r\n                                            (selectionChange)="regimenChange($event.value)">\r\n                                    <mat-option *ngFor="let regimen of regimens"\r\n                                                [value]="regimen">{{regimen.description}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        Drug Dispensed\r\n                        <mat-divider></mat-divider>\r\n                        <ngx-datatable\r\n                            #mydatatable\r\n                            class="material"\r\n                            [headerHeight]="50"\r\n                            [limit]="8"\r\n                            [columnMode]="ColumnMode.force"\r\n                            [footerHeight]="50"\r\n                            rowHeight="auto"\r\n                            [rows]="rows"\r\n                        >\r\n                            <ngx-datatable-column name="Description">\r\n                                <ng-template ngx-datatable-cell-template let-value="value">\r\n                                    <mat-form-field>\r\n                                        <input matInput disabled [value]="value" style="font-weight: 900">\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column [maxWidth]="1">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name="Morning">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                    <mat-form-field class="full-width">\r\n                                        <input\r\n                                                autofocus\r\n                                                matInput\r\n                                                type="number"\r\n                                                (blur)="updateValue($event, \'morning\', rowIndex)"\r\n                                                [value]="value"\r\n                                        >\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column [maxWidth]="1">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name="Afternoon">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                    <mat-form-field class="full-width">\r\n                                        <input\r\n                                                autofocus\r\n                                                matInput\r\n                                                type="number"\r\n                                                (blur)="updateValue($event, \'afternoon\', rowIndex)"\r\n                                                [value]="value"\r\n                                        >\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column [maxWidth]="1">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name="Evening">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                    <mat-form-field class="full-width">\r\n                                        <input\r\n                                                autofocus\r\n                                                matInput\r\n                                                type="number"\r\n                                                (blur)="updateValue($event, \'evening\', rowIndex)"\r\n                                                [value]="value"\r\n                                        >\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column [maxWidth]="1">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name="Duration">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                    <mat-form-field class="full-width">\r\n                                        <input\r\n                                                autofocus\r\n                                                matInput\r\n                                                type="number"\r\n                                                (blur)="updateValue($event, \'duration\', rowIndex)"\r\n                                                [value]="value"\r\n                                        >\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column [maxWidth]="1">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name="Quantity">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                    <mat-form-field>\r\n                                        <input matInput disabled [value]="value" style="font-weight: 900">\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                        </ngx-datatable>\r\n                    </div>\r\n                    <mat-divider></mat-divider>\r\n                </mat-card-content>\r\n                <mat-card-actions class="lamis-edit-form-actions">\r\n                    <button mat-raised-button type="button" (click)="previousState()">Back</button>\r\n                    <button mat-raised-button color=\'primary\'\r\n                            [disabled]="pharmacyForm.invalid || rows.length === 0 || isSaving"\r\n                            type="submit">\r\n                        {{entity.id !== undefined ? \'Update\' : \'Save\'}}\r\n                    </button>\r\n                </mat-card-actions>\r\n            </mat-card>\r\n        </form>\r\n    </div>\r\n</div>\r\n'}),g("design:paramtypes",[R,o.NotificationService,i.AppLoaderService,l.ActivatedRoute])],e)}(),S=function(){function e(e){this.service=e}return e.prototype.resolve=function(e,t){var n=e.params.id?e.params.id:null;return n?this.service.findByUuid(n).pipe(r.filter((function(e){return e.ok})),r.map((function(e){return e.body}))):m.of({})},e.ctorParameters=function(){return[{type:R}]},e=f([t.Injectable(),g("design:paramtypes",[R])],e)}(),I=[{path:"",data:{title:"Pharmacy Refill",breadcrumb:"PHARMACY REFILL"},children:[{path:":id/patient/:patientId/view",component:C,resolve:{entity:S},data:{authorities:["ROLE_USER"],title:"Pharmacy Refill",breadcrumb:"PHARMACY REFILL"}},{path:"patient/:patientId/new",component:x,data:{authorities:["ROLE_DEC"],title:"Pharmacy Refill",breadcrumb:"ADD PHARMACY REFILL"}},{path:":id/patient/:patientId/edit",component:x,resolve:{entity:S},data:{authorities:["ROLE_DEC"],title:"Pharmacy Refill Edit",breadcrumb:"PHARMACY REFILL EDIT"}}]}],k=function(){function e(e){this.pharmacyService=e,this.properties=[]}return e.prototype.ngOnInit=function(){var e=this;this.pharmacyService.latestVisit(this.patientId).subscribe((function(t){e.pharmacy=t,e.buildProperties()}))},e.prototype.buildProperties=function(){var e=this;this.properties.push(new o.CardViewDateItemModel({key:"dv",value:this.pharmacy.dateVisit,label:"Last Pharmacy Refill",format:"dd MMM, yyyy"})),this.properties.push(new o.CardViewDateItemModel({key:"nv",value:this.pharmacy.nextAppointment,label:"Next Pharmacy Refill",format:"dd MMM, yyyy"})),this.properties.push(new o.CardViewTextItemModel({label:"MMD Type",key:"fs",value:this.pharmacy.mmdType})),this.pharmacyService.regimenInfo(this.pharmacy.patient.id).subscribe((function(t){e.properties.push(new o.CardViewTextItemModel({label:"Regimen Line",key:"cs",value:t.regimenType})),e.properties.push(new o.CardViewTextItemModel({label:"Regimen",key:"ts",value:t.regimen}))}))},e.ctorParameters=function(){return[{type:R}]},f([t.Input(),g("design:type",Number)],e.prototype,"patientId",void 0),e=f([t.Component({selector:"pharmacy-widget",template:'<adf-card-view [properties]="properties"></adf-card-view>\n'}),g("design:paramtypes",[R])],e)}();
/*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
function A(){return[s.MatAutocompleteModule,s.MatButtonModule,s.MatCardModule,s.MatCheckboxModule,s.MatChipsModule,s.MatDatepickerModule,s.MatDialogModule,s.MatGridListModule,s.MatIconModule,s.MatInputModule,s.MatListModule,s.MatNativeDateModule,s.MatOptionModule,s.MatProgressSpinnerModule,s.MatRadioModule,s.MatRippleModule,s.MatSelectModule,s.MatSlideToggleModule,s.MatTableModule,s.MatTabsModule,s.MatMenuModule,s.MatProgressBarModule,s.MatSidenavModule,s.MatSnackBarModule,s.MatToolbarModule,s.MatTooltipModule,p.MatDatetimepickerModule,p.MatNativeDatetimeModule]}var T=function(){function e(){}return e=f([t.NgModule({imports:A(),exports:A()})],e)}(),V=function(){function e(){}return e=f([t.NgModule({imports:[d.CommonModule,T,o.CoreModule],declarations:[k],entryComponents:[k],exports:[k],providers:[]})],e)}(),P=function(){function e(){}return e=f([t.NgModule({declarations:[C,x],imports:[d.CommonModule,s.MatInputModule,s.MatIconModule,s.MatCardModule,s.MatSelectModule,s.MatButtonModule,l.RouterModule.forChild(I),s.MatProgressBarModule,v.FormsModule,c.CovalentMessageModule,c.CovalentDialogsModule,s.MatTableModule,s.MatListModule,o.CoreModule,V,u.NgxDatatableModule,v.ReactiveFormsModule,i.MatDateFormatModule,y.CustomFormsModule],exports:[C,x],entryComponents:[],providers:[S]})],e)}(),E=a,F=function(){function e(e,t){this.http=e,this.serverUrl=t,this.resourceUrl="",this.resourceUrl=t.SERVER_API_URL+"/api/devolves"}return e.prototype.create=function(e){var t=this,n=this.convertDateFromClient(e);return this.http.post(this.resourceUrl,n,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.update=function(e){var t=this,n=this.convertDateFromClient(e);return this.http.put(this.resourceUrl,n,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.find=function(e){var t=this;return this.http.get(this.resourceUrl+"/"+e,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.findByUuid=function(e){var t=this;return this.http.get(this.resourceUrl+"/by-uuid/"+e,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.delete=function(e){return this.http.delete(this.resourceUrl+"/"+e,{observe:"response"})},e.prototype.getDevolveDatesByPatient=function(e){return this.http.get(this.resourceUrl+"/patient/"+e+"/visit-dates").pipe(r.map((function(e){return e.forEach((function(e){return E(e)})),e})))},e.prototype.getStates=function(){return this.http.get("/api/states")},e.prototype.getLgasByState=function(e){return this.http.get("/api/provinces/state/"+e)},e.prototype.getCommunityPharmaciesByLga=function(e){return this.http.get(this.resourceUrl+"/community-pharmacies/lga/"+e)},e.prototype.getRelatedPharmacy=function(e,t,n){var a=n.format(i.DATE_FORMAT);return this.http.get(this.resourceUrl+"/"+e+"/patient/"+t+"/related-pharmacy/at/"+a).pipe(r.map((function(e){return e.dateVisit&&(e.dateVisit=E(e.dateVisit).format("DD MMM, YYYY")),e})))},e.prototype.getRelatedClinic=function(e,t,n){var a=n.format(i.DATE_FORMAT);return this.http.get(this.resourceUrl+"/"+e+"/patient/"+t+"/related-clinic/at/"+a).pipe(r.map((function(e){return e.dateVisit&&(e.dateVisit=E(e.dateVisit).format("DD MMM, YYYY")),e})))},e.prototype.getRelatedViralLoad=function(e,t,n){var a=n.format(i.DATE_FORMAT);return this.http.get(this.resourceUrl+"/"+e+"/patient/"+t+"/related-viral-load/at/"+a).pipe(r.map((function(e){return e.dateResultReceived&&(e.dateResultReceived=E(e.dateResultReceived).format("DD MMM, YYYY")),e})))},e.prototype.getRelatedCD4=function(e,t,n){var a=n.format(i.DATE_FORMAT);return this.http.get(this.resourceUrl+"/"+e+"/patient/"+t+"/related-cd4/at/"+a).pipe(r.map((function(e){return e.dateResultReceived&&(e.dateResultReceived=E(e.dateResultReceived).format("DD MMM, YYYY")),e})))},e.prototype.getStateByLga=function(e){return this.http.get("/api/provinces/"+e+"/state")},e.prototype.convertDateFromClient=function(e){return Object.assign({},e,{dateDevolved:null!=e.dateDevolved&&e.dateDevolved.isValid()?e.dateDevolved.format(i.DATE_FORMAT):null,dateNextClinic:null!=e.dateNextClinic&&e.dateNextClinic.isValid()?e.dateNextClinic.format(i.DATE_FORMAT):null,dateNextRefill:null!=e.dateNextRefill&&e.dateNextRefill.isValid()?e.dateNextRefill.format(i.DATE_FORMAT):null,dateDiscontinued:null!=e.dateDiscontinued&&e.dateDiscontinued.isValid()?e.dateDiscontinued.format(i.DATE_FORMAT):null,dateReturnedToFacility:null!=e.dateReturnedToFacility&&e.dateReturnedToFacility.isValid()?e.dateReturnedToFacility.format(i.DATE_FORMAT):null})},e.prototype.convertDateFromServer=function(e){return e.body&&(e.body.dateReturnedToFacility=null!=e.body.dateReturnedToFacility?E(e.body.dateReturnedToFacility):null,e.body.dateNextRefill=null!=e.body.dateNextRefill?E(e.body.dateNextRefill):null,e.body.dateNextClinic=null!=e.body.dateNextClinic?E(e.body.dateNextClinic):null,e.body.dateDevolved=null!=e.body.dateDevolved?E(e.body.dateDevolved):null,e.body.dateDiscontinued=null!=e.body.dateDiscontinued?E(e.body.dateDiscontinued):null),e},e.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:t.Inject,args:[i.SERVER_API_URL_CONFIG]}]}]},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(n.HttpClient),t.ɵɵinject(i.SERVER_API_URL_CONFIG))},token:e,providedIn:"root"}),e=f([t.Injectable({providedIn:"root"}),h(1,t.Inject(i.SERVER_API_URL_CONFIG)),g("design:paramtypes",[n.HttpClient,Object])],e)}(),L=function(){function e(e,t,n,i,r){this.router=e,this.route=t,this.devolveService=n,this._dialogService=i,this.notificationService=r,this.properties=[]}return e.prototype.ngOnInit=function(){var e=this;this.route.data.subscribe((function(t){var n=t.entity;e.entity=n&&n.body?n.body:n,e.buildProperties()}))},e.prototype.edit=function(){this.router.navigate(["/","devolves",this.entity.uuid,"patient",this.entity.patient.uuid,"edit"])},e.prototype.delete=function(){var e=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this client devolve, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(t){t&&e.devolveService.delete(e.entity.id).subscribe((function(t){t.ok?e.router.navigate(["patients"]):e.notificationService.showError("Error deleting devolve, please try again")}))}))},e.prototype.buildProperties=function(){var e=this;this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateDevolved,label:"Date of Devolvement",format:"dd MMM, yyyy"}));var t="MMD";switch(this.entity.dmocType){case"ARC":t="Adolescent Refill Club";break;case"CPARP":t="CPARP";break;case"CARC":t="CARC";break;case"F_CARG":t="F-CARG";break;case"FAST_TRACK":t="Fast Track";break;case"S_CARG":t="s-CARG";break;case"MMS":t="MMS"}this.properties.push(new o.CardViewTextItemModel({key:"ds",value:t,label:"Type of DMOC"})),this.devolveService.getRelatedClinic(this.entity.id,this.entity.patient.id,this.entity.dateDevolved).subscribe((function(t){e.relatedClinic=t,console.log("Related clinic",t),e.relatedClinic.dateVisit&&(e.properties.push(new o.CardViewTextItemModel({key:"ds",value:e.relatedClinic.dateVisit,label:"Date of Clinical Stage"})),e.properties.push(new o.CardViewTextItemModel({key:"ds",value:e.relatedClinic&&e.relatedClinic.clinicStage,label:"Current Clinical Stage"})))})),this.devolveService.getRelatedPharmacy(this.entity.id,this.entity.patient.id,this.entity.dateDevolved).subscribe((function(t){e.relatedPharmacy=t,e.relatedPharmacy.dateVisit&&(e.properties.push(new o.CardViewTextItemModel({key:"ds",value:e.relatedPharmacy.dateVisit,label:"Date of Current ARV Regimen"})),e.properties.push(new o.CardViewTextItemModel({key:"ds",value:e.relatedPharmacy&&e.relatedPharmacy.regimen,label:"Current ARV Regimen"})))})),this.devolveService.getRelatedViralLoad(this.entity.id,this.entity.patient.id,this.entity.dateDevolved).subscribe((function(t){e.relatedViralLoad=t,e.relatedViralLoad.dateResultReceived&&(e.properties.push(new o.CardViewTextItemModel({key:"ds",value:e.relatedViralLoad.dateResultReceived,label:"Date of Viral Load"})),e.properties.push(new o.CardViewTextItemModel({key:"ds",value:e.relatedViralLoad&&e.relatedViralLoad.value,label:"Current Viral Load"})))})),this.devolveService.getRelatedCD4(this.entity.id,this.entity.patient.id,this.entity.dateDevolved).subscribe((function(t){e.relatedCD4=t,e.relatedCD4.dateResultReceived&&(e.properties.push(new o.CardViewTextItemModel({key:"ds",value:e.relatedCD4.dateResultReceived,label:"Date of CD4"})),e.properties.push(new o.CardViewTextItemModel({key:"ds",value:e.relatedCD4&&e.relatedCD4.value,label:"Current Viral Load"})))})),this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateNextClinic,label:"Date of next Clinic/Lab",format:"dd MMM, yyyy"})),this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateNextRefill,label:"Date of Viral Load",format:"dd MMM, yyyy"})),this.entity.communityPharmacy&&this.properties.push(new o.CardViewTextItemModel({key:"ds",value:this.entity.communityPharmacy.name,label:"Community Pharmacy"})),this.entity.dateDiscontinued&&(this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateDiscontinued,label:"Date of Discontinuation",format:"dd MMM, yyyy"})),this.properties.push(new o.CardViewTextItemModel({key:"ds",value:this.entity.reasonDiscontinued,label:"Reason of Discontinuation"})),this.entity.dateReturnedToFacility&&this.properties.push(new o.CardViewDateItemModel({key:"ds",value:this.entity.dateReturnedToFacility,label:"Date Returned to Facility",format:"dd MMM, yyyy"})))},e.prototype.previousState=function(){window.history.back()},e.ctorParameters=function(){return[{type:l.Router},{type:l.ActivatedRoute},{type:F},{type:c.TdDialogService},{type:o.NotificationService}]},e=f([t.Component({selector:"devolve-details",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <mat-card>\n            <mat-card-header>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-card-view [properties]="properties" editable="false"></adf-card-view>\n                <mat-divider></mat-divider>\n            </mat-card-content>\n            <mat-card-actions class="lamis-edit-form-actions">\n                <button mat-button (click)="previousState()">Back</button>\n                <button mat-raised-button color="warn" (click)="delete()">Delete</button>\n                <button mat-raised-button color="primary" (click)="edit()">Edit</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n'}),g("design:paramtypes",[l.Router,l.ActivatedRoute,F,c.TdDialogService,o.NotificationService])],e)}(),N=a,_=function(){function e(e,t,n,i,r){this.pharmacyService=e,this.devolveService=t,this.notification=n,this.appLoaderService=i,this.activatedRoute=r,this.entity={},this.states=[],this.dmocTypes=[],this.error=!1,this.tomorrow=N().add(1,"days"),this.today=N(),this.editing={},this.devolveDates=[],this.enableCommunityPharmacy=!1,this.properties=[]}return e.prototype.createEntity=function(){return{}},e.prototype.ngOnInit=function(){var e=this;this.dmocTypes.push({name:"Adolescent Refill Club",value:"ARC"}),this.dmocTypes.push({name:"CARC",value:"CARC"}),this.dmocTypes.push({name:"CPARP",value:"CPARP"}),this.dmocTypes.push({name:"F-CARG",value:"F_CARG"}),this.dmocTypes.push({name:"Fast Track",value:"FAST_TRACK"}),this.dmocTypes.push({name:"S-CARG",value:"S_CARG"}),this.activatedRoute.data.subscribe((function(t){var n=t.entity;e.entity=n&&n.body?n.body:n,void 0===e.entity&&(e.entity=e.createEntity());var i=e.activatedRoute.snapshot.paramMap.get("patientId");if(e.pharmacyService.getPatient(i).subscribe((function(t){e.entity.patient=t,e.patient=t,e.dateRegistration=t.dateRegistration,e.entity.facility=t.facility,e.minNextAppointment=e.dateRegistration.add(15,"days"),e.updateRelated()})),e.entity.id){var r=e.entity.dmocType;"MMD"===r?e.dmocTypes.push({name:"MMD",value:"MMD"}):"MMS"===r&&e.dmocTypes.push({name:"MMS",value:"MMS"}),e.entity.communityPharmacy&&(e.enableCommunityPharmacy=!0,e.devolveService.getStateByLga(e.entity.communityPharmacy.lga.id).subscribe((function(t){e.state=t,e.lga=e.entity.communityPharmacy.lga,e.lgaChanged(e.lga.id),e.stateChanged(e.state.id)}))),e.entity.dateDiscontinued?e.minDate=e.entity.dateDiscontinued.clone().add(2,"day"):(e.minDiscontinued=e.entity.dateDevolved.clone().add(1,"day"),e.minDate=e.entity.dateDevolved.clone().add(2,"day"))}e.devolveService.getStates().subscribe((function(t){return e.states=t}))}))},e.prototype.dateDiscontinuedChanged=function(){this.entity.dateDiscontinued&&(this.minDate=this.entity.dateDiscontinued.clone().add(1,"day"))},e.prototype.filterDates=function(e){var t=!1;return this.devolveDates.forEach((function(n){0===e.diff(n,"days")&&(t=!0)})),this.entity.id&&0===e.diff(this.entity.dateDevolved,"days")||!t},e.prototype.stateChanged=function(e){var t=this;this.devolveService.getLgasByState(e).subscribe((function(e){return t.lgas=e}))},e.prototype.lgaChanged=function(e){var t=this;this.devolveService.getCommunityPharmaciesByLga(e).subscribe((function(e){return t.communityPharmacies=e}))},e.prototype.communityPharmacyChanged=function(e){this.properties=[],this.properties.push(new o.CardViewTextItemModel({key:"add",label:"Address",value:e.address})),this.properties.push(new o.CardViewTextItemModel({key:"phone",label:"Telephone Number",value:e.phone})),this.properties.push(new o.CardViewTextItemModel({key:"email",label:"Email",value:e.email}))},e.prototype.dmocChanged=function(e){this.enableCommunityPharmacy="CPARP"===e},e.prototype.dateDevolvedChanged=function(e){this.minNextAppointment=e.clone().add(7,"days"),this.maxNextVisit=e.clone().add(3,"months"),console.log("Dates",this.minNextAppointment,this.maxNextVisit),this.updateRelated()},e.prototype.updateRelated=function(){var e=this;this.entity.relatedViralLoad=null,this.entity.relatedClinic=null,this.entity.relatedCd4=null,this.entity.relatedPharmacy=null,this.entity.dateDevolved&&(this.devolveService.getRelatedClinic(this.entity.id||0,this.patient.id,this.entity.dateDevolved).subscribe((function(t){e.relatedClinic=t,e.entity.relatedClinic={id:t.id}})),this.devolveService.getRelatedPharmacy(this.entity.id||0,this.patient.id,this.entity.dateDevolved).subscribe((function(t){e.relatedPharmacy=t,e.entity.relatedPharmacy={id:t.id}})),this.devolveService.getRelatedCD4(this.entity.id||0,this.patient.id,this.entity.dateDevolved).subscribe((function(t){e.relatedCD4=t,e.entity.relatedCd4={id:t.id}})),this.devolveService.getRelatedViralLoad(this.entity.id||0,this.patient.id,this.entity.dateDevolved).subscribe((function(t){e.relatedViralLoad=t,e.entity.relatedViralLoad={id:t.id}})))},e.prototype.entityCompare=function(e,t){return i.entityCompare(e,t)},e.prototype.previousState=function(){window.history.back()},e.prototype.save=function(){this.appLoaderService.open("Saving visit..."),this.isSaving=!0,void 0!==this.entity.id?this.subscribeToSaveResponse(this.devolveService.update(this.entity)):this.subscribeToSaveResponse(this.devolveService.create(this.entity))},e.prototype.subscribeToSaveResponse=function(e){var t=this;e.subscribe((function(e){return t.onSaveSuccess(e.body)}),(function(e){t.appLoaderService.close(),t.onSaveError(),t.onError(e.message)}))},e.prototype.onSaveSuccess=function(e){this.appLoaderService.close(),this.isSaving=!1,this.notification.showInfo("Devolve successfully saved"),this.previousState()},e.prototype.onSaveError=function(){this.isSaving=!1,this.error=!0,this.notification.showError("Error saving devolve")},e.prototype.onError=function(e){this.isSaving=!1,this.notification.showError(e)},e.ctorParameters=function(){return[{type:R},{type:F},{type:o.NotificationService},{type:i.AppLoaderService},{type:l.ActivatedRoute}]},e=f([t.Component({selector:"devolve-edit",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #devolveForm="ngForm">\n            <mat-card class="default">\n                <mat-card-header>\n                </mat-card-header>\n                <mat-card-content *ngIf="patient">\n                    <div>\n                        <mat-form-field class="full-width" *ngIf="entity && dateRegistration">\n                            <input matInput [matDatepicker]="picker"\n                                   placeholder="Date of Devolvement"\n                                   [(ngModel)]="entity.dateDevolved"\n                                   (dateChange)="dateDevolvedChanged($event.value)"\n                                   #visit="ngModel"\n                                   [max]="today"\n                                   [min]="dateRegistration"\n                                   [disabled]="!!entity.dateDiscontinued"\n                                   name="visit"\n                                   required>\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]="picker">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)">\n                                Date of devolve is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)">\n                                Date of devolve cannot be before {{dateRegistration | date: \'dd MMM, yyyy\'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)">\n                                Date of devolve cannot be in the future\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class="full-width">\n                            <mat-select [(ngModel)]="entity.dmocType"\n                                        placeholder="Type of DMOC"\n                                        (selectionChange)="dmocChanged($event.value)"\n                                        #dmoc="ngModel" required name="dmoc">\n                                <mat-option></mat-option>\n                                <mat-option *ngFor="let type of dmocTypes"\n                                            [value]="type.value">{{type.name}}</mat-option>\n                            </mat-select>\n                            <mat-error\n                                    *ngIf="dmoc.errors && (dmoc.dirty || dmoc.touched) && (dmoc.errors.required)">\n                                Type of DMOC is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>ARV Regimen</mat-label>\n                                <input matInput disabled [value]="relatedPharmacy && relatedPharmacy.regimen || \'\'">\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Date of Current ARV Regimen</mat-label>\n                                <input matInput disabled\n                                       value="{{relatedPharmacy && relatedPharmacy.dateVisit || \'\'}} ">\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Current Viral Load</mat-label>\n                                <input matInput disabled [value]="relatedViralLoad && relatedViralLoad.value || \'\'">\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Date of Viral Load</mat-label>\n                                <input matInput disabled\n                                       value="{{relatedViralLoad && relatedViralLoad.dateResultReceived || \'\'}} ">\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Current CD4</mat-label>\n                                <input matInput disabled [value]="relatedCD4 && relatedCD4.value || \'\'">\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Date of CD4</mat-label>\n                                <input matInput disabled\n                                       value="{{relatedCD4 && relatedCD4.dateResultReceived || \'\'}} ">\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Current Clinical Stage</mat-label>\n                                <input matInput disabled [value]="relatedClinic && relatedClinic.clinicStage || \'\'">\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Date of Clinical Stage</mat-label>\n                                <input matInput disabled\n                                       value="{{relatedClinic && relatedClinic.dateVisit | date: \'dd MMM, yyyy\' || null}} ">\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <ng-container *ngIf="minNextAppointment">\n                        <div class="row">\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width">\n                                    <input matInput [matDatepicker]="picker2"\n                                           placeholder="Date of next ARV Refill"\n                                           [(ngModel)]="entity.dateNextRefill"\n                                           #visit2="ngModel"\n                                           [min]="minNextAppointment"\n                                           [max]="maxNextVisit"\n                                           name="visit2">\n                                    <mat-datepicker-toggle\n                                            matSuffix\n                                            [for]="picker2">\n                                    </mat-datepicker-toggle>\n                                    <mat-datepicker #picker2></mat-datepicker>\n                                    <mat-error\n                                            *ngIf="visit2.errors && (visit2.dirty || visit2.touched) && (visit2.errors.required)">\n                                        Date of next ARV Refill is required\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf="visit2.errors && (visit2.dirty || visit2.touched) && (visit2.errors.min)">\n                                        Date of next ARV Refill cannot be\n                                        before {{minNextAppointment | date: \'dd MMM, yyyy\'}}\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf="visit2.errors && (visit2.dirty || visit2.touched) && (visit2.errors.max)">\n                                        Date of next ARV Refill cannot be after {{maxNextVisit | date: \'dd NNN, yyyy\'}}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width">\n                                    <input matInput [matDatepicker]="picker3"\n                                           placeholder="Date of next Clinic/Lab"\n                                           [(ngModel)]="entity.dateNextClinic"\n                                           #visit3="ngModel"\n                                           [min]="minNextAppointment"\n                                           [max]="maxNextVisit"\n                                           name="visit3">\n                                    <mat-datepicker-toggle\n                                            matSuffix\n                                            [for]="picker3">\n                                    </mat-datepicker-toggle>\n                                    <mat-datepicker #picker3></mat-datepicker>\n                                    <mat-error\n                                            *ngIf="visit3.errors && (visit3.dirty || visit3.touched) && (visit3.errors.required)">\n                                        Date of next Clinic/Lab is required\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf="visit3.errors && (visit3.dirty || visit3.touched) && (visit3.errors.min)">\n                                        Date of next Clinic/Lab cannot be\n                                        before {{minNextAppointment | date: \'dd MMM, yyyy\'}}\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf="visit3.errors && (visit3.dirty || visit3.touched) && (visit3.errors.max)">\n                                        Date of next Clinic/Lab cannot be after {{maxNextVisit | date: \'dd NNN, yyyy\'}}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngIf="enableCommunityPharmacy">\n                        <div class="row">\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width">\n                                    <mat-label>State of Residence</mat-label>\n                                    <mat-select name="state"\n                                                [(ngModel)]="state"\n                                                (selectionChange)="stateChanged($event.value.id)">\n                                        <mat-option></mat-option>\n                                        <mat-option *ngFor="let state of states"\n                                                    [value]="state">{{state.name}}</mat-option>\n                                    </mat-select>\n                                </mat-form-field>\n                            </div>\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width">\n                                    <mat-label>LGA of Residence</mat-label>\n                                    <mat-select name="lga" [(ngModel)]="lga"\n                                                (selectionChange)="lgaChanged($event.value.id)">\n                                        <mat-option></mat-option>\n                                        <mat-option *ngFor="let lga of lgas" [value]="lga">{{lga.name}}</mat-option>\n                                    </mat-select>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                        <div class="row">\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width">\n                                    <mat-label>Community Pharmacy</mat-label>\n                                    <mat-select name="pharm" [(ngModel)]="entity.communityPharmacy" required\n                                                #pharm="ngModel"\n                                                (selectionChange)="communityPharmacyChanged($event.value)"\n                                                [compareWith]="entityCompare">\n                                        <mat-option></mat-option>\n                                        <mat-option *ngFor="let pharmacy of communityPharmacies"\n                                                    [value]="pharmacy">{{pharmacy.name}}</mat-option>\n                                    </mat-select>\n                                    <mat-error\n                                            *ngIf="pharm.errors && (pharm.dirty || pharm.touched) && (pharm.errors.required)">\n                                        Community Pharmacy is required\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                            <div class="col-md-6">\n                                <adf-card-view [properties]="properties" [editable]="false"></adf-card-view>\n                            </div>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngIf="entity.dateDiscontinued">\n                        <div class="row">\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width">\n                                    <mat-label>Date Discontinued</mat-label>\n                                    <input matInput [matDatepicker]="picker5"\n                                           [(ngModel)]="entity.dateDiscontinued"\n                                           #disc="ngModel"\n                                           (dateChange)="dateDiscontinuedChanged()"\n                                           [min]="minDiscontinued"\n                                           [max]="today"\n                                           name="disc"\n                                           required>\n                                    <mat-datepicker-toggle\n                                            matSuffix\n                                            [for]="picker5">\n                                    </mat-datepicker-toggle>\n                                    <mat-datepicker #picker5></mat-datepicker>\n                                    <mat-error\n                                            *ngIf="disc.errors && (disc.dirty || disc.touched) && (disc.errors.required)">\n                                        Date Discontinued is required\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf="disc.errors && (disc.dirty || disc.touched) && (disc.errors.min)">\n                                        Date Discontinued cannot be before {{minDiscontinued | date: \'dd MMM, yyyy\'}}\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf="disc.errors && (disc.dirty || disc.touched) && (disc.errors.max)">\n                                        Date Discontinued cannot be after {{today | date: \'dd MMM, yyyy\'}}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width">\n                                    <mat-label>Reason Discontinued</mat-label>\n                                    <mat-select name="reason" #reason="ngModel" [(ngModel)]="entity.reasonDiscontinued"\n                                                required>\n                                        <mat-option></mat-option>\n                                        <mat-option [value]="\'Becomes pregnant\'">Becomes pregnant</mat-option>\n                                        <mat-option [value]="\'Unable to pay service charge\'">Unable to pay service\n                                            charge\n                                        </mat-option>\n                                        <mat-option [value]="\'Develops comorbidity\'">Develops comorbidity</mat-option>\n                                        <mat-option [value]="\'Loss of viral suppression\'">Loss of viral suppression\n                                        </mat-option>\n                                        <mat-option [value]="\'Decides to go back to hospital\'">Decides to go back to\n                                            hospital\n                                        </mat-option>\n                                        <mat-option [value]="\'Becomes non-adherent\'">Becomes non-adherent</mat-option>\n                                    </mat-select>\n                                    <mat-error\n                                            *ngIf="reason.errors && (reason.dirty || reason.touched) && (reason.errors.required)">\n                                        Reason for Discontinuation is required\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                        <div class="row">\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width" *ngIf="minDate">\n                                    <input matInput [matDatepicker]="picker6"\n                                           placeholder="Date Returned to Facility"\n                                           [(ngModel)]="entity.dateReturnedToFacility"\n                                           #visit1="ngModel"\n                                           [min]="minDate"\n                                           [max]="today"\n                                           name="visit1"\n                                           required>\n                                    <mat-datepicker-toggle\n                                            matSuffix\n                                            [for]="picker6">\n                                    </mat-datepicker-toggle>\n                                    <mat-datepicker #picker6></mat-datepicker>\n                                    <mat-error\n                                            *ngIf="visit1.errors && (visit1.dirty || visit1.touched) && (visit1.errors.required)">\n                                        Date returned to Facility is required\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf="visit1.errors && (visit1.dirty || visit1.touched) && (visit1.errors.min)">\n                                        Date returned to Facility cannot be before {{minDate | date: \'dd MMM, yyyy\'}}\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf="visit1.errors && (visit1.dirty || visit1.touched) && (visit1.errors.max)">\n                                        Date returned to Facility cannot be after {{today | date: \'dd MMM, yyyy\'}}\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </ng-container>\n                    <mat-divider></mat-divider>\n                </mat-card-content>\n                <mat-card-actions class="lamis-edit-form-actions">\n                    <button mat-raised-button type="button" (click)="previousState()">Back</button>\n                    <button mat-raised-button color=\'primary\'\n                            [disabled]="devolveForm.invalid || isSaving"\n                            type="submit">\n                        {{entity.id !== undefined ? \'Update\' : \'Save\'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n'}),g("design:paramtypes",[R,F,o.NotificationService,i.AppLoaderService,l.ActivatedRoute])],e)}(),q=a,B=function(){function e(e,t,n,i,r){this.pharmacyService=e,this.devolveService=t,this.notification=n,this.appLoaderService=i,this.activatedRoute=r,this.entity={},this.dmocType="",this.isSaving=!1,this.today=q()}return e.prototype.ngOnInit=function(){var e=this,t=this.activatedRoute.snapshot.paramMap.get("patientId");this.pharmacyService.getPatient(t).subscribe((function(t){e.pharmacyService.getDevolvement(t.id,q()).subscribe((function(t){e.entity=t,e.entity.dateDiscontinued?e.minDate=t.dateDiscontinued.clone().add(2,"day"):(e.minDiscontinued=t.dateDevolved.clone().add(1,"day"),e.minDate=t.dateDevolved.clone().add(2,"day"));var n="MMD";switch(t.dmocType){case"ARC":n="Adolescent Refill Club";break;case"CPARP":n="CPARP";break;case"CARC":n="CARC";break;case"F_CARG":n="F-CARG";break;case"FAST_TRACK":n="Fast Track";break;case"S_CARG":n="S-CARG";break;case"MMS":n="MMS"}e.dmocType=n}))})),this.activatedRoute.data.subscribe((function(t){var n=t.entity;e.entity=n&&n.body?n.body:n}))},e.prototype.dateDiscontinuedChanged=function(){this.entity.dateDiscontinued&&(this.minDate=this.entity.dateDiscontinued.clone().add(1,"day"))},e.prototype.previousState=function(){window.history.back()},e.prototype.save=function(){this.appLoaderService.open("Saving visit..."),this.isSaving=!0,void 0!==this.entity.id?this.subscribeToSaveResponse(this.devolveService.update(this.entity)):this.subscribeToSaveResponse(this.devolveService.create(this.entity))},e.prototype.subscribeToSaveResponse=function(e){var t=this;e.subscribe((function(e){return t.onSaveSuccess(e.body)}),(function(e){t.appLoaderService.close(),t.onSaveError(),t.onError(e.message)}))},e.prototype.onSaveSuccess=function(e){this.appLoaderService.close(),this.isSaving=!1,this.notification.showInfo("Devolve successfully saved"),this.previousState()},e.prototype.onSaveError=function(){this.isSaving=!1,this.notification.showError("Error saving devolve")},e.prototype.onError=function(e){this.isSaving=!1,this.notification.showError(e)},e.ctorParameters=function(){return[{type:R},{type:F},{type:o.NotificationService},{type:i.AppLoaderService},{type:l.ActivatedRoute}]},e=f([t.Component({selector:"end-devolve",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #devolveForm="ngForm">\n            <mat-card class="default">\n                <mat-card-header>\n                </mat-card-header>\n                <mat-card-content *ngIf="entity">\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Date of Devolvement</mat-label>\n                                <input matInput disabled value="{{entity.dateDevolved | date: \'dd MMM, yyyy\'}}">\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>DMOC Type</mat-label>\n                                <input matInput disabled [value]="dmocType">\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Date Discontinued</mat-label>\n                                <input matInput [matDatepicker]="picker1"\n                                       [(ngModel)]="entity.dateDiscontinued"\n                                       #disc="ngModel"\n                                       (dateChange)="dateDiscontinuedChanged()"\n                                       [min]="minDiscontinued"\n                                       [max]="today"\n                                       name="disc"\n                                       required>\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]="picker1">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker1></mat-datepicker>\n                                <mat-error\n                                        *ngIf="disc.errors && (disc.dirty || disc.touched) && (disc.errors.required)">\n                                    Date Discontinued is required\n                                </mat-error>\n                                <mat-error\n                                        *ngIf="disc.errors && (disc.dirty || disc.touched) && (disc.errors.min)">\n                                    Date Discontinued cannot be before {{minDiscontinued | date: \'dd MMM, yyyy\'}}\n                                </mat-error>\n                                <mat-error\n                                        *ngIf="disc.errors && (disc.dirty || disc.touched) && (disc.errors.max)">\n                                    Date Discontinued cannot be after {{today | date: \'dd MMM, yyyy\'}}\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Reason Discontinued</mat-label>\n                                <mat-select name="reason" #reason="ngModel" [(ngModel)]="entity.reasonDiscontinued" required>\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'Becomes pregnant\'">Becomes pregnant</mat-option>\n                                    <mat-option [value]="\'Unable to pay service charge\'">Unable to pay service charge</mat-option>\n                                    <mat-option [value]="\'Develops comorbidity\'">Develops comorbidity</mat-option>\n                                    <mat-option [value]="\'Loss of viral suppression\'">Loss of viral suppression</mat-option>\n                                    <mat-option [value]="\'Decides to go back to hospital\'">Decides to go back to hospital</mat-option>\n                                    <mat-option [value]="\'Becomes non-adherent\'">Becomes non-adherent</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf="reason.errors && (reason.dirty || reason.touched) && (reason.errors.required)">\n                                    Reason for Discontinuation is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width" *ngIf="minDate">\n                                <input matInput [matDatepicker]="picker"\n                                       placeholder="Date Returned to Facility"\n                                       [(ngModel)]="entity.dateReturnedToFacility"\n                                       #visit="ngModel"\n                                       [min]="minDate"\n                                       [max]="today"\n                                       name="visit"\n                                       required>\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]="picker">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker></mat-datepicker>\n                                <mat-error\n                                        *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)">\n                                    Date returned to Facility is required\n                                </mat-error>\n                                <mat-error\n                                        *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)">\n                                    Date returned to Facility cannot be before {{minDate | date: \'dd MMM, yyyy\'}}\n                                </mat-error>\n                                <mat-error\n                                        *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)">\n                                    Date returned to Facility cannot be after {{today | date: \'dd MMM, yyyy\'}}\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </mat-card-content>\n                <mat-card-actions class="lamis-edit-form-actions">\n                    <button mat-raised-button type="button" (click)="previousState()">Back</button>\n                    <button mat-raised-button color=\'primary\'\n                            [disabled]="devolveForm.invalid || isSaving || !entity.dateDiscontinued"\n                            type="submit">\n                        Update\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n'}),g("design:paramtypes",[R,F,o.NotificationService,i.AppLoaderService,l.ActivatedRoute])],e)}(),U=function(){function e(e){this.service=e}return e.prototype.resolve=function(e,t){var n=e.params.id?e.params.id:null;return n?this.service.findByUuid(n).pipe(r.filter((function(e){return e.ok})),r.map((function(e){return e.body}))):m.of({})},e.ctorParameters=function(){return[{type:F}]},e=f([t.Injectable(),g("design:paramtypes",[F])],e)}(),O=[{path:"",data:{title:"Client Devolvement",breadcrumb:"CLIENT DEVOLVEMENT"},children:[{path:":id/patient/:patientId/view",component:L,resolve:{entity:U},data:{authorities:["ROLE_USER"],title:"Client Devolve",breadcrumb:"CLIENT DEVOLVE"}},{path:"patient/:patientId/new",component:_,data:{authorities:["ROLE_DEC"],title:"Client Devolve",breadcrumb:"DEVOLVE CLIENT"}},{path:":id/patient/:patientId/edit",component:_,resolve:{entity:U},data:{authorities:["ROLE_DEC"],title:"Devolve Edit",breadcrumb:"DEVOLVE EDIT"}},{path:"return/patient/:patientId/new",component:B,data:{authorities:["ROLE_DEC"],title:"End Devolve",breadcrumb:"END CLIENT DEVOLVE"}}]}],j=function(){function e(){}return e=f([t.NgModule({imports:[d.CommonModule,v.FormsModule,l.RouterModule.forChild(O),v.ReactiveFormsModule,y.CustomFormsModule,o.CoreModule,s.MatDatepickerModule,i.MatDateFormatModule,s.MatInputModule,s.MatButtonModule,s.MatCardModule,s.MatSelectModule,c.CovalentCommonModule,c.CovalentDialogsModule],declarations:[L,_,B],providers:[U]})],e)}();e.DevolveModule=j,e.PharmacyModule=P,e.PharmacyService=R,e.PharmacyWidgetModule=V,e.ɵa=C,e.ɵb=x,e.ɵc=S,e.ɵd=I,e.ɵe=A,e.ɵf=T,e.ɵg=k,e.ɵh=U,e.ɵi=O,e.ɵj=L,e.ɵk=F,e.ɵl=_,e.ɵm=B,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=lamis-pharmacy-1.1.4.umd.min.js.map