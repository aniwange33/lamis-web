import * as tslib_1 from "tslib";
import {Inject, Injectable} from '@angular/core';
import {HttpClient, HttpResponse} from '@angular/common/http';
import {DATE_FORMAT, SERVER_API_URL_CONFIG} from '@lamis/web-core';
import {map} from 'rxjs/operators';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";

const moment = moment_;
let DevolveService = class DevolveService {
    constructor(http, serverUrl) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.resourceUrl = '';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/devolves';
    }

    create(devolve) {
        const copy = this.convertDateFromClient(devolve);
        return this.http
            .post(this.resourceUrl, copy, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    update(devolve) {
        const copy = this.convertDateFromClient(devolve);
        return this.http
            .put(this.resourceUrl, copy, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    find(id) {
        return this.http
            .get(`${this.resourceUrl}/${id}`, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    findByUuid(id) {
        return this.http
            .get(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})
            .pipe(map((res) => this.convertDateFromServer(res)));
    }

    delete(id) {
        return this.http.delete(`${this.resourceUrl}/${id}`, {observe: 'response'});
    }

    getDevolveDatesByPatient(patientId) {
        return this.http.get(`${this.resourceUrl}/patient/${patientId}/visit-dates`)
            .pipe(map((res) => {
                res.forEach(d => moment(d));
                return res;
            }));
    }

    getStates() {
        return this.http.get('/api/states');
    }

    getLgasByState(id) {
        return this.http.get(`/api/provinces/state/${id}`);
    }

    getCommunityPharmaciesByLga(id) {
        return this.http.get(`${this.resourceUrl}/community-pharmacies/lga/${id}`);
    }

    getRelatedPharmacy(devolveId, patientId, date) {
        const d = date.format(DATE_FORMAT);
        return this.http.get(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-pharmacy/at/${d}`)
            .pipe(map(res => {
                if (res.dateVisit) {
                    res.dateVisit = moment(res.dateVisit).format('DD MMM, YYYY');
                }
                return res;
            }));
    }

    getRelatedClinic(devolveId, patientId, date) {
        const d = date.format(DATE_FORMAT);
        return this.http.get(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-clinic/at/${d}`)
            .pipe(map(res => {
                if (res.dateVisit) {
                    res.dateVisit = moment(res.dateVisit).format('DD MMM, YYYY');
                }
                return res;
            }));
    }

    getRelatedViralLoad(devolveId, patientId, date) {
        const d = date.format(DATE_FORMAT);
        return this.http.get(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-viral-load/at/${d}`)
            .pipe(map(res => {
                if (res.dateResultReceived) {
                    res.dateResultReceived = moment(res.dateResultReceived).format('DD MMM, YYYY');
                }
                return res;
            }));
    }

    getRelatedCD4(devolveId, patientId, date) {
        const d = date.format(DATE_FORMAT);
        return this.http.get(`${this.resourceUrl}/${devolveId}/patient/${patientId}/related-cd4/at/${d}`)
            .pipe(map(res => {
                if (res.dateResultReceived) {
                    res.dateResultReceived = moment(res.dateResultReceived).format('DD MMM, YYYY');
                }
                return res;
            }));
    }

    getStateByLga(id) {
        return this.http.get(`/api/provinces/${id}/state`);
    }

    convertDateFromClient(devolve) {
        const copy = Object.assign({}, devolve, {
            dateDevolved: devolve.dateDevolved != null && devolve.dateDevolved.isValid() ? devolve.dateDevolved.format(DATE_FORMAT) : null,
            dateNextClinic: devolve.dateNextClinic != null && devolve.dateNextClinic.isValid() ? devolve.dateNextClinic.format(DATE_FORMAT) : null,
            dateNextRefill: devolve.dateNextRefill != null && devolve.dateNextRefill.isValid() ? devolve.dateNextRefill.format(DATE_FORMAT) : null,
            dateDiscontinued: devolve.dateDiscontinued != null && devolve.dateDiscontinued.isValid() ? devolve.dateDiscontinued.format(DATE_FORMAT) : null,
            dateReturnedToFacility: devolve.dateReturnedToFacility != null && devolve.dateReturnedToFacility.isValid() ? devolve.dateReturnedToFacility.format(DATE_FORMAT) : null
        });
        return copy;
    }

    convertDateFromServer(res) {
        if (res.body) {
            res.body.dateReturnedToFacility = res.body.dateReturnedToFacility != null ? moment(res.body.dateReturnedToFacility) : null;
            res.body.dateNextRefill = res.body.dateNextRefill != null ? moment(res.body.dateNextRefill) : null;
            res.body.dateNextClinic = res.body.dateNextClinic != null ? moment(res.body.dateNextClinic) : null;
            res.body.dateDevolved = res.body.dateDevolved != null ? moment(res.body.dateDevolved) : null;
            res.body.dateDiscontinued = res.body.dateDiscontinued != null ? moment(res.body.dateDiscontinued) : null;
        }
        return res;
    }
};
DevolveService.ctorParameters = () => [
    {type: HttpClient},
    {type: undefined, decorators: [{type: Inject, args: [SERVER_API_URL_CONFIG,]}]}
];
DevolveService.ngInjectableDef = i0.ɵɵdefineInjectable({
    factory: function DevolveService_Factory() {
        return new DevolveService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG));
    }, token: DevolveService, providedIn: "root"
});
DevolveService = tslib_1.__decorate([
    Injectable({providedIn: 'root'}),
    tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
    tslib_1.__metadata("design:paramtypes", [HttpClient, Object])
], DevolveService);
export {DevolveService};
//# sourceMappingURL=data:application/json;base64,
