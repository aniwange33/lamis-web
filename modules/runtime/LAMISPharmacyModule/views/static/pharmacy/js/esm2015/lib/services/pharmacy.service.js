import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { DATE_FORMAT, SERVER_API_URL_CONFIG } from '@lamis/web-core';
import { map } from 'rxjs/operators';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";
const moment = moment_;
let PharmacyService = class PharmacyService {
    constructor(http, serverUrl) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.resourceUrl = '';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/pharmacies';
    }
    create(pharmacy) {
        const copy = this.convertDateFromClient(pharmacy);
        return this.http
            .post(this.resourceUrl, copy, { observe: 'response' })
            .pipe(map((res) => this.convertDateFromServer(res)));
    }
    update(pharmacy) {
        const copy = this.convertDateFromClient(pharmacy);
        console.log('Lines', copy);
        return this.http
            .put(this.resourceUrl, copy, { observe: 'response' })
            .pipe(map((res) => this.convertDateFromServer(res)));
    }
    find(id) {
        return this.http
            .get(`${this.resourceUrl}/${id}`, { observe: 'response' })
            .pipe(map((res) => this.convertDateFromServer(res)));
    }
    findByUuid(id) {
        return this.http
            .get(`${this.resourceUrl}/by-uuid/${id}`, { observe: 'response' })
            .pipe(map((res) => this.convertDateFromServer(res)));
    }
    delete(id) {
        return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });
    }
    getPatient(id) {
        return this.http.get(`/api/patients/by-uuid/${id}`, { observe: 'body' })
            .pipe(map((res) => {
            if (res) {
                res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null;
            }
            return res;
        }));
    }
    getVisitDatesByPatient(patientId) {
        return this.http.get(`${this.resourceUrl}/patient/${patientId}/visit-dates`)
            .pipe(map((res) => {
            res.forEach(d => moment(d));
            return res;
        }));
    }
    hasDeadStatus(puuid) {
        return this.http.get(`${this.resourceUrl}/patient/${puuid}/has-dead-status`, { observe: 'response' })
            .pipe(map(res => {
            if (res.body) {
                res.body.dateStatus = res.body.dateStatus != null ? moment(res.body.dateStatus) : null;
            }
            return res;
        }));
    }
    regimenTypes() {
        return this.http.get(`${this.resourceUrl}/regimen-types`);
    }
    regimenInfo(patientId) {
        return this.http.get(`${this.resourceUrl}/regimen-info/patient/${patientId}`);
    }
    adrs() {
        return this.http.get(`${this.resourceUrl}/adrs`);
    }
    getLinesByPharmacy(pharmacyId) {
        return this.http.get(`${this.resourceUrl}/${pharmacyId}/lines`);
    }
    regimesByRegimenType(id) {
        return this.http.get(`${this.resourceUrl}/regimens/regimen-type/${id}`);
    }
    getDrugsByRegimen(id) {
        return this.http.get(`${this.resourceUrl}/drugs/regimen/${id}`);
    }
    getRegimenById(id) {
        return this.http.get(`${this.resourceUrl}/regimen/${id}`);
    }
    latestVisit(patientId) {
        return this.http.get(`${this.resourceUrl}/patient/${patientId}/latest`);
    }
    getDevolvement(patientId, date) {
        const d = date.format(DATE_FORMAT);
        return this.http.get(`${this.resourceUrl}/patient/${patientId}/devolvement/at/${d}`)
            .pipe(map(res => {
            res.dateDevolved = res.dateDevolved != null ? moment(res.dateDevolved) : null;
            res.dateReturnedToFacility = res.dateReturnedToFacility != null ? moment(res.dateReturnedToFacility) : null;
            res.dateNextClinic = res.dateNextClinic != null ? moment(res.dateNextClinic) : null;
            res.dateNextRefill = res.dateNextRefill != null ? moment(res.dateNextRefill) : null;
            return res;
        }));
    }
    convertDateFromClient(pharmacy) {
        const copy = Object.assign({}, pharmacy, {
            dateVisit: pharmacy.dateVisit != null && pharmacy.dateVisit.isValid() ? pharmacy.dateVisit.format(DATE_FORMAT) : null,
            nextAppointment: pharmacy.nextAppointment != null && pharmacy.nextAppointment.isValid() ?
                pharmacy.nextAppointment.format(DATE_FORMAT) : null
        });
        return copy;
    }
    convertDateFromServer(res) {
        if (res.body) {
            res.body.nextAppointment = res.body.nextAppointment != null ? moment(res.body.nextAppointment) : null;
            res.body.dateVisit = res.body.dateVisit != null ? moment(res.body.dateVisit) : null;
        }
        return res;
    }
    convertDateArrayFromServer(res) {
        if (res.body) {
            res.body.forEach((pharmacy) => {
                pharmacy.dateVisit = pharmacy.dateVisit != null ? moment(pharmacy.dateVisit) : null;
                pharmacy.nextAppointment = pharmacy.nextAppointment != null ? moment(pharmacy.nextAppointment) : null;
            });
        }
        return res;
    }
};
PharmacyService.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Inject, args: [SERVER_API_URL_CONFIG,] }] }
];
PharmacyService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PharmacyService_Factory() { return new PharmacyService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG)); }, token: PharmacyService, providedIn: "root" });
PharmacyService = tslib_1.__decorate([
    Injectable({ providedIn: 'root' }),
    tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
    tslib_1.__metadata("design:paramtypes", [HttpClient, Object])
], PharmacyService);
export { PharmacyService };
//# sourceMappingURL=data:application/json;base64,