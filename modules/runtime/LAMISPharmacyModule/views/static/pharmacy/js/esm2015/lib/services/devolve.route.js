import * as tslib_1 from "tslib";
import {Injectable} from '@angular/core';
import {of} from 'rxjs';
import {filter, map} from 'rxjs/operators';
import {DevolveEditComponent} from '../components/devolve.edit.component';
import {DevolveDetailsComponent} from '../components/devolve.details.component';
import {DevolveService} from './devolve.service';
import {EndDevolveComponent} from '../components/end.devolve.component';

let DevolveResolve = class DevolveResolve {
    constructor(service) {
        this.service = service;
    }

    resolve(route, state) {
        const id = route.params['id'] ? route.params['id'] : null;
        if (id) {
            return this.service.findByUuid(id).pipe(filter((response) => response.ok), map((patient) => patient.body));
        }
        return of({});
    }
};
DevolveResolve.ctorParameters = () => [
    {type: DevolveService}
];
DevolveResolve = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [DevolveService])
], DevolveResolve);
export {DevolveResolve};
const ɵ0 = {
    title: 'Client Devolvement',
    breadcrumb: 'CLIENT DEVOLVEMENT'
}, ɵ1 = {
    authorities: ['ROLE_USER'],
    title: 'Client Devolve',
    breadcrumb: 'CLIENT DEVOLVE'
}, ɵ2 = {
    authorities: ['ROLE_DEC'],
    title: 'Client Devolve',
    breadcrumb: 'DEVOLVE CLIENT'
}, ɵ3 = {
    authorities: ['ROLE_DEC'],
    title: 'Devolve Edit',
    breadcrumb: 'DEVOLVE EDIT'
}, ɵ4 = {
    authorities: ['ROLE_DEC'],
    title: 'End Devolve',
    breadcrumb: 'END CLIENT DEVOLVE'
};
export const ROUTES = [
    {
        path: '',
        data: ɵ0,
        children: [
            {
                path: ':id/patient/:patientId/view',
                component: DevolveDetailsComponent,
                resolve: {
                    entity: DevolveResolve
                },
                data: ɵ1,
            },
            {
                path: 'patient/:patientId/new',
                component: DevolveEditComponent,
                data: ɵ2,
            },
            {
                path: ':id/patient/:patientId/edit',
                component: DevolveEditComponent,
                resolve: {
                    entity: DevolveResolve
                },
                data: ɵ3,
            },
            {
                path: 'return/patient/:patientId/new',
                component: EndDevolveComponent,
                data: ɵ4,
            }
        ]
    }
];
export {ɵ0, ɵ1, ɵ2, ɵ3, ɵ4};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2b2x2ZS5yb3V0ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2xhbWlzLXBoYXJtYWN5LTEuMS40LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2Rldm9sdmUucm91dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUcxRSxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0lBQ3ZCLFlBQW9CLE9BQXVCO1FBQXZCLFlBQU8sR0FBUCxPQUFPLENBQWdCO0lBQzNDLENBQUM7SUFFRCxPQUFPLENBQUMsS0FBNkIsRUFBRSxLQUEwQjtRQUM3RCxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDMUQsSUFBSSxFQUFFLEVBQUU7WUFDSixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDbkMsTUFBTSxDQUFDLENBQUMsUUFBK0IsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUN4RCxHQUFHLENBQUMsQ0FBQyxPQUE4QixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQ3hELENBQUM7U0FDTDtRQUNELE9BQU8sRUFBRSxDQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDSixDQUFBOztZQWJnQyxjQUFjOztBQURsQyxjQUFjO0lBRDFCLFVBQVUsRUFBRTs2Q0FFb0IsY0FBYztHQURsQyxjQUFjLENBYzFCO1NBZFksY0FBYztXQW1CYjtJQUNGLEtBQUssRUFBRSxvQkFBb0I7SUFDM0IsVUFBVSxFQUFFLG9CQUFvQjtDQUNuQyxPQVFhO0lBQ0YsV0FBVyxFQUFFLENBQUMsV0FBVyxDQUFDO0lBQzFCLEtBQUssRUFBRSxnQkFBZ0I7SUFDdkIsVUFBVSxFQUFFLGdCQUFnQjtDQUMvQixPQU1LO0lBQ0YsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDO0lBQ3pCLEtBQUssRUFBRSxnQkFBZ0I7SUFDdkIsVUFBVSxFQUFFLGdCQUFnQjtDQUMvQixPQVNLO0lBQ0YsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDO0lBQ3pCLEtBQUssRUFBRSxjQUFjO0lBQ3JCLFVBQVUsRUFBRSxjQUFjO0NBQzdCLE9BTUs7SUFDRixXQUFXLEVBQUUsQ0FBQyxVQUFVLENBQUM7SUFDekIsS0FBSyxFQUFFLGFBQWE7SUFDcEIsVUFBVSxFQUFFLG9CQUFvQjtDQUNuQztBQW5EakIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFXO0lBQzFCO1FBQ0ksSUFBSSxFQUFFLEVBQUU7UUFDUixJQUFJLElBR0g7UUFDRCxRQUFRLEVBQUU7WUFDTjtnQkFDSSxJQUFJLEVBQUUsNkJBQTZCO2dCQUNuQyxTQUFTLEVBQUUsdUJBQXVCO2dCQUNsQyxPQUFPLEVBQUU7b0JBQ0wsTUFBTSxFQUFFLGNBQWM7aUJBQ3pCO2dCQUNELElBQUksSUFJSDthQUVKO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLHdCQUF3QjtnQkFDOUIsU0FBUyxFQUFFLG9CQUFvQjtnQkFDL0IsSUFBSSxJQUlIO2FBRUo7WUFDRDtnQkFDSSxJQUFJLEVBQUUsNkJBQTZCO2dCQUNuQyxTQUFTLEVBQUUsb0JBQW9CO2dCQUMvQixPQUFPLEVBQUU7b0JBQ0wsTUFBTSxFQUFFLGNBQWM7aUJBQ3pCO2dCQUNELElBQUksSUFJSDthQUVKO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLCtCQUErQjtnQkFDckMsU0FBUyxFQUFFLG1CQUFtQjtnQkFDOUIsSUFBSSxJQUlIO2FBRUo7U0FDSjtLQUNKO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIFJlc29sdmUsIFJvdXRlclN0YXRlU25hcHNob3QsIFJvdXRlcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBEZXZvbHZlIH0gZnJvbSAnLi4vbW9kZWwvcGhhcm1hY3kubW9kZWwnO1xuaW1wb3J0IHsgRGV2b2x2ZUVkaXRDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2Rldm9sdmUuZWRpdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2b2x2ZURldGFpbHNDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2Rldm9sdmUuZGV0YWlscy5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2b2x2ZVNlcnZpY2UgfSBmcm9tICcuL2Rldm9sdmUuc2VydmljZSc7XG5pbXBvcnQgeyBFbmREZXZvbHZlQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9lbmQuZGV2b2x2ZS5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGV2b2x2ZVJlc29sdmUgaW1wbGVtZW50cyBSZXNvbHZlPERldm9sdmU+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlcnZpY2U6IERldm9sdmVTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgcmVzb2x2ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPERldm9sdmU+IHtcbiAgICAgICAgY29uc3QgaWQgPSByb3V0ZS5wYXJhbXNbJ2lkJ10gPyByb3V0ZS5wYXJhbXNbJ2lkJ10gOiBudWxsO1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2UuZmluZEJ5VXVpZChpZCkucGlwZShcbiAgICAgICAgICAgICAgICBmaWx0ZXIoKHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8RGV2b2x2ZT4pID0+IHJlc3BvbnNlLm9rKSxcbiAgICAgICAgICAgICAgICBtYXAoKHBhdGllbnQ6IEh0dHBSZXNwb25zZTxEZXZvbHZlPikgPT4gcGF0aWVudC5ib2R5KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2YoPERldm9sdmU+e30pO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IFJPVVRFUzogUm91dGVzID0gW1xuICAgIHtcbiAgICAgICAgcGF0aDogJycsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnQ2xpZW50IERldm9sdmVtZW50JyxcbiAgICAgICAgICAgIGJyZWFkY3J1bWI6ICdDTElFTlQgREVWT0xWRU1FTlQnXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGF0aDogJzppZC9wYXRpZW50LzpwYXRpZW50SWQvdmlldycsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBEZXZvbHZlRGV0YWlsc0NvbXBvbmVudCxcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGVudGl0eTogRGV2b2x2ZVJlc29sdmVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXRpZXM6IFsnUk9MRV9VU0VSJ10sXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQ2xpZW50IERldm9sdmUnLFxuICAgICAgICAgICAgICAgICAgICBicmVhZGNydW1iOiAnQ0xJRU5UIERFVk9MVkUnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvL2NhbkFjdGl2YXRlOiBbVXNlclJvdXRlQWNjZXNzU2VydmljZV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGF0aDogJ3BhdGllbnQvOnBhdGllbnRJZC9uZXcnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogRGV2b2x2ZUVkaXRDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3JpdGllczogWydST0xFX0RFQyddLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0NsaWVudCBEZXZvbHZlJyxcbiAgICAgICAgICAgICAgICAgICAgYnJlYWRjcnVtYjogJ0RFVk9MVkUgQ0xJRU5UJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy9jYW5BY3RpdmF0ZTogW1VzZXJSb3V0ZUFjY2Vzc1NlcnZpY2VdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhdGg6ICc6aWQvcGF0aWVudC86cGF0aWVudElkL2VkaXQnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogRGV2b2x2ZUVkaXRDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IERldm9sdmVSZXNvbHZlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml0aWVzOiBbJ1JPTEVfREVDJ10sXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRGV2b2x2ZSBFZGl0JyxcbiAgICAgICAgICAgICAgICAgICAgYnJlYWRjcnVtYjogJ0RFVk9MVkUgRURJVCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vY2FuQWN0aXZhdGU6IFtVc2VyUm91dGVBY2Nlc3NTZXJ2aWNlXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXRoOiAncmV0dXJuL3BhdGllbnQvOnBhdGllbnRJZC9uZXcnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogRW5kRGV2b2x2ZUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml0aWVzOiBbJ1JPTEVfREVDJ10sXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRW5kIERldm9sdmUnLFxuICAgICAgICAgICAgICAgICAgICBicmVhZGNydW1iOiAnRU5EIENMSUVOVCBERVZPTFZFJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy9jYW5BY3RpdmF0ZTogW1VzZXJSb3V0ZUFjY2Vzc1NlcnZpY2VdXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9XG5dO1xuXG4iXX0=
