import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { PharmacyService } from '../services/pharmacy.service';
import { NotificationService } from '@alfresco/adf-core';
import { ActivatedRoute } from '@angular/router';
import { MatButton, MatProgressBar } from '@angular/material';
import { ColumnMode } from '@swimlane/ngx-datatable';
import * as moment_ from 'moment';
import { AppLoaderService, DATE_FORMAT, entityCompare } from '@lamis/web-core';
const moment = moment_;
export const IPT_TYPE = {
    'START_INITIATION': 'Start Initiation',
    'START_REFILL': 'Start Refill',
    'FOLLOWUP_INITIATION': 'Followup Initiation',
    'FOLLOWUP_REFILL': 'Followup Refill'
};
let PharmacyEditComponent = class PharmacyEditComponent {
    constructor(pharmacyService, notification, appLoaderService, activatedRoute) {
        this.pharmacyService = pharmacyService;
        this.notification = notification;
        this.appLoaderService = appLoaderService;
        this.activatedRoute = activatedRoute;
        this.entity = {};
        this.regimenTypes = [];
        this.regimens = [];
        this.selectedRegimens = [];
        this.error = false;
        this.tomorrow = moment().add(1, 'days');
        this.today = moment();
        this.ColumnMode = ColumnMode;
        this.editing = {};
        this.rows = [];
        this.drugIds = new Set();
        this.visitDates = [];
        this.drugs = [];
        this.iptSelected = false;
        this.ipt = {};
    }
    createEntity() {
        return {};
    }
    ngOnInit() {
        this.isSaving = false;
        this.activatedRoute.data.subscribe(({ entity }) => {
            this.entity = !!entity && entity.body ? entity.body : entity;
            if (this.entity === undefined) {
                this.entity = this.createEntity();
            }
            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');
            this.pharmacyService.getPatient(patientId).subscribe((res) => {
                this.entity.patient = res;
                this.patient = res;
                this.dateRegistration = res.dateRegistration;
                this.entity.facility = res.facility;
                this.minNextAppointment = this.dateRegistration.clone().add(15, 'days');
                this.pharmacyService.getVisitDatesByPatient(res.id).subscribe((res1) => {
                    this.visitDates = res1;
                });
                this.pharmacyService.regimenTypes().subscribe(res1 => {
                    this.regimenTypes = res1.filter(t => {
                        return this.entity.patient.extra && this.entity.patient.extra.prep && this.entity.patient.extra.prep.registered ?
                            t.id === 30 : t.id !== 30;
                    });
                });
                this.pharmacyService.hasDeadStatus(patientId).subscribe(r => this.deadStatus = r.body);
            });
            if (this.entity.id) {
                if (this.entity.extra && this.entity.extra.ipt) {
                    this.ipt = Object.assign({}, this.entity.extra.ipt, {
                        dateCompleted: this.entity.extra.ipt.dateCompleted != null ? moment(this.entity.extra.ipt.dateCompleted) : null
                    });
                }
                this.rows = [...this.entity.lines.map(r => {
                        this.pharmacyService.getDrugsByRegimen(r.regimen_id).subscribe((res) => {
                            r.description = res.find(d => d.regimenDrug.id === r.regimen_drug_id).drug.name;
                        });
                        r.morning = r.morning || 0;
                        r.afternoon = r.afternoon || 0;
                        r.evening = r.evening || 0;
                        if (r.regimen_type_id === 15) {
                            this.iptSelected = true;
                        }
                        r.quantity = ((r.morning || 0) + (r.afternoon || 0) + (r.evening || 0)) * r.duration;
                        this.pharmacyService.getRegimenById(r.regimen_id).subscribe(res => {
                            if (!this.regimens.map(rs => rs.id).includes(r.regimen_id)) {
                                this.regimens.push(res);
                                this.selectedRegimens.push(res);
                                this.regimens = [...this.regimens];
                                this.selectedRegimens = [...this.selectedRegimens];
                            }
                        });
                        return r;
                    })];
                this.entity.duration = this.entity.lines.map(r => r.duration)
                    .sort((r1, r2) => r1 - r2)
                    .pop();
                this.pharmacyService.getDevolvement(this.entity.patient.id, this.entity.dateVisit).subscribe(res => {
                    this.devolve = res;
                    this.updateDmocType();
                });
            }
        });
    }
    dateVisitChanged(date) {
        this.entity.nextAppointment = this.suggestedNextAppointment();
        this.minNextAppointment = this.entity.nextAppointment.clone().subtract(7, 'days');
        this.maxNextVisit = this.entity.nextAppointment.clone().add(8, 'months');
        this.pharmacyService.getDevolvement(this.entity.patient.id, this.entity.dateVisit).subscribe(res => {
            this.devolve = res;
            this.updateDmocType();
        });
    }
    suggestedNextAppointment() {
        if (this.entity.dateVisit) {
            let nextAppointment = this.entity.dateVisit.clone().add(this.entity.duration - 2 || 13, 'days');
            const weekday = nextAppointment.isoWeekday();
            if (weekday === 6) {
                nextAppointment = nextAppointment.clone().add(2, 'days');
            }
            else if (weekday === 7) {
                nextAppointment = nextAppointment.clone().add(1, 'days');
            }
            return nextAppointment;
        }
        return null;
    }
    updateDmocType() {
        let type = 'MMD';
        switch (this.devolve.dmocType) {
            case 'ARC':
                type = 'Adolescent Refill Club';
                break;
            case 'CPARP':
                type = 'CPARP';
                break;
            case 'CARC':
                type = 'CARC';
                break;
            case 'F_CARG':
                type = 'F-CARG';
                break;
            case 'FAST_TRACK':
                type = 'Fast Track';
                break;
            case 'S_CARG':
                type = 'S-CARG';
                break;
            case 'MMS':
                type = 'MMS';
                break;
        }
        this.dmocType = type;
    }
    filterDates(date) {
        let exists = false;
        this.visitDates.forEach(d => {
            if (date.diff(d, 'days') === 0) {
                exists = true;
            }
        });
        return (this.entity.id && date.diff(this.entity.dateVisit, 'days') === 0) || !exists;
    }
    previousState() {
        window.history.back();
    }
    entityCompare(e1, e2) {
        return entityCompare(e1, e2);
    }
    save() {
        this.submitButton.disabled = true;
        // this.progressBar.mode = 'indeterminate';
        this.appLoaderService.open('Saving visit...');
        this.entity.lines = this.rows;
        this.isSaving = true;
        if (!this.entity.extra) {
            this.entity.extra = {};
        }
        if (this.iptSelected && this.ipt) {
            this.entity.extra.ipt = Object.assign({}, this.ipt, {
                dateCompleted: this.ipt.dateCompleted != null && this.ipt.dateCompleted.isValid() ?
                    this.ipt.dateCompleted.format(DATE_FORMAT) : null
            });
        }
        if (this.deadStatus && this.deadStatus.dateStatus) {
            if (this.deadStatus.dateStatus.isBefore(this.entity.dateVisit)) {
                this.notification.showError(`Cannot save refill, patient was declared dead
                 (${this.deadStatus.dateStatus.format('DD MMMM, YYYY')}) before date of current refill`);
                this.appLoaderService.close();
                this.isSaving = false;
                return;
            }
        }
        if (this.entity.id !== undefined) {
            this.subscribeToSaveResponse(this.pharmacyService.update(this.entity));
        }
        else {
            this.subscribeToSaveResponse(this.pharmacyService.create(this.entity));
        }
    }
    regimenTypeChange(type) {
        this.pharmacyService.regimesByRegimenType(type.id).subscribe((res) => {
            res.forEach((regimen) => {
                if (!this.regimens.map(r => r.id).includes(regimen.id)) {
                    this.regimens.push(regimen);
                    this.regimens = [...this.regimens];
                }
            });
        });
    }
    durationChanged(duration) {
        this.rows = this.rows.map(r => {
            r.duration = duration;
            r.quantity = (r.morning + r.afternoon + r.evening) * duration;
            return r;
        });
        this.rows = [...this.rows];
        this.entity.nextAppointment = this.suggestedNextAppointment();
        if (duration === 90) {
            this.entity.mmdType = 'MMD-3';
        }
        else if (duration === 120) {
            this.entity.mmdType = 'MMD-4';
        }
        else if (duration === 150) {
            this.entity.mmdType = 'MMD-5';
        }
        else if (duration === 180) {
            this.entity.mmdType = 'MMD-6';
        }
        else {
            this.entity.mmdType = null;
        }
        if (this.entity.dateVisit) {
            this.ipt['dateCompleted'] = this.entity.dateVisit.clone().add(duration, 'days');
        }
    }
    iptTypes() {
        return IPT_TYPE;
    }
    regimenChange(event) {
        this.selectedRegimens.forEach(regimen => {
            if (regimen.regimenType.id === 15) {
                this.iptSelected = true;
            }
            this.pharmacyService.getDrugsByRegimen(regimen.id).subscribe((res) => {
                res.forEach((drug) => {
                    if (!this.rows.map(r => r.description).includes(drug.drug.name)) {
                        this.rows.push({
                            drug: drug.drug,
                            description: drug.drug.name,
                            morning: drug.drug.morning,
                            afternoon: drug.drug.afternoon,
                            evening: drug.drug.evening,
                            regimen_id: regimen.id,
                            duration: this.entity.duration,
                            quantity: this.entity.duration * ((drug.drug.morning || 0) + (drug.drug.afternoon || 0)
                                + (drug.drug.evening || 0)),
                            regimen_type_id: regimen.regimenType.id,
                            regimen_drug_id: drug.regimenDrug.id
                        });
                        this.rows = [...this.rows];
                        // this.drugs.push(drug.drug);
                    }
                    this.rows = this.rows.filter(row => this.selectedRegimens.map(regimen1 => regimen1.id).includes(row.regimen_id));
                    this.drugs.forEach(drug1 => {
                        if (!this.rows.map(r => r.description).includes(drug1.name)) {
                            this.drugs = this.drugs.filter(d => d.id !== drug1.id);
                        }
                    });
                });
            });
        });
    }
    updateValue(event, cell, rowIndex) {
        this.editing[rowIndex + '-' + cell] = false;
        this.rows[rowIndex][cell] = event.target.value;
        if (this.entity.duration) {
            const total = parseInt(this.rows[rowIndex]['morning'] + '' || '0', 10) +
                parseInt(this.rows[rowIndex]['afternoon'] + '' || '0', 10) +
                parseInt(this.rows[rowIndex]['evening'] + '' || '0', 10);
            this.rows[rowIndex]['quantity'] = (total * this.entity.duration);
        }
        if (cell === 'duration' && this.rows[rowIndex].regimen_type_id === 15) {
            if (this.entity.dateVisit) {
                this.ipt['dateCompleted'] = this.entity.dateVisit.clone().add(event.target.value, 'days');
            }
        }
        this.rows = [...this.rows];
    }
    subscribeToSaveResponse(result) {
        result.subscribe((res) => this.onSaveSuccess(res.body), (res) => {
            this.appLoaderService.close();
            this.onSaveError();
            this.onError(res.message);
        });
    }
    onSaveSuccess(result) {
        this.appLoaderService.close();
        this.isSaving = false;
        this.notification.showInfo('Pharmacy visit successfully saved');
        this.previousState();
    }
    onSaveError() {
        this.isSaving = false;
        this.error = true;
        this.notification.showError('Error saving pharmacy visit');
    }
    onError(errorMessage) {
        this.isSaving = false;
        this.notification.showError(errorMessage);
    }
};
PharmacyEditComponent.ctorParameters = () => [
    { type: PharmacyService },
    { type: NotificationService },
    { type: AppLoaderService },
    { type: ActivatedRoute }
];
tslib_1.__decorate([
    ViewChild(MatProgressBar, { static: true }),
    tslib_1.__metadata("design:type", MatProgressBar)
], PharmacyEditComponent.prototype, "progressBar", void 0);
tslib_1.__decorate([
    ViewChild(MatButton, { static: true }),
    tslib_1.__metadata("design:type", MatButton)
], PharmacyEditComponent.prototype, "submitButton", void 0);
PharmacyEditComponent = tslib_1.__decorate([
    Component({
        selector: 'lamis-pharmacy-edit',
        template: "<div class=\"lamis-edit-form\">\n    <div class=\"lamis-edit-form-container\">\n        <form name=\"form\" role=\"form\" novalidate (ngSubmit)=\"save()\" #pharmacyForm=\"ngForm\">\n            <mat-card class=\"default\">\n                <mat-card-header>\n                </mat-card-header>\n                <mat-card-content *ngIf=\"patient\">\n                    <div>\n                        <mat-form-field class=\"full-width\" *ngIf=\"entity && dateRegistration\">\n                            <input matInput [matDatepicker]=\"picker\"\n                                   placeholder=\"Date of Dispensing\"\n                                   [(ngModel)]=\"entity.dateVisit\"\n                                   [matDatepickerFilter]=\"filterDates.bind(this)\"\n                                   (dateChange)=\"dateVisitChanged($event.value)\"\n                                   #visit=\"ngModel\"\n                                   [max]=\"today\"\n                                   [min]=\"dateRegistration\"\n                                   name=\"visit\"\n                                   required>\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                            <mat-error\n                                    *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)\">\n                                Date of dispensing is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)\">\n                                Date of dispensing cannot be before {{dateRegistration | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)\">\n                                Date of dispensing cannot be in the future\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"row\" *ngIf=\"devolve && !devolve.dateReturnedToFacility\">\n                        <div class=\"col-md-6\">\n                            <mat-form-field class=\"full-width\">\n                                <mat-label>Date of Devolvement</mat-label>\n                                <input matInput disabled value=\"{{devolve.dateDevolved | date: 'dd MMM, yyyy'}}\">\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <mat-form-field class=\"full-width\">\n                                <mat-label>DMOC Type</mat-label>\n                                <input matInput disabled [value]=\"dmocType\">\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div>\n                        <mat-form-field class=\"full-width\">\n                            <mat-select [(ngModel)]=\"entity.duration\"\n                                        placeholder=\"Refill Period (days)\"\n                                        (selectionChange)=\"durationChanged($event.value)\"\n                                        #refill=\"ngModel\" required name=\"refill\">\n                                <mat-option></mat-option>\n                                <mat-option [value]=\"15\">15</mat-option>\n                                <mat-option [value]=\"30\">30</mat-option>\n                                <mat-option [value]=\"60\">60</mat-option>\n                                <mat-option [value]=\"90\">90</mat-option>\n                                <mat-option [value]=\"120\">120</mat-option>\n                                <mat-option [value]=\"150\">150</mat-option>\n                                <mat-option [value]=\"180\">180</mat-option>\n                            </mat-select>\n                            <mat-error\n                                    *ngIf=\"refill.errors && (refill.dirty || refill.touched) && (refill.errors.required)\">\n                                Refill Duration is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"minNextAppointment\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput [matDatepicker]=\"picker1\"\n                                   placeholder=\"Date of Next Appointment\"\n                                   [(ngModel)]=\"entity.nextAppointment\"\n                                   #next=\"ngModel\"\n                                   [min]=\"minNextAppointment\"\n                                   [max]=\"maxNextVisit\"\n                                   name=\"next\"\n                                   required>\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker1\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker1></mat-datepicker>\n                            <mat-error\n                                    *ngIf=\"next.errors && (next.dirty || next.touched) && (next.errors.required)\">\n                                Date of Next Appointment is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"next.errors && (next.dirty || next.touched) && (next.errors.max)\">\n                                Date of Next Appointment must be after {{maxNextVisit | date:'dd MMM, yyyy'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"next.errors && (next.dirty || next.touched) && (next.errors.min)\">\n                                Date of Next Appointment must be after {{minNextAppointment | date:'dd MMM, yyyy'}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class=\"full-width\" *ngIf=\"entity.mmdType\">\n                            <mat-label>MMD Type</mat-label>\n                            <input matInput disabled [value]=\"entity.mmdType || ''\">\n                        </mat-form-field>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <mat-checkbox [(ngModel)]=\"entity.prescriptionError\" name=\"error\">Any prescription error?\n                            </mat-checkbox>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <mat-checkbox [(ngModel)]=\"entity.adrScreened\" name=\"screened\">Adverse Drug Reactions\n                            </mat-checkbox>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <mat-form-field *ngIf=\"entity.adrScreened\">\n                                <mat-select multiple [(ngModel)]=\"entity.adrs\"\n                                            name=\"adrs\"\n                                >\n                                    <mat-option></mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"Regimen Type\"\n                                            (selectionChange)=\"regimenTypeChange($event.value)\">\n                                    <mat-option></mat-option>\n                                    <mat-option *ngFor=\"let type of regimenTypes\"\n                                                [value]=\"type\">{{type.description}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"Regimen\"\n                                            multiple\n                                            name=\"regimen\"\n                                            [(ngModel)]=\"selectedRegimens\"\n                                            [compareWith]=\"entityCompare\"\n                                            (selectionChange)=\"regimenChange($event.value)\">\n                                    <mat-option *ngFor=\"let regimen of regimens\"\n                                                [value]=\"regimen\">{{regimen.description}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div>\n                        Drug Dispensed\n                        <mat-divider></mat-divider>\n                        <ngx-datatable\n                            #mydatatable\n                            class=\"material\"\n                            [headerHeight]=\"50\"\n                            [limit]=\"8\"\n                            [columnMode]=\"ColumnMode.force\"\n                            [footerHeight]=\"50\"\n                            rowHeight=\"auto\"\n                            [rows]=\"rows\"\n                        >\n                            <ngx-datatable-column name=\"Description\">\n                                <ng-template ngx-datatable-cell-template let-value=\"value\">\n                                    <mat-form-field>\n                                        <input matInput disabled [value]=\"value\" style=\"font-weight: 900\">\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column [maxWidth]=\"1\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"Morning\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <mat-form-field class=\"full-width\">\n                                        <input\n                                                autofocus\n                                                matInput\n                                                type=\"number\"\n                                                (blur)=\"updateValue($event, 'morning', rowIndex)\"\n                                                [value]=\"value\"\n                                        >\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column [maxWidth]=\"1\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"Afternoon\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <mat-form-field class=\"full-width\">\n                                        <input\n                                                autofocus\n                                                matInput\n                                                type=\"number\"\n                                                (blur)=\"updateValue($event, 'afternoon', rowIndex)\"\n                                                [value]=\"value\"\n                                        >\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column [maxWidth]=\"1\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"Evening\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <mat-form-field class=\"full-width\">\n                                        <input\n                                                autofocus\n                                                matInput\n                                                type=\"number\"\n                                                (blur)=\"updateValue($event, 'evening', rowIndex)\"\n                                                [value]=\"value\"\n                                        >\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column [maxWidth]=\"1\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"Duration\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <mat-form-field class=\"full-width\">\n                                        <input\n                                                autofocus\n                                                matInput\n                                                type=\"number\"\n                                                (blur)=\"updateValue($event, 'duration', rowIndex)\"\n                                                [value]=\"value\"\n                                        >\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column [maxWidth]=\"1\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"Quantity\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <mat-form-field>\n                                        <input matInput disabled [value]=\"value\" style=\"font-weight: 900\">\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                        </ngx-datatable>\n                    </div>\n                    <mat-divider></mat-divider>\n                </mat-card-content>\n                <ng-container *ngIf=\"iptSelected\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <mat-form-field>\n                                <mat-label>IPT Type</mat-label>\n                                <mat-select required [(ngModel)]=\"ipt.type\" name=\"inh\" #inh=\"ngModel\">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]=\"'START_INITIATION'\">Start Initiation</mat-option>\n                                    <mat-option [value]=\"'START_REFILL'\">Start Refill</mat-option>\n                                    <mat-option [value]=\"'FOLLOWUP_INITIATION'\">Followup Initiation</mat-option>\n                                    <mat-option [value]=\"'FOLLOWUP_REFILL'\">Followup Refill</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf=\"inh.errors && (inh.dirty || inh.touched) && (inh.errors.required)\">\n                                    IPT Type is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <mat-checkbox [(ngModel)]=\"ipt.completed\"\n                                          name=\"uibn\"\n                            >\n                                IPT completed?\n                            </mat-checkbox>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <mat-form-field class=\"full-width\" *ngIf=\"entity.dateVisit && ipt.completed\">\n                                <input matInput [matDatepicker]=\"picker2\"\n                                       placeholder=\"Date of Completion\"\n                                       [(ngModel)]=\"ipt.dateCompleted\"\n                                       #com=\"ngModel\"\n                                       [min]=\"entity.dateVisit\"\n                                       name=\"com\"\n                                       required>\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]=\"picker2\">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker2></mat-datepicker>\n                                <mat-error\n                                        *ngIf=\"com.errors && (com.dirty || com.touched) && (com.errors.required)\">\n                                    Date completed is required\n                                </mat-error>\n                                <mat-error\n                                        *ngIf=\"com.errors && (com.dirty || com.touched) && (com.errors.min)\">\n                                    Date must not be before {{entity.dateVisit | date:'dd MMM, yyyy'}}\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </ng-container>\n                <mat-card-actions class=\"lamis-edit-form-actions\">\n                    <button mat-raised-button type=\"button\" (click)=\"previousState()\">Back</button>\n                    <button mat-raised-button color='primary'\n                            [disabled]=\"pharmacyForm.invalid || rows.length === 0 || isSaving\"\n                            type=\"submit\">\n                        {{entity.id !== undefined ? 'Update' : 'Save'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n"
    }),
    tslib_1.__metadata("design:paramtypes", [PharmacyService,
        NotificationService,
        AppLoaderService,
        ActivatedRoute])
], PharmacyEditComponent);
export { PharmacyEditComponent };
//# sourceMappingURL=data:application/json;base64,