import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { DATE_FORMAT, SERVER_API_URL_CONFIG } from '@lamis/web-core';
import { map } from 'rxjs/operators';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";
var moment = moment_;
var PharmacyService = /** @class */ (function () {
    function PharmacyService(http, serverUrl) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.resourceUrl = '';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/pharmacies';
    }
    PharmacyService.prototype.create = function (pharmacy) {
        var _this = this;
        var copy = this.convertDateFromClient(pharmacy);
        return this.http
            .post(this.resourceUrl, copy, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }));
    };
    PharmacyService.prototype.update = function (pharmacy) {
        var _this = this;
        var copy = this.convertDateFromClient(pharmacy);
        console.log('Lines', copy);
        return this.http
            .put(this.resourceUrl, copy, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }));
    };
    PharmacyService.prototype.find = function (id) {
        var _this = this;
        return this.http
            .get(this.resourceUrl + "/" + id, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }));
    };
    PharmacyService.prototype.findByUuid = function (id) {
        var _this = this;
        return this.http
            .get(this.resourceUrl + "/by-uuid/" + id, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }));
    };
    PharmacyService.prototype.delete = function (id) {
        return this.http.delete(this.resourceUrl + "/" + id, { observe: 'response' });
    };
    PharmacyService.prototype.getPatient = function (id) {
        return this.http.get("/api/patients/by-uuid/" + id, { observe: 'body' })
            .pipe(map(function (res) {
            if (res) {
                res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null;
            }
            return res;
        }));
    };
    PharmacyService.prototype.getVisitDatesByPatient = function (patientId) {
        return this.http.get(this.resourceUrl + "/patient/" + patientId + "/visit-dates")
            .pipe(map(function (res) {
            res.forEach(function (d) { return moment(d); });
            return res;
        }));
    };
    PharmacyService.prototype.hasDeadStatus = function (puuid) {
        return this.http.get(this.resourceUrl + "/patient/" + puuid + "/has-dead-status", { observe: 'response' })
            .pipe(map(function (res) {
            if (res.body) {
                res.body.dateStatus = res.body.dateStatus != null ? moment(res.body.dateStatus) : null;
            }
            return res;
        }));
    };
    PharmacyService.prototype.regimenTypes = function () {
        return this.http.get(this.resourceUrl + "/regimen-types");
    };
    PharmacyService.prototype.regimenInfo = function (patientId) {
        return this.http.get(this.resourceUrl + "/regimen-info/patient/" + patientId);
    };
    PharmacyService.prototype.adrs = function () {
        return this.http.get(this.resourceUrl + "/adrs");
    };
    PharmacyService.prototype.getLinesByPharmacy = function (pharmacyId) {
        return this.http.get(this.resourceUrl + "/" + pharmacyId + "/lines");
    };
    PharmacyService.prototype.regimesByRegimenType = function (id) {
        return this.http.get(this.resourceUrl + "/regimens/regimen-type/" + id);
    };
    PharmacyService.prototype.getDrugsByRegimen = function (id) {
        return this.http.get(this.resourceUrl + "/drugs/regimen/" + id);
    };
    PharmacyService.prototype.getRegimenById = function (id) {
        return this.http.get(this.resourceUrl + "/regimen/" + id);
    };
    PharmacyService.prototype.latestVisit = function (patientId) {
        return this.http.get(this.resourceUrl + "/patient/" + patientId + "/latest");
    };
    PharmacyService.prototype.getDevolvement = function (patientId, date) {
        var d = date.format(DATE_FORMAT);
        return this.http.get(this.resourceUrl + "/patient/" + patientId + "/devolvement/at/" + d)
            .pipe(map(function (res) {
            res.dateDevolved = res.dateDevolved != null ? moment(res.dateDevolved) : null;
            res.dateReturnedToFacility = res.dateReturnedToFacility != null ? moment(res.dateReturnedToFacility) : null;
            res.dateNextClinic = res.dateNextClinic != null ? moment(res.dateNextClinic) : null;
            res.dateNextRefill = res.dateNextRefill != null ? moment(res.dateNextRefill) : null;
            return res;
        }));
    };
    PharmacyService.prototype.convertDateFromClient = function (pharmacy) {
        var copy = Object.assign({}, pharmacy, {
            dateVisit: pharmacy.dateVisit != null && pharmacy.dateVisit.isValid() ? pharmacy.dateVisit.format(DATE_FORMAT) : null,
            nextAppointment: pharmacy.nextAppointment != null && pharmacy.nextAppointment.isValid() ?
                pharmacy.nextAppointment.format(DATE_FORMAT) : null
        });
        return copy;
    };
    PharmacyService.prototype.convertDateFromServer = function (res) {
        if (res.body) {
            res.body.nextAppointment = res.body.nextAppointment != null ? moment(res.body.nextAppointment) : null;
            res.body.dateVisit = res.body.dateVisit != null ? moment(res.body.dateVisit) : null;
        }
        return res;
    };
    PharmacyService.prototype.convertDateArrayFromServer = function (res) {
        if (res.body) {
            res.body.forEach(function (pharmacy) {
                pharmacy.dateVisit = pharmacy.dateVisit != null ? moment(pharmacy.dateVisit) : null;
                pharmacy.nextAppointment = pharmacy.nextAppointment != null ? moment(pharmacy.nextAppointment) : null;
            });
        }
        return res;
    };
    PharmacyService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: undefined, decorators: [{ type: Inject, args: [SERVER_API_URL_CONFIG,] }] }
    ]; };
    PharmacyService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PharmacyService_Factory() { return new PharmacyService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG)); }, token: PharmacyService, providedIn: "root" });
    PharmacyService = tslib_1.__decorate([
        Injectable({ providedIn: 'root' }),
        tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
        tslib_1.__metadata("design:paramtypes", [HttpClient, Object])
    ], PharmacyService);
    return PharmacyService;
}());
export { PharmacyService };
//# sourceMappingURL=data:application/json;base64,