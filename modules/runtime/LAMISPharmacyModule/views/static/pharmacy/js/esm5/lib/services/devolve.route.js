import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { DevolveEditComponent } from '../components/devolve.edit.component';
import { DevolveDetailsComponent } from '../components/devolve.details.component';
import { DevolveService } from './devolve.service';
import { EndDevolveComponent } from '../components/end.devolve.component';
var DevolveResolve = /** @class */ (function () {
    function DevolveResolve(service) {
        this.service = service;
    }
    DevolveResolve.prototype.resolve = function (route, state) {
        var id = route.params['id'] ? route.params['id'] : null;
        if (id) {
            return this.service.findByUuid(id).pipe(filter(function (response) { return response.ok; }), map(function (patient) { return patient.body; }));
        }
        return of({});
    };
    DevolveResolve.ctorParameters = function () { return [
        { type: DevolveService }
    ]; };
    DevolveResolve = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [DevolveService])
    ], DevolveResolve);
    return DevolveResolve;
}());
export { DevolveResolve };
var ɵ0 = {
    title: 'Client Devolvement',
    breadcrumb: 'CLIENT DEVOLVEMENT'
}, ɵ1 = {
    authorities: ['ROLE_USER'],
    title: 'Client Devolve',
    breadcrumb: 'CLIENT DEVOLVE'
}, ɵ2 = {
    authorities: ['ROLE_DEC'],
    title: 'Client Devolve',
    breadcrumb: 'DEVOLVE CLIENT'
}, ɵ3 = {
    authorities: ['ROLE_DEC'],
    title: 'Devolve Edit',
    breadcrumb: 'DEVOLVE EDIT'
}, ɵ4 = {
    authorities: ['ROLE_DEC'],
    title: 'End Devolve',
    breadcrumb: 'END CLIENT DEVOLVE'
};
export var ROUTES = [
    {
        path: '',
        data: ɵ0,
        children: [
            {
                path: ':id/patient/:patientId/view',
                component: DevolveDetailsComponent,
                resolve: {
                    entity: DevolveResolve
                },
                data: ɵ1,
            },
            {
                path: 'patient/:patientId/new',
                component: DevolveEditComponent,
                data: ɵ2,
            },
            {
                path: ':id/patient/:patientId/edit',
                component: DevolveEditComponent,
                resolve: {
                    entity: DevolveResolve
                },
                data: ɵ3,
            },
            {
                path: 'return/patient/:patientId/new',
                component: EndDevolveComponent,
                data: ɵ4,
            }
        ]
    }
];
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2b2x2ZS5yb3V0ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2xhbWlzLXBoYXJtYWN5LTEuNC4wLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2Rldm9sdmUucm91dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHekMsT0FBTyxFQUFhLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNwQyxPQUFPLEVBQUMsTUFBTSxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUd4RTtJQUNJLHdCQUFvQixPQUF1QjtRQUF2QixZQUFPLEdBQVAsT0FBTyxDQUFnQjtJQUMzQyxDQUFDO0lBRUQsZ0NBQU8sR0FBUCxVQUFRLEtBQTZCLEVBQUUsS0FBMEI7UUFDN0QsSUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzFELElBQUksRUFBRSxFQUFFO1lBQ0osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ25DLE1BQU0sQ0FBQyxVQUFDLFFBQStCLElBQUssT0FBQSxRQUFRLENBQUMsRUFBRSxFQUFYLENBQVcsQ0FBQyxFQUN4RCxHQUFHLENBQUMsVUFBQyxPQUE4QixJQUFLLE9BQUEsT0FBTyxDQUFDLElBQUksRUFBWixDQUFZLENBQUMsQ0FDeEQsQ0FBQztTQUNMO1FBQ0QsT0FBTyxFQUFFLENBQVUsRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7Z0JBWjRCLGNBQWM7O0lBRGxDLGNBQWM7UUFEMUIsVUFBVSxFQUFFO2lEQUVvQixjQUFjO09BRGxDLGNBQWMsQ0FjMUI7SUFBRCxxQkFBQztDQUFBLEFBZEQsSUFjQztTQWRZLGNBQWM7U0FtQmI7SUFDRixLQUFLLEVBQUUsb0JBQW9CO0lBQzNCLFVBQVUsRUFBRSxvQkFBb0I7Q0FDbkMsT0FRYTtJQUNGLFdBQVcsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUMxQixLQUFLLEVBQUUsZ0JBQWdCO0lBQ3ZCLFVBQVUsRUFBRSxnQkFBZ0I7Q0FDL0IsT0FNSztJQUNGLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQztJQUN6QixLQUFLLEVBQUUsZ0JBQWdCO0lBQ3ZCLFVBQVUsRUFBRSxnQkFBZ0I7Q0FDL0IsT0FTSztJQUNGLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQztJQUN6QixLQUFLLEVBQUUsY0FBYztJQUNyQixVQUFVLEVBQUUsY0FBYztDQUM3QixPQU1LO0lBQ0YsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDO0lBQ3pCLEtBQUssRUFBRSxhQUFhO0lBQ3BCLFVBQVUsRUFBRSxvQkFBb0I7Q0FDbkM7QUFuRGpCLE1BQU0sQ0FBQyxJQUFNLE1BQU0sR0FBVztJQUMxQjtRQUNJLElBQUksRUFBRSxFQUFFO1FBQ1IsSUFBSSxJQUdIO1FBQ0QsUUFBUSxFQUFFO1lBQ047Z0JBQ0ksSUFBSSxFQUFFLDZCQUE2QjtnQkFDbkMsU0FBUyxFQUFFLHVCQUF1QjtnQkFDbEMsT0FBTyxFQUFFO29CQUNMLE1BQU0sRUFBRSxjQUFjO2lCQUN6QjtnQkFDRCxJQUFJLElBSUg7YUFFSjtZQUNEO2dCQUNJLElBQUksRUFBRSx3QkFBd0I7Z0JBQzlCLFNBQVMsRUFBRSxvQkFBb0I7Z0JBQy9CLElBQUksSUFJSDthQUVKO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLDZCQUE2QjtnQkFDbkMsU0FBUyxFQUFFLG9CQUFvQjtnQkFDL0IsT0FBTyxFQUFFO29CQUNMLE1BQU0sRUFBRSxjQUFjO2lCQUN6QjtnQkFDRCxJQUFJLElBSUg7YUFFSjtZQUNEO2dCQUNJLElBQUksRUFBRSwrQkFBK0I7Z0JBQ3JDLFNBQVMsRUFBRSxtQkFBbUI7Z0JBQzlCLElBQUksSUFJSDthQUVKO1NBQ0o7S0FDSjtDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwUmVzcG9uc2V9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7QWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUmVzb2x2ZSwgUm91dGVyU3RhdGVTbmFwc2hvdCwgUm91dGVzfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBvZn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgbWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0Rldm9sdmV9IGZyb20gJy4uL21vZGVsL3BoYXJtYWN5Lm1vZGVsJztcbmltcG9ydCB7RGV2b2x2ZUVkaXRDb21wb25lbnR9IGZyb20gJy4uL2NvbXBvbmVudHMvZGV2b2x2ZS5lZGl0LmNvbXBvbmVudCc7XG5pbXBvcnQge0Rldm9sdmVEZXRhaWxzQ29tcG9uZW50fSBmcm9tICcuLi9jb21wb25lbnRzL2Rldm9sdmUuZGV0YWlscy5jb21wb25lbnQnO1xuaW1wb3J0IHtEZXZvbHZlU2VydmljZX0gZnJvbSAnLi9kZXZvbHZlLnNlcnZpY2UnO1xuaW1wb3J0IHtFbmREZXZvbHZlQ29tcG9uZW50fSBmcm9tICcuLi9jb21wb25lbnRzL2VuZC5kZXZvbHZlLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZXZvbHZlUmVzb2x2ZSBpbXBsZW1lbnRzIFJlc29sdmU8RGV2b2x2ZT4ge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VydmljZTogRGV2b2x2ZVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICByZXNvbHZlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IE9ic2VydmFibGU8RGV2b2x2ZT4ge1xuICAgICAgICBjb25zdCBpZCA9IHJvdXRlLnBhcmFtc1snaWQnXSA/IHJvdXRlLnBhcmFtc1snaWQnXSA6IG51bGw7XG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZS5maW5kQnlVdWlkKGlkKS5waXBlKFxuICAgICAgICAgICAgICAgIGZpbHRlcigocmVzcG9uc2U6IEh0dHBSZXNwb25zZTxEZXZvbHZlPikgPT4gcmVzcG9uc2Uub2spLFxuICAgICAgICAgICAgICAgIG1hcCgocGF0aWVudDogSHR0cFJlc3BvbnNlPERldm9sdmU+KSA9PiBwYXRpZW50LmJvZHkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZig8RGV2b2x2ZT57fSk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgUk9VVEVTOiBSb3V0ZXMgPSBbXG4gICAge1xuICAgICAgICBwYXRoOiAnJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGl0bGU6ICdDbGllbnQgRGV2b2x2ZW1lbnQnLFxuICAgICAgICAgICAgYnJlYWRjcnVtYjogJ0NMSUVOVCBERVZPTFZFTUVOVCdcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXRoOiAnOmlkL3BhdGllbnQvOnBhdGllbnRJZC92aWV3JyxcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IERldm9sdmVEZXRhaWxzQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5OiBEZXZvbHZlUmVzb2x2ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3JpdGllczogWydST0xFX1VTRVInXSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdDbGllbnQgRGV2b2x2ZScsXG4gICAgICAgICAgICAgICAgICAgIGJyZWFkY3J1bWI6ICdDTElFTlQgREVWT0xWRSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vY2FuQWN0aXZhdGU6IFtVc2VyUm91dGVBY2Nlc3NTZXJ2aWNlXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXRoOiAncGF0aWVudC86cGF0aWVudElkL25ldycsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBEZXZvbHZlRWRpdENvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml0aWVzOiBbJ1JPTEVfREVDJ10sXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQ2xpZW50IERldm9sdmUnLFxuICAgICAgICAgICAgICAgICAgICBicmVhZGNydW1iOiAnREVWT0xWRSBDTElFTlQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvL2NhbkFjdGl2YXRlOiBbVXNlclJvdXRlQWNjZXNzU2VydmljZV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGF0aDogJzppZC9wYXRpZW50LzpwYXRpZW50SWQvZWRpdCcsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBEZXZvbHZlRWRpdENvbXBvbmVudCxcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGVudGl0eTogRGV2b2x2ZVJlc29sdmVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXRpZXM6IFsnUk9MRV9ERUMnXSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdEZXZvbHZlIEVkaXQnLFxuICAgICAgICAgICAgICAgICAgICBicmVhZGNydW1iOiAnREVWT0xWRSBFRElUJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy9jYW5BY3RpdmF0ZTogW1VzZXJSb3V0ZUFjY2Vzc1NlcnZpY2VdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhdGg6ICdyZXR1cm4vcGF0aWVudC86cGF0aWVudElkL25ldycsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBFbmREZXZvbHZlQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXRpZXM6IFsnUk9MRV9ERUMnXSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdFbmQgRGV2b2x2ZScsXG4gICAgICAgICAgICAgICAgICAgIGJyZWFkY3J1bWI6ICdFTkQgQ0xJRU5UIERFVk9MVkUnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvL2NhbkFjdGl2YXRlOiBbVXNlclJvdXRlQWNjZXNzU2VydmljZV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH1cbl07XG5cbiJdfQ==