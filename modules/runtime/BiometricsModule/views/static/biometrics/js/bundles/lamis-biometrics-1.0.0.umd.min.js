!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common/http"),require("rxjs"),require("@lamis/web-core"),require("rxjs/operators"),require("moment"),require("@alfresco/adf-core"),require("@angular/common"),require("@angular/material"),require("@angular/router"),require("@covalent/core"),require("@angular/forms"),require("@swimlane/ngx-datatable"),require("ng2-validation"),require("@angular/platform-browser")):"function"==typeof define&&define.amd?define("lamis-biometrics-1.0.0",["exports","@angular/core","@angular/common/http","rxjs","@lamis/web-core","rxjs/operators","moment","@alfresco/adf-core","@angular/common","@angular/material","@angular/router","@covalent/core","@angular/forms","@swimlane/ngx-datatable","ng2-validation","@angular/platform-browser"],t):t(((e=e||self)["lamis-biometrics-1"]=e["lamis-biometrics-1"]||{},e["lamis-biometrics-1"][0]=e["lamis-biometrics-1"][0]||{},e["lamis-biometrics-1"][0][0]={}),e.ng.core,e.ng.common.http,e.rxjs,e.webCore,e.rxjs.operators,e.moment_,e.adfCore,e.ng.common,e.ng.material,e.ng.router,e.core$1,e.ng.forms,e.ngxDatatable,e.ng2Validation,e.ng.platformBrowser)}(this,(function(e,t,r,i,n,o,a,s,c,l,u,m,d,p,f,g){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */var h;function v(e,t,r,i){var n,o=arguments.length,a=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,i);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(a=(o<3?n(a):o>3?n(t,r,a):n(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a}function b(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}(h=e.Finger||(e.Finger={})).RIGHT_INDEX_FINGER="Right Index Finger",h.LEFT_INDEX_FINGER="Left Index Finger",h.RIGHT_THUMB="Right Thumb",h.LEFT_THUMB="Left Thumb",h.RIGHT_MIDDLE_FINGER="Right Middle Finger",h.LEFT_MIDDLE_FINGER="Left Middle Finger";var y=a,E=function(){function e(e,t,r){this.http=e,this.serverUrl=t,this.authServerProvider=r,this.resourceUrl="",this.proxyUrl="http://localhost:8888/api/biometrics",this.resourceUrl=t.SERVER_API_URL+"/api/biometrics"}var a,s;return e.prototype.saveTemplates=function(e){var t=this;return e=e.map((function(e){return t.convertDateFromClient(e)})),this.http.post(this.resourceUrl+"/templates",e,{observe:"response"})},e.prototype.getBiometric=function(e){return this.http.get(this.resourceUrl+"/"+e)},e.prototype.getPatient=function(e){return this.http.get("/api/patients/by-uuid/"+e,{observe:"body"}).pipe(o.map((function(e){return e&&(e.dateRegistration=null!=e.dateRegistration?y(e.dateRegistration):null),e})))},e.prototype.getReaders=function(){return this.getObservableFromFetch(this.proxyUrl+"/readers")},e.prototype.findByPatient=function(e){var t=this;return this.http.get(this.resourceUrl+"/patient/"+e,{observe:"response"}).pipe(o.map((function(e){return t.convertDateArrayFromServer(e)})))},e.prototype.delete=function(e){return this.http.delete(this.resourceUrl+"/"+e,{observe:"response"})},e.prototype.identify=function(e){var t=this.authServerProvider.getToken(),r=new URL(this.proxyUrl+"/identify");return r.searchParams.append("reader",e),r.searchParams.append("server",window.location.host),r.searchParams.append("accessToken",t),this.getObservableFromFetch(r)},e.prototype.convertDateFromClient=function(e){return Object.assign({},e,{date:null!=e.date&&e.date.isValid()?e.date.format(n.DATE_FORMAT):null})},e.prototype.convertDateFromServer=function(e){return e.body&&(e.body.date=null!=e.body.date?y(e.body.date):null),e},e.prototype.convertDateArrayFromServer=function(e){return e.body&&e.body.forEach((function(e){e.date=null!=e.date?y(e.date):null})),e},e.prototype.getObservableFromFetch=function(e,t){return new i.Observable((function(r){fetch(e,t||{}).then((function(e){return e.json()})).then((function(e){r.next(e),r.complete()})).catch((function(e){return r.error(e)}))}))},e.ctorParameters=function(){return[{type:r.HttpClient},{type:void 0,decorators:[{type:t.Inject,args:[n.SERVER_API_URL_CONFIG]}]},{type:n.AuthServerProvider}]},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(r.HttpClient),t.ɵɵinject(n.SERVER_API_URL_CONFIG),t.ɵɵinject(n.AuthServerProvider))},token:e,providedIn:"root"}),e=v([t.Injectable({providedIn:"root"}),(a=1,s=t.Inject(n.SERVER_API_URL_CONFIG),function(e,t){s(e,t,a)}),b("design:paramtypes",[r.HttpClient,Object,n.AuthServerProvider])],e)}(),I=a,F=function(){function r(e,t,r,i,n){this.biometricService=e,this.notification=t,this.appLoaderService=r,this._dialogService=i,this.activatedRoute=n,this.biometrics=[],this.error=!1,this.fingers=[]}return r.prototype.ngOnInit=function(){var t=this;this.fingers.push(e.Finger.LEFT_INDEX_FINGER),this.fingers.push(e.Finger.LEFT_MIDDLE_FINGER),this.fingers.push(e.Finger.LEFT_THUMB),this.fingers.push(e.Finger.RIGHT_INDEX_FINGER),this.fingers.push(e.Finger.RIGHT_MIDDLE_FINGER),this.fingers.push(e.Finger.RIGHT_THUMB),this.isSaving=!1;var r=this.activatedRoute.snapshot.paramMap.get("patientId");this.biometricService.getPatient(r).subscribe((function(e){t.patient=e,t.biometricService.findByPatient(t.patient.id).subscribe((function(e){e.body&&(t.biometrics=e.body,t.fingers=t.fingers.filter((function(e){return!t.biometrics.map((function(e){return e.templateType})).includes(e)})))}))})),this.biometricService.getReaders().subscribe((function(e){return t.readers=e}))},r.prototype.enroll=function(){var e=this,t=this._dialogService.openAlert({message:"Please put your "+this.finger.toString()+" on the scanner.",title:"Enroll finger",disableClose:!0});this.biometricService.identify(this.reader.id).subscribe((function(r){if(t.close(),"PATIENT_NOT_IDENTIFIED"===r.message){var i={date:I(),facility:e.patient.facility,patient:e.patient,template:r.template,templateType:e.finger,biometricType:"FINGERPRINT"};e.biometrics=e.biometrics.filter((function(t){return t.templateType!==e.finger})),e.biometrics.push(i),e._dialogService.openAlert({message:"Finger "+e.finger.toString()+" successfully enrolled.",title:"Enrollment success"}),e.message="Please remember to click 'Save Enrollment' when through enrolling all fingers"}else if("PATIENT_IDENTIFIED"===r.message){var n=r.id;e.biometricService.getBiometric(n).subscribe((function(t){e._dialogService.openAlert({message:"Finger already enrolled by patient "+t.patient.surname+", "+t.patient.otherNames+" ("+t.patient.hospitalNum+")",title:"Enrollment error"})}))}else e._dialogService.openAlert({message:"There was an error enrolling finger, please try again",title:"Enrollment error"})}))},r.prototype.fingerToString=function(e){return{RIGHT_INDEX_FINGER:"Right Index Finger",LEFT_INDEX_FINGER:"Left Index Finger",RIGHT_THUMB:"Right Thumb",LEFT_THUMB:"Left Thumb",RIGHT_MIDDLE_FINGER:"Right Middle Finger",LEFT_MIDDLE_FINGER:"Left Middle Finger"}[e]},r.prototype.previousState=function(){window.history.back()},r.prototype.save=function(){this.appLoaderService.open("Saving visit..."),this.isSaving=!0,this.subscribeToSaveResponse(this.biometricService.saveTemplates(this.biometrics))},r.prototype.subscribeToSaveResponse=function(e){var t=this;e.subscribe((function(e){return t.onSaveSuccess(e.body)}),(function(e){t.appLoaderService.close(),t.onSaveError(),t.onError(e.message)}))},r.prototype.onSaveSuccess=function(e){this.appLoaderService.close(),this.isSaving=!1,this.notification.showInfo("Fingerprints successfully saved"),this.previousState()},r.prototype.onSaveError=function(){this.isSaving=!1,this.error=!0,this.notification.showError("Error saving enrolling fingerprints")},r.prototype.onError=function(e){this.isSaving=!1,this.notification.showError(e)},r.ctorParameters=function(){return[{type:E},{type:s.NotificationService},{type:n.AppLoaderService},{type:m.TdDialogService},{type:u.ActivatedRoute}]},r=v([t.Component({selector:"lamis-biometric-edit",template:'<div class="lamis-edit-form">\r\n    <div class="lamis-edit-form-container">\r\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #biometricForm="ngForm">\r\n            <mat-card class="default">\r\n                <mat-card-header>\r\n                </mat-card-header>\r\n                <mat-card-content>\r\n                    <div>\r\n                        <p class="mat-warn">{{message}}</p>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field>\r\n                            <mat-label>Fingerprint Scanner</mat-label>\r\n                            <mat-select [(value)]="reader">\r\n                                <mat-option></mat-option>\r\n                                <mat-option *ngFor="let r of readers" [value]="r">{{r.name}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Finger</mat-label>\r\n                                <mat-select [(value)]="finger">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option *ngFor="let r of fingers" [value]="r">{{r.toString()}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-4">\r\n                            <button mat-raised-button type="button"\r\n                                    [disabled]="!reader || !finger"\r\n                                    (click)="enroll()">Enroll Finger\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <mat-divider></mat-divider>\r\n                    <mat-card>\r\n                        <mat-card-header class="mat-bg-accent">\r\n                            <mat-card-title>\r\n                                Enrolled Fingers\r\n                            </mat-card-title>\r\n                        </mat-card-header>\r\n                        <mat-divider></mat-divider>\r\n                        <mat-card-content>\r\n                            <mat-list dense>\r\n                                <mat-list-item\r\n                                        *ngFor="let b of biometrics">{{fingerToString(b.templateType)}}</mat-list-item>\r\n                            </mat-list>\r\n                        </mat-card-content>\r\n                    </mat-card>\r\n                    <mat-divider></mat-divider>\r\n                </mat-card-content>\r\n                <mat-card-actions class="lamis-edit-form-actions">\r\n                    <button mat-raised-button type="button" (click)="previousState()">Back</button>\r\n                    <button mat-raised-button color=\'primary\'\r\n                            [disabled]="!biometrics.length || isSaving"\r\n                            type="submit">\r\n                        Save Enrollment\r\n                    </button>\r\n                </mat-card-actions>\r\n            </mat-card>\r\n        </form>\r\n    </div>\r\n</div>\r\n'}),b("design:paramtypes",[E,s.NotificationService,n.AppLoaderService,m.TdDialogService,u.ActivatedRoute])],r)}(),R=[{path:"",data:{title:"Biometric Enrollment",breadcrumb:"BIOMETRIC ENROLLMENT"},children:[{path:"patient/:patientId/new",component:F,data:{authorities:["ROLE_DEC"],title:"Biometrics Enrollment",breadcrumb:"BIOMETRIC ENROLLMENT"}}]}],S=function(){function e(e,t){this._iconRegistry=e,this._domSanitizer=t}return e.ctorParameters=function(){return[{type:l.MatIconRegistry},{type:g.DomSanitizer}]},e=v([t.NgModule({declarations:[F],imports:[c.CommonModule,l.MatInputModule,l.MatIconModule,l.MatCardModule,l.MatSelectModule,l.MatButtonModule,u.RouterModule.forChild(R),l.MatProgressBarModule,d.FormsModule,m.CovalentMessageModule,m.CovalentDialogsModule,l.MatTableModule,l.MatListModule,s.CoreModule,p.NgxDatatableModule,d.ReactiveFormsModule,n.MatDateFormatModule,f.CustomFormsModule],exports:[F],entryComponents:[],providers:[]}),b("design:paramtypes",[l.MatIconRegistry,g.DomSanitizer])],e)}();e.BiometricService=E,e.BiometricsModule=S,e.ɵa=F,e.ɵb=R,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=lamis-biometrics-1.0.0.umd.min.js.map