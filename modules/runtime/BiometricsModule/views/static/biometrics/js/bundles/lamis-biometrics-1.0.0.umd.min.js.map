{
    "version": 3,
    "sources": [
        "../../../../../../../../node_modules/tslib/tslib.es6.js",
        "ng://lamis-biometrics-1.0.0/lib/model/biometric.model.ts",
        "ng://lamis-biometrics-1.0.0/lib/services/biometric.service.ts",
        "ng://lamis-biometrics-1.0.0/lib/components/biometric-edit.component.ts",
        "ng://lamis-biometrics-1.0.0/lib/services/biometric.route.ts",
        "ng://lamis-biometrics-1.0.0/lib/biometrics.module.ts"
    ],
    "names": [
        "Finger",
        "__decorate",
        "decorators",
        "target",
        "key",
        "desc",
        "d",
        "c",
        "arguments",
        "length",
        "r",
        "Object",
        "getOwnPropertyDescriptor",
        "Reflect",
        "decorate",
        "i",
        "defineProperty",
        "__metadata",
        "metadataKey",
        "metadataValue",
        "metadata",
        "moment",
        "moment_",
        "BiometricService",
        "http",
        "serverUrl",
        "authServerProvider",
        "this",
        "resourceUrl",
        "proxyUrl",
        "SERVER_API_URL",
        "paramIndex",
        "decorator",
        "prototype",
        "saveTemplates",
        "biometrics",
        "_this",
        "map",
        "biometric",
        "convertDateFromClient",
        "post",
        "observe",
        "getBiometric",
        "id",
        "get",
        "getPatient",
        "pipe",
        "res",
        "dateRegistration",
        "getReaders",
        "getObservableFromFetch",
        "findByPatient",
        "convertDateArrayFromServer",
        "delete",
        "identify",
        "reader",
        "accessToken",
        "getToken",
        "url",
        "URL",
        "searchParams",
        "append",
        "window",
        "location",
        "host",
        "assign",
        "date",
        "isValid",
        "format",
        "DATE_FORMAT",
        "convertDateFromServer",
        "body",
        "forEach",
        "opts",
        "Observable",
        "observer",
        "fetch",
        "then",
        "json",
        "next",
        "complete",
        "catch",
        "err",
        "error",
        "HttpClient",
        "Inject",
        "args",
        "SERVER_API_URL_CONFIG",
        "AuthServerProvider",
        "Injectable",
        "providedIn",
        "tslib_1.__param",
        "BiometricEditComponent",
        "biometricService",
        "notification",
        "appLoaderService",
        "_dialogService",
        "activatedRoute",
        "fingers",
        "ngOnInit",
        "push",
        "LEFT_INDEX_FINGER",
        "LEFT_MIDDLE_FINGER",
        "LEFT_THUMB",
        "RIGHT_INDEX_FINGER",
        "RIGHT_MIDDLE_FINGER",
        "RIGHT_THUMB",
        "isSaving",
        "patientId",
        "snapshot",
        "paramMap",
        "subscribe",
        "patient",
        "filter",
        "f",
        "b",
        "templateType",
        "includes",
        "readers",
        "enroll",
        "dialogRef",
        "openAlert",
        "message",
        "finger",
        "toString",
        "title",
        "disableClose",
        "close",
        "facility",
        "template",
        "biometricType",
        "fingerId",
        "surname",
        "otherNames",
        "hospitalNum",
        "fingerToString",
        "previousState",
        "history",
        "back",
        "save",
        "open",
        "subscribeToSaveResponse",
        "result",
        "onSaveSuccess",
        "onSaveError",
        "onError",
        "showInfo",
        "showError",
        "errorMessage",
        "NotificationService",
        "AppLoaderService",
        "TdDialogService",
        "ActivatedRoute",
        "Component",
        "selector",
        "ROUTES",
        "path",
        "data",
        "breadcrumb",
        "children",
        "component",
        "authorities",
        "BiometricsModule",
        "_iconRegistry",
        "_domSanitizer",
        "MatIconRegistry",
        "DomSanitizer",
        "NgModule",
        "declarations",
        "imports",
        "CommonModule",
        "MatInputModule",
        "MatIconModule",
        "MatCardModule",
        "MatSelectModule",
        "MatButtonModule",
        "RouterModule",
        "forChild",
        "MatProgressBarModule",
        "FormsModule",
        "CovalentMessageModule",
        "CovalentDialogsModule",
        "MatTableModule",
        "MatListModule",
        "CoreModule",
        "NgxDatatableModule",
        "ReactiveFormsModule",
        "MatDateFormatModule",
        "CustomFormsModule",
        "exports",
        "entryComponents",
        "providers"
    ],
    "mappings": "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",
    "sourcesContent": [
        "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
        "import { Facility } from './facility.model';\nimport { Moment } from 'moment';\n\nexport interface Patient {\n    id?: number;\n    facility?: Facility;\n    hospitalNum?: string;\n    surname?: string;\n    otherNames?: string;\n    dateRegistration?: Moment;\n    dateStarted?: Moment;\n    gender?: string;\n    uuid?: string\n}\n\nexport interface Biometric {\n    id?: string;\n    patient?: Patient;\n    facility?: Facility;\n    template?: any;\n    templateType?: Finger;\n    biometricType: string;\n    date?: Moment\n}\n\nexport interface BiometricResponse {\n    template?: any;\n    id?: string;\n    message?: string;\n}\n\nexport enum Finger {\n    RIGHT_INDEX_FINGER = 'Right Index Finger',\n    LEFT_INDEX_FINGER = 'Left Index Finger',\n    RIGHT_THUMB = 'Right Thumb',\n    LEFT_THUMB = 'Left Thumb',\n    RIGHT_MIDDLE_FINGER = 'Right Middle Finger',\n    LEFT_MIDDLE_FINGER = 'Left Middle Finger'\n}\n",
        "import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthServerProvider, DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\nimport { map } from 'rxjs/operators';\nimport { Biometric, Patient } from '../model/biometric.model';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Biometric>;\ntype EntityArrayResponseType = HttpResponse<Biometric[]>;\n\n@Injectable({providedIn: 'root'})\nexport class BiometricService {\n    public resourceUrl = '';\n    proxyUrl = 'http://localhost:8888/api/biometrics';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig,\n                private authServerProvider: AuthServerProvider) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/biometrics';\n    }\n\n    saveTemplates(biometrics: Biometric[]) {\n        biometrics = biometrics.map(biometric => this.convertDateFromClient(biometric));\n        return this.http.post(`${this.resourceUrl}/templates`, biometrics, {observe: 'response'})\n    }\n\n    getBiometric(id: string) {\n        return this.http.get<Biometric>(`${this.resourceUrl}/${id}`)\n    }\n\n    getPatient(id: any) {\n        return this.http.get<Patient>(`/api/patients/by-uuid/${id}`, {observe: 'body'})\n            .pipe(map((res) => {\n                if (res) {\n                    res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null\n                }\n                return res;\n            }))\n    }\n\n    getReaders(): any {\n        return this.getObservableFromFetch(`${this.proxyUrl}/readers`)\n    }\n\n    findByPatient(id: number): Observable<EntityArrayResponseType> {\n        return this.http\n            .get<Biometric[]>(`${this.resourceUrl}/patient/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    identify(reader: string): any {\n        const accessToken = this.authServerProvider.getToken();\n        let url = new URL(`${this.proxyUrl}/identify`);\n        url.searchParams.append('reader', reader);\n        url.searchParams.append('server', window.location.host);\n        url.searchParams.append('accessToken', accessToken);\n        return this.getObservableFromFetch(url);\n    }\n\n    protected convertDateFromClient(biometric: Biometric): Biometric {\n        const copy: Biometric = Object.assign({}, biometric, {\n            date: biometric.date != null && biometric.date.isValid() ? biometric.date.format(DATE_FORMAT) : null,\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.date = res.body.date != null ? moment(res.body.date) : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((biometric: Biometric) => {\n                biometric.date = biometric.date != null ? moment(biometric.date) : null;\n            });\n        }\n        return res;\n    }\n\n    getObservableFromFetch(url, opts?) {\n        //Create and return an Observable.\n        return new Observable(observer => {\n            //Make use of Fetch API to get data from URL\n            fetch(url, opts || {})\n                .then(res => {\n                    /*The response.json() doesn't return json, it returns a \"readable stream\" which is a promise which needs to be resolved to get the actual data.*/\n                    return res.json();\n                })\n                .then(body => {\n                    observer.next(body);\n                    /*Complete the Observable as it won't produce any more event */\n                    observer.complete();\n                })\n                //Handle error\n                .catch(err => observer.error(err));\n        })\n    }\n}\n",
        "import { Component, OnInit } from '@angular/core';\r\nimport { Biometric, Finger, Patient } from '../model/biometric.model';\r\nimport { BiometricService } from '../services/biometric.service';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment_ from 'moment';\r\nimport { AppLoaderService } from '@lamis/web-core';\r\nimport { TdDialogService } from '@covalent/core';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-biometric-edit',\r\n    templateUrl: './biometric-edit.component.html'\r\n})\r\nexport class BiometricEditComponent implements OnInit {\r\n    biometrics: Biometric[] = [];\r\n    patient: Patient;\r\n    isSaving: boolean;\r\n    error = false;\r\n    finger: Finger;\r\n    fingers: Finger[] = [];\r\n    readers: any[];\r\n    reader: any;\r\n    message: string;\r\n\r\n    constructor(private biometricService: BiometricService,\r\n                protected notification: NotificationService,\r\n                private appLoaderService: AppLoaderService,\r\n                private _dialogService: TdDialogService,\r\n                protected activatedRoute: ActivatedRoute) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.fingers.push(Finger.LEFT_INDEX_FINGER);\r\n        this.fingers.push(Finger.LEFT_MIDDLE_FINGER);\r\n        this.fingers.push(Finger.LEFT_THUMB);\r\n        this.fingers.push(Finger.RIGHT_INDEX_FINGER);\r\n        this.fingers.push(Finger.RIGHT_MIDDLE_FINGER);\r\n        this.fingers.push(Finger.RIGHT_THUMB);\r\n\r\n        this.isSaving = false;\r\n        const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\r\n\r\n        this.biometricService.getPatient(patientId).subscribe((res) => {\r\n            this.patient = res;\r\n\r\n            this.biometricService.findByPatient(this.patient.id).subscribe((res) => {\r\n                if (res.body) {\r\n                    this.biometrics = res.body;\r\n                    this.fingers = this.fingers.filter(f => !this.biometrics.map(b => b.templateType).includes(f))\r\n                }\r\n            })\r\n        });\r\n\r\n        this.biometricService.getReaders().subscribe(res => this.readers = res);\r\n    }\r\n\r\n    enroll() {\r\n        const dialogRef = this._dialogService.openAlert({\r\n            message: `Please put your ${this.finger.toString()} on the scanner.`,\r\n            title: 'Enroll finger',\r\n            disableClose: true\r\n        });\r\n        this.biometricService.identify(this.reader.id).subscribe(res => {\r\n            dialogRef.close();\r\n            if (res.message === 'PATIENT_NOT_IDENTIFIED') {\r\n                const biometric: Biometric = {\r\n                    date: moment(),\r\n                    facility: this.patient.facility,\r\n                    patient: this.patient,\r\n                    template: res.template,\r\n                    templateType: this.finger,\r\n                    biometricType: 'FINGERPRINT'\r\n                };\r\n\r\n                this.biometrics = this.biometrics.filter(b => b.templateType !== this.finger);\r\n                this.biometrics.push(biometric);\r\n\r\n                this._dialogService.openAlert({\r\n                    message: `Finger ${this.finger.toString()} successfully enrolled.`,\r\n                    title: 'Enrollment success'\r\n                });\r\n                this.message = 'Please remember to click \\'Save Enrollment\\' when through enrolling all fingers';\r\n            } else if (res.message === 'PATIENT_IDENTIFIED') {\r\n                const fingerId = res.id;\r\n                this.biometricService.getBiometric(fingerId).subscribe(res => {\r\n                    this._dialogService.openAlert({\r\n                        message: `Finger already enrolled by patient ${res.patient.surname}, ${res.patient.otherNames} (${res.patient.hospitalNum})`,\r\n                        title: 'Enrollment error'\r\n                    })\r\n                })\r\n            } else {\r\n                this._dialogService.openAlert({\r\n                    message: 'There was an error enrolling finger, please try again',\r\n                    title: 'Enrollment error'\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    fingerToString(finger: Finger) {\r\n        const fingers = {\r\n            RIGHT_INDEX_FINGER: 'Right Index Finger',\r\n            LEFT_INDEX_FINGER: 'Left Index Finger',\r\n            RIGHT_THUMB: 'Right Thumb',\r\n            LEFT_THUMB: 'Left Thumb',\r\n            RIGHT_MIDDLE_FINGER: 'Right Middle Finger',\r\n            LEFT_MIDDLE_FINGER: 'Left Middle Finger'\r\n        };\r\n        return fingers[finger]\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    save() {\r\n        this.appLoaderService.open('Saving visit...');\r\n        this.isSaving = true;\r\n        this.subscribeToSaveResponse(this.biometricService.saveTemplates(this.biometrics));\r\n    }\r\n\r\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\r\n        result.subscribe(\r\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\r\n            (res: HttpErrorResponse) => {\r\n                this.appLoaderService.close();\r\n                this.onSaveError();\r\n                this.onError(res.message)\r\n            });\r\n    }\r\n\r\n    private onSaveSuccess(result: any) {\r\n        this.appLoaderService.close();\r\n        this.isSaving = false;\r\n        this.notification.showInfo('Fingerprints successfully saved');\r\n        this.previousState();\r\n    }\r\n\r\n    private onSaveError() {\r\n        this.isSaving = false;\r\n        this.error = true;\r\n        this.notification.showError('Error saving enrolling fingerprints');\r\n    }\r\n\r\n    protected onError(errorMessage: string) {\r\n        this.isSaving = false;\r\n        this.notification.showError(errorMessage);\r\n    }\r\n}\r\n",
        "import { Routes } from '@angular/router';\nimport { BiometricEditComponent } from '../components/biometric-edit.component';\n\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Biometric Enrollment',\n            breadcrumb: 'BIOMETRIC ENROLLMENT'\n        },\n        children: [\n            {\n                path: 'patient/:patientId/new',\n                component: BiometricEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Biometrics Enrollment',\n                    breadcrumb: 'BIOMETRIC ENROLLMENT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n",
        "import { CoreModule } from '@alfresco/adf-core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatProgressBarModule,\r\n    MatSelectModule,\r\n    MatTableModule\r\n} from '@angular/material';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CovalentDialogsModule, CovalentMessageModule } from '@covalent/core';\r\nimport { BiometricEditComponent } from './components/biometric-edit.component';\r\nimport { ROUTES } from './services/biometric.route';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { MatDateFormatModule } from '@lamis/web-core';\r\nimport { CustomFormsModule } from 'ng2-validation';\r\nimport { MatIconRegistry } from '@angular/material';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        BiometricEditComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatCardModule,\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        RouterModule.forChild(ROUTES),\r\n        MatProgressBarModule,\r\n        FormsModule,\r\n        CovalentMessageModule,\r\n        CovalentDialogsModule,\r\n        MatTableModule,\r\n        MatListModule,\r\n        CoreModule,\r\n        NgxDatatableModule,\r\n        ReactiveFormsModule,\r\n        MatDateFormatModule,\r\n        CustomFormsModule\r\n    ],\r\n    exports: [\r\n        BiometricEditComponent\r\n    ],\r\n    entryComponents: [],\r\n    providers: [\r\n    ]\r\n})\r\nexport class BiometricsModule {\r\n    constructor(private _iconRegistry: MatIconRegistry,\r\n                private _domSanitizer: DomSanitizer) {\r\n        /*this._iconRegistry.addSvgIconInNamespace('fingerprint', 'right_index',\r\n            this._domSanitizer.bypassSecurityTrustResourceUrl('/across/resources/static/fingerprint/img/right_index.svg'));\r\n        this._iconRegistry.addSvgIconInNamespace('fingerprint', 'left_index',\r\n            this._domSanitizer.bypassSecurityTrustResourceUrl('/across/resources/static/fingerprint/img/left_index.svg'));\r\n        this._iconRegistry.addSvgIconInNamespace('fingerprint', 'right_thumb',\r\n            this._domSanitizer.bypassSecurityTrustResourceUrl('/across/resources/static/fingerprint/img/right_thumb.svg'));\r\n        this._iconRegistry.addSvgIconInNamespace('fingerprint', 'left_thumb',\r\n            this._domSanitizer.bypassSecurityTrustResourceUrl('/across/resources/static/fingerprint/img/left_thumb.svg'));*/\r\n    }\r\n}\r\n"
    ]
}
