{
    "version": 3,
    "file": "lamis-biometrics-1.0.0.js",
    "sources": [
        "ng://lamis-biometrics-1.0.0/lib/model/biometric.model.ts",
        "ng://lamis-biometrics-1.0.0/lib/services/biometric.service.ts",
        "ng://lamis-biometrics-1.0.0/lib/components/biometric-edit.component.ts",
        "ng://lamis-biometrics-1.0.0/lib/services/biometric.route.ts",
        "ng://lamis-biometrics-1.0.0/lib/biometrics.module.ts",
        "ng://lamis-biometrics-1.0.0/public_api.ts",
        "ng://lamis-biometrics-1.0.0/lamis-biometrics-1.0.0.ts"
    ],
    "sourcesContent": [
        "import { Facility } from './facility.model';\nimport { Moment } from 'moment';\n\nexport interface Patient {\n    id?: number;\n    facility?: Facility;\n    hospitalNum?: string;\n    surname?: string;\n    otherNames?: string;\n    dateRegistration?: Moment;\n    dateStarted?: Moment;\n    gender?: string;\n    uuid?: string\n}\n\nexport interface Biometric {\n    id?: string;\n    patient?: Patient;\n    facility?: Facility;\n    template?: any;\n    templateType?: Finger;\n    biometricType: string;\n    date?: Moment\n}\n\nexport interface BiometricResponse {\n    template?: any;\n    id?: string;\n    message?: string;\n}\n\nexport enum Finger {\n    RIGHT_INDEX_FINGER = 'Right Index Finger',\n    LEFT_INDEX_FINGER = 'Left Index Finger',\n    RIGHT_THUMB = 'Right Thumb',\n    LEFT_THUMB = 'Left Thumb',\n    RIGHT_MIDDLE_FINGER = 'Right Middle Finger',\n    LEFT_MIDDLE_FINGER = 'Left Middle Finger'\n}\n",
        "import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthServerProvider, DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\nimport { map } from 'rxjs/operators';\nimport { Biometric, Patient } from '../model/biometric.model';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Biometric>;\ntype EntityArrayResponseType = HttpResponse<Biometric[]>;\n\n@Injectable({providedIn: 'root'})\nexport class BiometricService {\n    public resourceUrl = '';\n    proxyUrl = 'http://localhost:8888/api/biometrics';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig,\n                private authServerProvider: AuthServerProvider) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/biometrics';\n    }\n\n    saveTemplates(biometrics: Biometric[]) {\n        biometrics = biometrics.map(biometric => this.convertDateFromClient(biometric));\n        return this.http.post(`${this.resourceUrl}/templates`, biometrics, {observe: 'response'})\n    }\n\n    getBiometric(id: string) {\n        return this.http.get<Biometric>(`${this.resourceUrl}/${id}`)\n    }\n\n    getPatient(id: any) {\n        return this.http.get<Patient>(`/api/patients/by-uuid/${id}`, {observe: 'body'})\n            .pipe(map((res) => {\n                if (res) {\n                    res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null\n                }\n                return res;\n            }))\n    }\n\n    getReaders(): any {\n        return this.getObservableFromFetch(`${this.proxyUrl}/readers`)\n    }\n\n    findByPatient(id: number): Observable<EntityArrayResponseType> {\n        return this.http\n            .get<Biometric[]>(`${this.resourceUrl}/patient/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    identify(reader: string): any {\n        const accessToken = this.authServerProvider.getToken();\n        let url = new URL(`${this.proxyUrl}/identify`);\n        url.searchParams.append('reader', reader);\n        url.searchParams.append('server', window.location.host);\n        url.searchParams.append('accessToken', accessToken);\n        return this.getObservableFromFetch(url);\n    }\n\n    protected convertDateFromClient(biometric: Biometric): Biometric {\n        const copy: Biometric = Object.assign({}, biometric, {\n            date: biometric.date != null && biometric.date.isValid() ? biometric.date.format(DATE_FORMAT) : null,\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.date = res.body.date != null ? moment(res.body.date) : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((biometric: Biometric) => {\n                biometric.date = biometric.date != null ? moment(biometric.date) : null;\n            });\n        }\n        return res;\n    }\n\n    getObservableFromFetch(url, opts?) {\n        //Create and return an Observable.\n        return new Observable(observer => {\n            //Make use of Fetch API to get data from URL\n            fetch(url, opts || {})\n                .then(res => {\n                    /*The response.json() doesn't return json, it returns a \"readable stream\" which is a promise which needs to be resolved to get the actual data.*/\n                    return res.json();\n                })\n                .then(body => {\n                    observer.next(body);\n                    /*Complete the Observable as it won't produce any more event */\n                    observer.complete();\n                })\n                //Handle error\n                .catch(err => observer.error(err));\n        })\n    }\n}\n",
        "import { Component, OnInit } from '@angular/core';\r\nimport { Biometric, Finger, Patient } from '../model/biometric.model';\r\nimport { BiometricService } from '../services/biometric.service';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment_ from 'moment';\r\nimport { AppLoaderService } from '@lamis/web-core';\r\nimport { TdDialogService } from '@covalent/core';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-biometric-edit',\r\n    templateUrl: './biometric-edit.component.html'\r\n})\r\nexport class BiometricEditComponent implements OnInit {\r\n    biometrics: Biometric[] = [];\r\n    patient: Patient;\r\n    isSaving: boolean;\r\n    error = false;\r\n    finger: Finger;\r\n    fingers: Finger[] = [];\r\n    readers: any[];\r\n    reader: any;\r\n    message: string;\r\n\r\n    constructor(private biometricService: BiometricService,\r\n                protected notification: NotificationService,\r\n                private appLoaderService: AppLoaderService,\r\n                private _dialogService: TdDialogService,\r\n                protected activatedRoute: ActivatedRoute) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.fingers.push(Finger.LEFT_INDEX_FINGER);\r\n        this.fingers.push(Finger.LEFT_MIDDLE_FINGER);\r\n        this.fingers.push(Finger.LEFT_THUMB);\r\n        this.fingers.push(Finger.RIGHT_INDEX_FINGER);\r\n        this.fingers.push(Finger.RIGHT_MIDDLE_FINGER);\r\n        this.fingers.push(Finger.RIGHT_THUMB);\r\n\r\n        this.isSaving = false;\r\n        const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\r\n\r\n        this.biometricService.getPatient(patientId).subscribe((res) => {\r\n            this.patient = res;\r\n\r\n            this.biometricService.findByPatient(this.patient.id).subscribe((res) => {\r\n                if (res.body) {\r\n                    this.biometrics = res.body;\r\n                    this.fingers = this.fingers.filter(f => !this.biometrics.map(b => b.templateType).includes(f))\r\n                }\r\n            })\r\n        });\r\n\r\n        this.biometricService.getReaders().subscribe(res => this.readers = res);\r\n    }\r\n\r\n    enroll() {\r\n        const dialogRef = this._dialogService.openAlert({\r\n            message: `Please put your ${this.finger.toString()} on the scanner.`,\r\n            title: 'Enroll finger',\r\n            disableClose: true\r\n        });\r\n        this.biometricService.identify(this.reader.id).subscribe(res => {\r\n            dialogRef.close();\r\n            if (res.message === 'PATIENT_NOT_IDENTIFIED') {\r\n                const biometric: Biometric = {\r\n                    date: moment(),\r\n                    facility: this.patient.facility,\r\n                    patient: this.patient,\r\n                    template: res.template,\r\n                    templateType: this.finger,\r\n                    biometricType: 'FINGERPRINT'\r\n                };\r\n\r\n                this.biometrics = this.biometrics.filter(b => b.templateType !== this.finger);\r\n                this.biometrics.push(biometric);\r\n\r\n                this._dialogService.openAlert({\r\n                    message: `Finger ${this.finger.toString()} successfully enrolled.`,\r\n                    title: 'Enrollment success'\r\n                });\r\n                this.message = 'Please remember to click \\'Save Enrollment\\' when through enrolling all fingers';\r\n            } else if (res.message === 'PATIENT_IDENTIFIED') {\r\n                const fingerId = res.id;\r\n                this.biometricService.getBiometric(fingerId).subscribe(res => {\r\n                    this._dialogService.openAlert({\r\n                        message: `Finger already enrolled by patient ${res.patient.surname}, ${res.patient.otherNames} (${res.patient.hospitalNum})`,\r\n                        title: 'Enrollment error'\r\n                    })\r\n                })\r\n            } else {\r\n                this._dialogService.openAlert({\r\n                    message: 'There was an error enrolling finger, please try again',\r\n                    title: 'Enrollment error'\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    fingerToString(finger: Finger) {\r\n        const fingers = {\r\n            RIGHT_INDEX_FINGER: 'Right Index Finger',\r\n            LEFT_INDEX_FINGER: 'Left Index Finger',\r\n            RIGHT_THUMB: 'Right Thumb',\r\n            LEFT_THUMB: 'Left Thumb',\r\n            RIGHT_MIDDLE_FINGER: 'Right Middle Finger',\r\n            LEFT_MIDDLE_FINGER: 'Left Middle Finger'\r\n        };\r\n        return fingers[finger]\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    save() {\r\n        this.appLoaderService.open('Saving visit...');\r\n        this.isSaving = true;\r\n        this.subscribeToSaveResponse(this.biometricService.saveTemplates(this.biometrics));\r\n    }\r\n\r\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\r\n        result.subscribe(\r\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\r\n            (res: HttpErrorResponse) => {\r\n                this.appLoaderService.close();\r\n                this.onSaveError();\r\n                this.onError(res.message)\r\n            });\r\n    }\r\n\r\n    private onSaveSuccess(result: any) {\r\n        this.appLoaderService.close();\r\n        this.isSaving = false;\r\n        this.notification.showInfo('Fingerprints successfully saved');\r\n        this.previousState();\r\n    }\r\n\r\n    private onSaveError() {\r\n        this.isSaving = false;\r\n        this.error = true;\r\n        this.notification.showError('Error saving enrolling fingerprints');\r\n    }\r\n\r\n    protected onError(errorMessage: string) {\r\n        this.isSaving = false;\r\n        this.notification.showError(errorMessage);\r\n    }\r\n}\r\n",
        "import { Routes } from '@angular/router';\nimport { BiometricEditComponent } from '../components/biometric-edit.component';\n\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Biometric Enrollment',\n            breadcrumb: 'BIOMETRIC ENROLLMENT'\n        },\n        children: [\n            {\n                path: 'patient/:patientId/new',\n                component: BiometricEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Biometrics Enrollment',\n                    breadcrumb: 'BIOMETRIC ENROLLMENT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n",
        "import { CoreModule } from '@alfresco/adf-core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatProgressBarModule,\r\n    MatSelectModule,\r\n    MatTableModule\r\n} from '@angular/material';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CovalentDialogsModule, CovalentMessageModule } from '@covalent/core';\r\nimport { BiometricEditComponent } from './components/biometric-edit.component';\r\nimport { ROUTES } from './services/biometric.route';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { MatDateFormatModule } from '@lamis/web-core';\r\nimport { CustomFormsModule } from 'ng2-validation';\r\nimport { MatIconRegistry } from '@angular/material';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        BiometricEditComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatCardModule,\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        RouterModule.forChild(ROUTES),\r\n        MatProgressBarModule,\r\n        FormsModule,\r\n        CovalentMessageModule,\r\n        CovalentDialogsModule,\r\n        MatTableModule,\r\n        MatListModule,\r\n        CoreModule,\r\n        NgxDatatableModule,\r\n        ReactiveFormsModule,\r\n        MatDateFormatModule,\r\n        CustomFormsModule\r\n    ],\r\n    exports: [\r\n        BiometricEditComponent\r\n    ],\r\n    entryComponents: [],\r\n    providers: [\r\n    ]\r\n})\r\nexport class BiometricsModule {\r\n    constructor(private _iconRegistry: MatIconRegistry,\r\n                private _domSanitizer: DomSanitizer) {\r\n        /*this._iconRegistry.addSvgIconInNamespace('fingerprint', 'right_index',\r\n            this._domSanitizer.bypassSecurityTrustResourceUrl('/across/resources/static/fingerprint/img/right_index.svg'));\r\n        this._iconRegistry.addSvgIconInNamespace('fingerprint', 'left_index',\r\n            this._domSanitizer.bypassSecurityTrustResourceUrl('/across/resources/static/fingerprint/img/left_index.svg'));\r\n        this._iconRegistry.addSvgIconInNamespace('fingerprint', 'right_thumb',\r\n            this._domSanitizer.bypassSecurityTrustResourceUrl('/across/resources/static/fingerprint/img/right_thumb.svg'));\r\n        this._iconRegistry.addSvgIconInNamespace('fingerprint', 'left_thumb',\r\n            this._domSanitizer.bypassSecurityTrustResourceUrl('/across/resources/static/fingerprint/img/left_thumb.svg'));*/\r\n    }\r\n}\r\n",
        "/*\r\n * Public API Surface of Clinic\r\n */\r\n\r\nexport * from './lib/model/biometric.model';\r\nexport * from './lib/services/biometric.service';\r\nexport * from './lib/biometrics.module';\r\n",
        "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {BiometricEditComponent as Éµa} from './lib/components/biometric-edit.component';\nexport {ROUTES as Éµb} from './lib/services/biometric.route';"
    ],
    "names": [
        "tslib_1.__param",
        "moment"
    ],
    "mappings": "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"
}
