import * as tslib_1 from "tslib";
import {Inject, Injectable} from '@angular/core';
import {HttpClient, HttpResponse} from '@angular/common/http';
import {Observable} from 'rxjs';
import {AuthServerProvider, DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig} from '@lamis/web-core';
import {map} from 'rxjs/operators';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";

const moment = moment_;
let BiometricService = class BiometricService {
    constructor(http, serverUrl, authServerProvider) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.authServerProvider = authServerProvider;
        this.resourceUrl = '';
        this.proxyUrl = 'http://localhost:8888/api/biometrics';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/biometrics';
    }

    saveTemplates(biometrics) {
        biometrics = biometrics.map(biometric => this.convertDateFromClient(biometric));
        return this.http.post(`${this.resourceUrl}/templates`, biometrics, {observe: 'response'});
    }

    getBiometric(id) {
        return this.http.get(`${this.resourceUrl}/${id}`);
    }

    getPatient(id) {
        return this.http.get(`/api/patients/by-uuid/${id}`, {observe: 'body'})
            .pipe(map((res) => {
                if (res) {
                    res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null;
                }
                return res;
            }));
    }

    getReaders() {
        return this.getObservableFromFetch(`${this.proxyUrl}/readers`);
    }

    findByPatient(id) {
        return this.http
            .get(`${this.resourceUrl}/patient/${id}`, {observe: 'response'})
            .pipe(map((res) => this.convertDateArrayFromServer(res)));
    }

    delete(id) {
        return this.http.delete(`${this.resourceUrl}/${id}`, {observe: 'response'});
    }

    identify(reader) {
        const accessToken = this.authServerProvider.getToken();
        let url = new URL(`${this.proxyUrl}/identify`);
        url.searchParams.append('reader', reader);
        url.searchParams.append('server', window.location.host);
        url.searchParams.append('accessToken', accessToken);
        return this.getObservableFromFetch(url);
    }

    convertDateFromClient(biometric) {
        const copy = Object.assign({}, biometric, {
            date: biometric.date != null && biometric.date.isValid() ? biometric.date.format(DATE_FORMAT) : null,
        });
        return copy;
    }

    convertDateFromServer(res) {
        if (res.body) {
            res.body.date = res.body.date != null ? moment(res.body.date) : null;
        }
        return res;
    }

    convertDateArrayFromServer(res) {
        if (res.body) {
            res.body.forEach((biometric) => {
                biometric.date = biometric.date != null ? moment(biometric.date) : null;
            });
        }
        return res;
    }

    getObservableFromFetch(url, opts) {
        //Create and return an Observable.
        return new Observable(observer => {
            //Make use of Fetch API to get data from URL
            fetch(url, opts || {})
                .then(res => {
                    /*The response.json() doesn't return json, it returns a "readable stream" which is a promise which needs to be resolved to get the actual data.*/
                    return res.json();
                })
                .then(body => {
                    observer.next(body);
                    /*Complete the Observable as it won't produce any more event */
                    observer.complete();
                })
                //Handle error
                .catch(err => observer.error(err));
        });
    }
};
BiometricService.ctorParameters = () => [
    {type: HttpClient},
    {type: undefined, decorators: [{type: Inject, args: [SERVER_API_URL_CONFIG,]}]},
    {type: AuthServerProvider}
];
BiometricService.ngInjectableDef = i0.ɵɵdefineInjectable({
    factory: function BiometricService_Factory() {
        return new BiometricService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG), i0.ɵɵinject(i2.AuthServerProvider));
    }, token: BiometricService, providedIn: "root"
});
BiometricService = tslib_1.__decorate([
    Injectable({providedIn: 'root'}),
    tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
    tslib_1.__metadata("design:paramtypes", [HttpClient, Object, AuthServerProvider])
], BiometricService);
export {BiometricService};
//# sourceMappingURL=data:application/json;base64,
