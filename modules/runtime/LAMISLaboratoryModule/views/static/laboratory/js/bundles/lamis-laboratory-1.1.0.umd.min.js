!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common/http"),require("@lamis/web-core"),require("rxjs/operators"),require("moment"),require("@alfresco/adf-core"),require("@angular/common"),require("@angular/material"),require("@angular/router"),require("@covalent/core"),require("rxjs"),require("@swimlane/ngx-datatable"),require("@angular/forms"),require("ng2-validation")):"function"==typeof define&&define.amd?define("lamis-laboratory-1.1.0",["exports","@angular/core","@angular/common/http","@lamis/web-core","rxjs/operators","moment","@alfresco/adf-core","@angular/common","@angular/material","@angular/router","@covalent/core","rxjs","@swimlane/ngx-datatable","@angular/forms","ng2-validation"],t):t(((e=e||self)["lamis-laboratory-1"]=e["lamis-laboratory-1"]||{},e["lamis-laboratory-1"][1]=e["lamis-laboratory-1"][1]||{},e["lamis-laboratory-1"][1][0]={}),e.ng.core,e.ng.common.http,e.webCore,e.rxjs.operators,e.moment_,e.adfCore,e.ng.common,e.ng.material,e.ng.router,e.core$1,e.rxjs,e.ngxDatatable,e.ng.forms,e.ng2Validation)}(this,(function(e,t,r,a,n,o,i,s,d,l,c,u,p,m,y){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */function f(e,t,r,a){var n,o=arguments.length,i=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,r):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,a);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(i=(o<3?n(i):o>3?n(t,r,i):n(t,r))||i);return o>3&&i&&Object.defineProperty(t,r,i),i}function v(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function b(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var a,n,o=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=o.next()).done;)i.push(a.value)}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return i}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(b(arguments[t]));return e}var h=o,R=function(){function e(e,t){this.http=e,this.serverUrl=t,this.resourceUrl="",this.resourceUrl=t.SERVER_API_URL+"/api/laboratories"}var o,i;return e.prototype.create=function(e){var t=this,r=this.convertDateFromClient(e);return this.http.post(this.resourceUrl,r,{observe:"response"}).pipe(n.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.update=function(e){var t=this,r=this.convertDateFromClient(e);return this.http.put(this.resourceUrl,r,{observe:"response"}).pipe(n.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.find=function(e){var t=this;return this.http.get(this.resourceUrl+"/"+e,{observe:"response"}).pipe(n.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.findByUuid=function(e){var t=this;return this.http.get(this.resourceUrl+"/by-uuid/"+e,{observe:"response"}).pipe(n.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.delete=function(e){return this.http.delete(this.resourceUrl+"/"+e,{observe:"response"})},e.prototype.getPatient=function(e){return this.http.get("/api/patients/by-uuid/"+e,{observe:"body"}).pipe(n.map((function(e){return e&&(e.dateRegistration=null!=e.dateRegistration?h(e.dateRegistration):null),e})))},e.prototype.getVisitDatesByPatient=function(e){return this.http.get(this.resourceUrl+"/patient/"+e+"/report-dates").pipe(n.map((function(e){return e.forEach((function(e){return h(e)})),e})))},e.prototype.laboratoryCategories=function(){return this.http.get(this.resourceUrl+"/test-categories")},e.prototype.getLinesByLaboratory=function(e){return this.http.get(this.resourceUrl+"/"+e+"/lines")},e.prototype.labTestsByCategory=function(e){return this.http.get(this.resourceUrl+"/lab-tests/category/"+e)},e.prototype.getLabTestById=function(e){return this.http.get(this.resourceUrl+"/lab-test/"+e)},e.prototype.latestVisit=function(e){return this.http.get(this.resourceUrl+"/patient/"+e+"/latest")},e.prototype.convertDateFromClient=function(e){return Object.assign({},e,{dateReported:null!=e.dateResultReceived&&e.dateResultReceived.isValid()?e.dateResultReceived.format(a.DATE_FORMAT):null,dateAssay:null!=e.dateAssay&&e.dateAssay.isValid()?e.dateAssay.format(a.DATE_FORMAT):null,dateSampleCollected:null!=e.dateSampleCollected&&e.dateSampleCollected.isValid()?e.dateSampleCollected.format(a.DATE_FORMAT):null})},e.prototype.convertDateFromServer=function(e){return e.body&&(e.body.dateSampleCollected=null!=e.body.dateSampleCollected?h(e.body.dateSampleCollected):null,e.body.dateResultReceived=null!=e.body.dateResultReceived?h(e.body.dateResultReceived):null,e.body.dateAssay=null!=e.body.dateAssay?h(e.body.dateAssay):null),e},e.prototype.convertDateArrayFromServer=function(e){return e.body&&e.body.forEach((function(e){e.dateResultReceived=null!=e.dateResultReceived?h(e.dateResultReceived):null,e.dateAssay=null!=e.dateAssay?h(e.dateAssay):null,e.dateSampleCollected=null!=e.dateSampleCollected?h(e.dateSampleCollected):null})),e},e.ctorParameters=function(){return[{type:r.HttpClient},{type:void 0,decorators:[{type:t.Inject,args:[a.SERVER_API_URL_CONFIG]}]}]},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(r.HttpClient),t.ɵɵinject(a.SERVER_API_URL_CONFIG))},token:e,providedIn:"root"}),e=f([t.Injectable({providedIn:"root"}),(o=1,i=t.Inject(a.SERVER_API_URL_CONFIG),function(e,t){i(e,t,o)}),v("design:paramtypes",[r.HttpClient,Object])],e)}(),S=function(){function e(e,t,r,a,n,o,i){this.router=e,this.route=t,this.laboratoryService=r,this.cfr=a,this._dialogService=n,this.notificationService=o,this.updateService=i,this.properties=[]}return e.prototype.ngOnInit=function(){var e=this;this.route.data.subscribe((function(t){var r=t.entity;e.entity=r&&r.body?r.body:r;var a=e.route.snapshot.paramMap.get("patientId");e.laboratoryService.getPatient(a).subscribe((function(t){return e.entity.patient=t})),e.buildProperties()}))},e.prototype.edit=function(){this.router.navigate(["/","laboratories",this.entity.uuid,"patient",this.entity.patient.uuid,"edit"])},e.prototype.delete=function(){var e=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this laboratory request, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(t){t&&e.laboratoryService.delete(e.entity.id).subscribe((function(t){t.ok?e.router.navigate(["patients"]):e.notificationService.showError("Error deleting visit, please try again")}))}))},e.prototype.buildProperties=function(){var e=this;this.properties.push(new i.CardViewDateItemModel({key:"sc",value:this.entity.dateSampleCollected,label:"Date of Sample Collected",format:"dd MMM, yyyy"})),this.properties.push(new i.CardViewDateItemModel({key:"ds",value:this.entity.dateAssay,label:"Date of Assay",format:"dd MMM, yyyy"})),this.properties.push(new i.CardViewDateItemModel({key:"na",value:this.entity.dateResultReceived,label:"Date Result Received",format:"dd MMM, yyyy"})),this.properties.push(new i.CardViewTextItemModel({label:"Laboratory Number",key:"fs",value:this.entity.labNo})),this.laboratoryService.getLinesByLaboratory(this.entity.id).subscribe((function(t){e.dataSource=t}))},e.prototype.previousState=function(){window.history.back()},e.prototype.ngOnDestroy=function(){},e.ctorParameters=function(){return[{type:l.Router},{type:l.ActivatedRoute},{type:R},{type:t.ComponentFactoryResolver},{type:c.TdDialogService},{type:i.NotificationService},{type:i.CardViewUpdateService}]},e=f([t.Component({selector:"lamis-laboratory",template:'<div class="lamis-edit-form">\r\n    <div class="lamis-edit-form-container">\r\n        <mat-card>\r\n            <mat-card-header>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n                <adf-card-view [properties]="properties" editable="false"></adf-card-view>\r\n                <mat-divider></mat-divider>\r\n                <adf-datatable *ngIf="dataSource"\r\n                               [rows]="dataSource">\r\n                    <data-columns>\r\n                        <data-column key="labTest.description" title="Description" sortable="true"></data-column>\r\n                        <data-column key="result" title="Result" sortable="false"></data-column>\r\n                        <data-column key="labTest.measure" title="Unit" sortable="false"></data-column>\r\n                        <data-column key="comment" title="Comment" sortable="false"></data-column>\r\n                    </data-columns>\r\n                </adf-datatable>\r\n            </mat-card-content>\r\n            <mat-card-actions class="lamis-edit-form-actions">\r\n                <button mat-button (click)="previousState()">Back</button>\r\n                <button mat-raised-button color="warn" (click)="delete()">Delete</button>\r\n                <button mat-raised-button color="primary" (click)="edit()">Edit</button>\r\n            </mat-card-actions>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n'}),v("design:paramtypes",[l.Router,l.ActivatedRoute,R,t.ComponentFactoryResolver,c.TdDialogService,i.NotificationService,i.CardViewUpdateService])],e)}(),w=o,C=function(){function e(e,t,r,a,n){this.laboratoryService=e,this.notification=t,this.appLoaderService=r,this._dialogService=a,this.activatedRoute=n,this.entity={},this.maxNextVisit=w().add(200,"days"),this.categories=[],this.tests=[],this.selectedTests=[],this.error=!1,this.tomorrow=w().add(1,"days"),this.today=w(),this.ColumnMode=p.ColumnMode,this.editing={},this.errors={},this.rows=[],this.labTestIds=new Set,this.visitDates=[]}return e.prototype.createEntity=function(){return{}},e.prototype.ngOnInit=function(){var e=this;this.isSaving=!1,this.activatedRoute.data.subscribe((function(t){var r=t.entity;e.entity=r&&r.body?r.body:r,void 0===e.entity&&(e.entity=e.createEntity());var a=e.activatedRoute.snapshot.paramMap.get("patientId");e.laboratoryService.getPatient(a).subscribe((function(t){e.entity.patient=t,e.patient=t,e.dateRegistration=t.dateRegistration,e.entity.facility=t.facility,e.laboratoryService.getVisitDatesByPatient(t.id).subscribe((function(t){e.visitDates=t})),e.minReportedDate=e.entity.patient.dateRegistration.clone().add(3,"days"),e.minAssayDate=e.entity.patient.dateRegistration.clone().add(2,"days"),e.entity.id&&e.updateMinDates()})),e.entity.id&&(e.updateMinDates(),e.laboratoryService.getLinesByLaboratory(e.entity.id).subscribe((function(t){e.rows=t.map((function(t){return e.laboratoryService.getLabTestById(t.labTest.id).subscribe((function(r){e.tests.map((function(e){return e.id})).includes(t.labTest.id)||(e.tests.push(r),e.selectedTests.push(r),e.tests=g(e.tests),e.selectedTests=g(e.selectedTests)),t.result=t.result||""})),t}))}))),e.laboratoryService.laboratoryCategories().subscribe((function(t){return e.categories=t}))}))},e.prototype.updateMinDates=function(){this.minAssayDate=this.entity.dateSampleCollected.clone().add(2,"days"),this.entity.dateAssay?this.minReportedDate=this.entity.dateAssay.clone().add(2,"days"):this.minReportedDate=this.entity.dateSampleCollected.clone().add(7,"days")},e.prototype.filterDates=function(e){var t=!1;return this.visitDates.forEach((function(r){0===e.diff(r,"days")&&(t=!0)})),this.entity.id&&0===e.diff(this.entity.dateSampleCollected,"days")||!t},e.prototype.previousState=function(){window.history.back()},e.prototype.entityCompare=function(e,t){return a.entityCompare(e,t)},e.prototype.sampleDateChanged=function(e){this.minAssayDate=e.clone().add(2,"days")},e.prototype.assayDateChanged=function(e){this.minReportedDate=e.clone().add(2,"days")},e.prototype.edit=function(e){this.editing[e+""]=!0},e.prototype.save=function(){var e=this;this.isSaving=!0;var t=!1;this.rows.forEach((function(r){16!==r.labTest.id||r.indication||(e._dialogService.openAlert({title:"Indication is required",message:"Please select indication for Viral Load Test",disableClose:!0}),e.isSaving=!1,t=!0),16!==r.labTest.id&&r.indication&&(r.indication=null),e.entity.dateAssay&&!r.result&&(e._dialogService.openAlert({title:"Result is required",message:"Please provide test result",disableClose:!0}),e.isSaving=!1,t=!0);var a=parseInt(r.result);16!==r.labTest.id&&1!==r.labTest.id||!e.entity.dateAssay||a?r.result=a.toString():(e._dialogService.openAlert({title:"Result is invalid",message:"Please provide numeric result for test",disableClose:!0}),e.isSaving=!1,t=!0),r.result&&!e.entity.dateAssay&&(e.isSaving=!1,t=!0,e._dialogService.openAlert({title:"Form not complete",message:"Please provide Date of Test Assay",disableClose:!0}))})),t||(this.appLoaderService.open("Saving request..."),this.entity.lines=this.rows,void 0!==this.entity.id?this.subscribeToSaveResponse(this.laboratoryService.update(this.entity)):this.subscribeToSaveResponse(this.laboratoryService.create(this.entity)))},e.prototype.categoryChanged=function(e){var t=this;this.laboratoryService.labTestsByCategory(e.id).subscribe((function(e){e.forEach((function(e){t.tests.map((function(e){return e.id})).includes(e.id)||(t.tests.push(e),t.tests=g(t.tests))}))}))},e.prototype.testChanged=function(e){var t=this;this.selectedTests.forEach((function(e){t.labTestIds.has(e.id)||(t.rows.push({labTest:e}),t.rows=g(t.rows),t.labTestIds.add(e.id)),t.rows=t.rows.filter((function(e){return t.selectedTests.map((function(e){return e.id})).includes(e.labTest.id)})),t.labTestIds.forEach((function(e){t.rows.map((function(e){return e.labTest.id})).includes(e)||t.labTestIds.delete(e)}))}))},e.prototype.updateValue=function(e,t,r){console.log("inline editing rowIndex",r),this.editing[r+"-"+t]=!1,this.rows[r][t]="indication"===t?e:e.target.value,this.errors[r+"-result"]=this.entity.dateAssay&&!this.rows[r][t],this.errors[r+"-indication"]=16===this.rows[r].labTest.id&&!this.rows[r].indication,this.rows=g(this.rows),console.log("UPDATED!",this.rows[r][t])},e.prototype.subscribeToSaveResponse=function(e){var t=this;e.subscribe((function(e){return t.onSaveSuccess(e.body)}),(function(e){t.appLoaderService.close(),t.onSaveError(),t.onError(e.message)}))},e.prototype.onSaveSuccess=function(e){this.appLoaderService.close(),this.isSaving=!1,this.notification.showInfo("Laboratory request successfully saved"),this.previousState()},e.prototype.onSaveError=function(){this.isSaving=!1,this.error=!0,this.notification.showError("Error saving laboratory request")},e.prototype.onError=function(e){this.isSaving=!1,this.notification.showError(e)},e.ctorParameters=function(){return[{type:R},{type:i.NotificationService},{type:a.AppLoaderService},{type:c.TdDialogService},{type:l.ActivatedRoute}]},f([t.ViewChild(d.MatProgressBar,{static:!0}),v("design:type",d.MatProgressBar)],e.prototype,"progressBar",void 0),f([t.ViewChild(d.MatButton,{static:!0}),v("design:type",d.MatButton)],e.prototype,"submitButton",void 0),e=f([t.Component({selector:"lamis-laboratory-edit",template:'<div class="lamis-edit-form">\r\n    <div class="lamis-edit-form-container">\r\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #laboratoryForm="ngForm">\r\n            <mat-card class="default">\r\n                <mat-card-header>\r\n                </mat-card-header>\r\n                <mat-card-content *ngIf="patient">\r\n                    <div>\r\n                        <mat-form-field class="full-width" *ngIf="entity && dateRegistration">\r\n                            <input matInput [matDatepicker]="picker"\r\n                                   placeholder="Date of Sample Collection"\r\n                                   [(ngModel)]="entity.dateSampleCollected"\r\n                                   #dateCollected="ngModel"\r\n                                   (dateChange)="sampleDateChanged($event.value)"\r\n                                   [max]="today"\r\n                                   [min]="dateRegistration"\r\n                                   required\r\n                                   name="dateCollected">\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]="picker">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf="dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.required)">\r\n                                Date of Sample Collection is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.min)">\r\n                                Date of Sample Collection cannot be\r\n                                before {{entity.patient.dateRegistration | date: \'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.max)">\r\n                                Date of Sample Collection cannot be in the future\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class="full-width">\r\n                            <input matInput [(ngModel)]="entity.labNo"\r\n                                   placeholder="Laboratory Number"\r\n                                   #labNo="ngModel" required name="labNo"/>\r\n                            <mat-error\r\n                                    *ngIf="labNo.errors && (labNo.dirty || labNo.touched) && (labNo.errors.required)">\r\n                                Lab Number is required\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf="minAssayDate">\r\n                        <mat-form-field class="full-width">\r\n                            <input matInput [matDatepicker]="picker1"\r\n                                   placeholder="Date Assay"\r\n                                   [(ngModel)]="entity.dateAssay"\r\n                                   [matDatepickerFilter]="filterDates.bind(this)"\r\n                                   (dateChange)="assayDateChanged($event.value)"\r\n                                   #dateAssay="ngModel"\r\n                                   [min]="minAssayDate"\r\n                                   [max]="today"\r\n                                   name="dateAssay">\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]="picker1">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker1></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf="dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.required)">\r\n                                Date Assay is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.max)">\r\n                                Date Assay must be after {{today | date: \'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.min)">\r\n                                Date Assay must be after {{minAssayDate}}\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf="minReportedDate">\r\n                        <mat-form-field class="full-width">\r\n                            <input matInput [matDatepicker]="picker2"\r\n                                   placeholder="Date Result Received"\r\n                                   [(ngModel)]="entity.dateResultReceived"\r\n                                   [matDatepickerFilter]="filterDates.bind(this)"\r\n                                   #dateReported="ngModel"\r\n                                   [min]="minReportedDate"\r\n                                   [max]="today"\r\n                                   [required]="!!entity.dateAssay"\r\n                                   name="dateReported">\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]="picker2">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker2></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf="dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.required)">\r\n                                Date Result Received is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.max)">\r\n                                Date Result Received must be after {{today | date: \'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf="dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.min)">\r\n                                Date Result Received must not be before {{minReportedDate | date : \'dd MMM, yyyy\'}}\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field>\r\n                                <mat-select placeholder="Laboratory Test Category"\r\n                                            (selectionChange)="categoryChanged($event.value)">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option *ngFor="let category of categories"\r\n                                                [value]="category">{{category.category}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field>\r\n                                <mat-select placeholder="Laboratory Test"\r\n                                            multiple\r\n                                            name="regimen"\r\n                                            [(ngModel)]="selectedTests"\r\n                                            [compareWith]="entityCompare"\r\n                                            (selectionChange)="testChanged($event.value)">\r\n                                    <mat-option *ngFor="let test of tests"\r\n                                                [value]="test">{{test.description}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        Selected Test\r\n                        <mat-divider></mat-divider>\r\n                        <ngx-datatable\r\n                            #mydatatable\r\n                            class="material full-width"\r\n                            [headerHeight]="50"\r\n                            [limit]="5"\r\n                            [columnMode]="ColumnMode.force"\r\n                            [footerHeight]="50"\r\n                            rowHeight="auto"\r\n                            [rows]="rows"\r\n                        >\r\n                            <ngx-datatable-column name="Test Description" [prop]="\'labTest.description\'"\r\n                                                  [canAutoResize]="true">\r\n                                <ng-template ngx-datatable-cell-template let-value="value">\r\n                                    <mat-form-field class="full-width">\r\n                                        <input matInput disabled [value]="value" style="font-weight: 900">\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name="Result" [prop]="\'result\'" [canAutoResize]="true">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                    \x3c!--<mat-form-field *ngIf="!editing[rowIndex + \'\']" class="full-width">\r\n                                        <input matInput [value]="value" disabled>\r\n                                    </mat-form-field>\r\n                                    <mat-form-field *ngIf="editing[rowIndex + \'\']">--\x3e\r\n                                    <mat-form-field class="full-width">\r\n                                        <input\r\n                                                autofocus\r\n                                                matInput\r\n                                                name="result"\r\n                                                [required]="!!entity.dateAssay"\r\n                                                (blur)="updateValue($event, \'result\', rowIndex)"\r\n                                                [value]="value || \'\'"\r\n                                        >\r\n                                        <span matSuffix>&nbsp;{{row.labTest.unit}}</span>\r\n                                        <mat-error *ngIf="errors[rowIndex + \'-result\']">\r\n                                            Result value is required\r\n                                        </mat-error>\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column [maxWidth]="1">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name="Comment" [prop]="\'comment\'" [canAutoResize]="true">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                    \x3c!--<mat-form-field *ngIf="!editing[rowIndex + \'\']" class="full-width">\r\n                                        <textarea matInput [value]="value" disabled rows="2"></textarea>\r\n                                    </mat-form-field>\r\n                                    <mat-form-field *ngIf="editing[rowIndex + \'\']">--\x3e\r\n                                    <mat-form-field class="full-width">\r\n                                        <textarea\r\n                                                autofocus\r\n                                                matInput\r\n                                                rows="2"\r\n                                                (blur)="updateValue($event, \'comment\', rowIndex)"\r\n                                                [value]="value"\r\n                                        ></textarea>\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name="Indication" [canAutoResize]="true">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                    \x3c!--<mat-form-field *ngIf="!editing[rowIndex + \'\']" class="full-width">\r\n                                        <input matInput [value]="value" disabled>\r\n                                    </mat-form-field>\r\n                                    <mat-form-field *ngIf="editing[rowIndex + \'\']">--\x3e\r\n                                    <mat-form-field class="full-width">\r\n                                        <mat-select autofocus\r\n                                                    [value]="value"\r\n                                                    [required]="row.labTest.id === 16"\r\n                                                    name="ind"\r\n                                                    (valueChange)="updateValue($event, \'indication\', rowIndex)">\r\n                                            <mat-option></mat-option>\r\n                                            <mat-option [value]="\'Routine Monitoring\'">Routine Monitoring</mat-option>\r\n                                            <mat-option [value]="\'Targeted Monitoring\'">Targeted Monitoring</mat-option>\r\n                                        </mat-select>\r\n                                        <mat-error *ngIf="errors[rowIndex + \'-indication\']">\r\n                                            Viral Load indication is required\r\n                                        </mat-error>\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            \x3c!--<ngx-datatable-column name="Action" prop="id" [canAutoResize]="true">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\r\n                                             let-row="row">\r\n                                    <button type="button" mat-icon-button\r\n                                            *ngIf="!editing[rowIndex + \'\']"\r\n                                            (click)="edit(rowIndex)"\r\n                                            (mouseenter)="edit(rowIndex)"\r\n                                            title="Click to edit">\r\n                                        <mat-icon>edit</mat-icon>\r\n                                    </button>\r\n                                    <button type="button" mat-icon-button\r\n                                            *ngIf="editing[rowIndex + \'\']"\r\n                                            (dblclick)="editing[rowIndex + \'\'] = false"\r\n                                            title="Click to save">\r\n                                        <mat-icon>save</mat-icon>\r\n                                    </button>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>--\x3e\r\n                        </ngx-datatable>\r\n                    </div>\r\n                    <mat-divider></mat-divider>\r\n                </mat-card-content>\r\n                <mat-card-actions class="lamis-edit-form-actions">\r\n                    <button mat-raised-button type="button" (click)="previousState()">Back</button>\r\n                    <button mat-raised-button color=\'primary\'\r\n                            [disabled]="laboratoryForm.invalid || rows.length === 0 || isSaving"\r\n                            type="submit">\r\n                        {{entity.id !== undefined ? \'Update\' : \'Save\'}}\r\n                    </button>\r\n                </mat-card-actions>\r\n            </mat-card>\r\n        </form>\r\n    </div>\r\n</div>\r\n'}),v("design:paramtypes",[R,i.NotificationService,a.AppLoaderService,c.TdDialogService,l.ActivatedRoute])],e)}(),I=function(){function e(e){this.service=e}return e.prototype.resolve=function(e,t){var r=e.params.id?e.params.id:null;return r?this.service.findByUuid(r).pipe(n.filter((function(e){return e.ok})),n.map((function(e){return e.body}))):u.of({})},e.ctorParameters=function(){return[{type:R}]},e=f([t.Injectable(),v("design:paramtypes",[R])],e)}(),x=[{path:"",data:{title:"Laboratory Request",breadcrumb:"LABORATORY REQUEST"},children:[{path:":id/patient/:patientId/view",component:S,resolve:{entity:I},data:{authorities:["ROLE_USER"],title:"Laboratory Request",breadcrumb:"LABORATORY REQUEST"}},{path:"patient/:patientId/new",component:C,data:{authorities:["ROLE_DEC"],title:"LABORATORY REQUEST",breadcrumb:"ADD LABORATORY REQUEST"}},{path:":id/patient/:patientId/edit",component:C,resolve:{entity:I},data:{authorities:["ROLE_DEC"],title:"Laboratory Request Edit",breadcrumb:"LABORATORY REQUEST EDIT"}}]}],D=function(){function e(){}return e=f([t.NgModule({declarations:[S,C],imports:[s.CommonModule,d.MatInputModule,d.MatIconModule,d.MatCardModule,d.MatSelectModule,d.MatButtonModule,l.RouterModule.forChild(x),d.MatProgressBarModule,m.FormsModule,c.CovalentMessageModule,c.CovalentDialogsModule,d.MatTableModule,d.MatListModule,i.CoreModule,p.NgxDatatableModule,m.ReactiveFormsModule,a.MatDateFormatModule,y.CustomFormsModule],exports:[S,C],entryComponents:[],providers:[I]})],e)}();e.LaboratoryModule=D,e.LaboratoryService=R,e.ɵa=S,e.ɵb=C,e.ɵc=I,e.ɵd=x,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=lamis-laboratory-1.1.0.umd.min.js.map