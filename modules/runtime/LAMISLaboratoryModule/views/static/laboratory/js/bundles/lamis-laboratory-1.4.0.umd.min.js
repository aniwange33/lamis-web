!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common/http"),require("@lamis/web-core"),require("rxjs/operators"),require("moment"),require("@alfresco/adf-core"),require("@angular/common"),require("@angular/material"),require("@angular/router"),require("@covalent/core"),require("rxjs"),require("@swimlane/ngx-datatable"),require("@angular/forms"),require("ng2-validation")):"function"==typeof define&&define.amd?define("lamis-laboratory-1.4.0",["exports","@angular/core","@angular/common/http","@lamis/web-core","rxjs/operators","moment","@alfresco/adf-core","@angular/common","@angular/material","@angular/router","@covalent/core","rxjs","@swimlane/ngx-datatable","@angular/forms","ng2-validation"],t):t(((e=e||self)["lamis-laboratory-1"]=e["lamis-laboratory-1"]||{},e["lamis-laboratory-1"][4]=e["lamis-laboratory-1"][4]||{},e["lamis-laboratory-1"][4][0]={}),e.ng.core,e.ng.common.http,e.webCore,e.rxjs.operators,e.moment_,e.adfCore,e.ng.common,e.ng.material,e.ng.router,e.core$1,e.rxjs,e.ngxDatatable,e.ng.forms,e.ng2Validation)}(this,(function(e,t,a,n,r,o,i,s,l,d,u,c,p,m,f){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */function y(e,t,a,n){var r,o=arguments.length,i=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,a):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,a,n);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(i=(o<3?r(i):o>3?r(t,a,i):r(t,a))||i);return o>3&&i&&Object.defineProperty(t,a,i),i}function g(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function v(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,o=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=o.return)&&a.call(o)}finally{if(r)throw r.error}}return i}function b(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(v(arguments[t]));return e}var h=o,w=function(){function e(e,t){this.http=e,this.serverUrl=t,this.resourceUrl="",this.resourceUrl=t.SERVER_API_URL+"/api/laboratories"}var o,i;return e.prototype.create=function(e){var t=this,a=this.convertDateFromClient(e);return this.http.post(this.resourceUrl,a,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.update=function(e){var t=this,a=this.convertDateFromClient(e);return this.http.put(this.resourceUrl,a,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.find=function(e){var t=this;return this.http.get(this.resourceUrl+"/"+e,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.findByUuid=function(e){var t=this;return this.http.get(this.resourceUrl+"/by-uuid/"+e,{observe:"response"}).pipe(r.map((function(e){return t.convertDateFromServer(e)})))},e.prototype.delete=function(e){return this.http.delete(this.resourceUrl+"/"+e,{observe:"response"})},e.prototype.getPatient=function(e){return this.http.get("/api/patients/by-uuid/"+e,{observe:"body"}).pipe(r.map((function(e){return e&&(e.dateRegistration=null!=e.dateRegistration?h(e.dateRegistration):null),e})))},e.prototype.getVisitDatesByPatient=function(e){return this.http.get(this.resourceUrl+"/patient/"+e+"/report-dates").pipe(r.map((function(e){return e.forEach((function(e){return h(e)})),e})))},e.prototype.laboratoryCategories=function(){return this.http.get(this.resourceUrl+"/test-categories")},e.prototype.getLinesByLaboratory=function(e){return this.http.get(this.resourceUrl+"/"+e+"/lines")},e.prototype.labTestsByCategory=function(e){return this.http.get(this.resourceUrl+"/lab-tests/category/"+e)},e.prototype.getLabTestById=function(e){return this.http.get(this.resourceUrl+"/lab-test/"+e)},e.prototype.latestVisit=function(e){return this.http.get(this.resourceUrl+"/patient/"+e+"/latest")},e.prototype.convertDateFromClient=function(e){return Object.assign({},e,{dateResultReceived:null!=e.dateResultReceived&&e.dateResultReceived.isValid()?e.dateResultReceived.format(n.DATE_FORMAT):null,dateAssay:null!=e.dateAssay&&e.dateAssay.isValid()?e.dateAssay.format(n.DATE_FORMAT):null,dateSampleCollected:null!=e.dateSampleCollected&&e.dateSampleCollected.isValid()?e.dateSampleCollected.format(n.DATE_FORMAT):null})},e.prototype.convertDateFromServer=function(e){return e.body&&(e.body.dateSampleCollected=null!=e.body.dateSampleCollected?h(e.body.dateSampleCollected):null,e.body.dateResultReceived=null!=e.body.dateResultReceived?h(e.body.dateResultReceived):null,e.body.dateAssay=null!=e.body.dateAssay?h(e.body.dateAssay):null),e},e.prototype.convertDateArrayFromServer=function(e){return e.body&&e.body.forEach((function(e){e.dateResultReceived=null!=e.dateResultReceived?h(e.dateResultReceived):null,e.dateAssay=null!=e.dateAssay?h(e.dateAssay):null,e.dateSampleCollected=null!=e.dateSampleCollected?h(e.dateSampleCollected):null})),e},e.ctorParameters=function(){return[{type:a.HttpClient},{type:void 0,decorators:[{type:t.Inject,args:[n.SERVER_API_URL_CONFIG]}]}]},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(a.HttpClient),t.ɵɵinject(n.SERVER_API_URL_CONFIG))},token:e,providedIn:"root"}),e=y([t.Injectable({providedIn:"root"}),(o=1,i=t.Inject(n.SERVER_API_URL_CONFIG),function(e,t){i(e,t,o)}),g("design:paramtypes",[a.HttpClient,Object])],e)}(),R=function(){function e(e,t,a,n,r,o,i){this.router=e,this.route=t,this.laboratoryService=a,this.cfr=n,this._dialogService=r,this.notificationService=o,this.updateService=i,this.properties=[],this.ColumnMode=p.ColumnMode}return e.prototype.ngOnInit=function(){var e=this;this.route.data.subscribe((function(t){var a=t.entity;e.entity=a&&a.body?a.body:a;var n=e.route.snapshot.paramMap.get("patientId");e.laboratoryService.getPatient(n).subscribe((function(t){return e.entity.patient=t})),e.buildProperties()}))},e.prototype.edit=function(){this.router.navigate(["/","laboratories",this.entity.uuid,"patient",this.entity.patient.uuid,"edit"])},e.prototype.delete=function(){var e=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this laboratory request, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(t){t&&e.laboratoryService.delete(e.entity.id).subscribe((function(t){t.ok?e.router.navigate(["patients"]):e.notificationService.showError("Error deleting visit, please try again")}))}))},e.prototype.buildProperties=function(){var e=this;this.properties.push(new i.CardViewDateItemModel({key:"sc",value:this.entity.dateSampleCollected,label:"Date of Sample Collected",format:"dd MMM, yyyy"})),this.properties.push(new i.CardViewDateItemModel({key:"ds",value:this.entity.dateAssay,label:"Date of Assay",format:"dd MMM, yyyy"})),this.properties.push(new i.CardViewDateItemModel({key:"na",value:this.entity.dateResultReceived,label:"Date Result Received",format:"dd MMM, yyyy"})),this.properties.push(new i.CardViewTextItemModel({label:"Laboratory Number",key:"fs",value:this.entity.labNo})),this.dataSource=b(this.entity.lines.map((function(t){return e.laboratoryService.getLabTestById(t.lab_test_id).subscribe((function(e){t.description=e.description})),t})))},e.prototype.previousState=function(){window.history.back()},e.prototype.ngOnDestroy=function(){},e.ctorParameters=function(){return[{type:d.Router},{type:d.ActivatedRoute},{type:w},{type:t.ComponentFactoryResolver},{type:u.TdDialogService},{type:i.NotificationService},{type:i.CardViewUpdateService}]},e=y([t.Component({selector:"lamis-laboratory",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <mat-card>\n            <mat-card-header>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-card-view [properties]="properties" editable="false"></adf-card-view>\n                <mat-divider></mat-divider>\n                <ngx-datatable\n                    #mydatatable\n                    *ngIf="dataSource"\n                    class="material full-width"\n                    [headerHeight]="50"\n                    [limit]="5"\n                    [columnMode]="ColumnMode.force"\n                    [footerHeight]="50"\n                    rowHeight="auto"\n                    [rows]="dataSource"\n                >\n                    <ngx-datatable-column name="Test Description" [prop]="\'description\'"\n                                          [canAutoResize]="true">\n                        <ng-template ngx-datatable-cell-template let-value="value">\n                            <mat-form-field class="full-width">\n                                <input matInput disabled [value]="value" style="font-weight: 900">\n                            </mat-form-field>\n                        </ng-template>\n                    </ngx-datatable-column>\n                    <ngx-datatable-column name="Result" [prop]="\'result\'" [canAutoResize]="true">\n                        <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\n                                     let-row="row">\n                            <mat-form-field class="full-width">\n                                <input matInput disabled [value]="value" style="font-weight: 900">\n                            </mat-form-field>\n                        </ng-template>\n                    </ngx-datatable-column>\n                    <ngx-datatable-column name="Comment" [prop]="\'comment\'" [canAutoResize]="true">\n                        <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\n                                     let-row="row">\n                            <mat-form-field class="full-width">\n                                <input matInput disabled [value]="value" style="font-weight: 900">\n                            </mat-form-field>\n                        </ng-template>\n                    </ngx-datatable-column>\n                    <ngx-datatable-column name="Indication" [prop]="\'indication\'" [canAutoResize]="true">\n                        <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\n                                     let-row="row">\n                            <mat-form-field class="full-width">\n                                <input matInput disabled [value]="value" style="font-weight: 900">\n                            </mat-form-field>\n                        </ng-template>\n                    </ngx-datatable-column>\n                </ngx-datatable>\n            </mat-card-content>\n            <mat-card-actions class="lamis-edit-form-actions">\n                <button mat-button (click)="previousState()">Back</button>\n                <button mat-raised-button color="warn" (click)="delete()">Delete</button>\n                <button mat-raised-button color="primary" (click)="edit()">Edit</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n'}),g("design:paramtypes",[d.Router,d.ActivatedRoute,w,t.ComponentFactoryResolver,u.TdDialogService,i.NotificationService,i.CardViewUpdateService])],e)}(),S=o,I=function(){function e(e,t,a,n,r){this.laboratoryService=e,this.notification=t,this.appLoaderService=a,this._dialogService=n,this.activatedRoute=r,this.entity={},this.maxNextVisit=S().add(200,"days"),this.categories=[],this.tests=[],this.selectedTests=[],this.error=!1,this.tomorrow=S().add(1,"days"),this.today=S(),this.ColumnMode=p.ColumnMode,this.editing={},this.errors={},this.rows=[],this.labTestIds=new Set,this.visitDates=[]}return e.prototype.createEntity=function(){return{}},e.prototype.ngOnInit=function(){var e=this;this.isSaving=!1,this.activatedRoute.data.subscribe((function(t){var a=t.entity;e.entity=a&&a.body?a.body:a,void 0===e.entity&&(e.entity=e.createEntity());var n=e.activatedRoute.snapshot.paramMap.get("patientId");e.laboratoryService.getPatient(n).subscribe((function(t){e.entity.patient=t,e.patient=t,e.dateRegistration=t.dateRegistration,e.entity.facility=t.facility,e.laboratoryService.getVisitDatesByPatient(t.id).subscribe((function(t){e.visitDates=t})),e.minReportedDate=e.entity.patient.dateRegistration.clone().add(0,"days"),e.minAssayDate=e.entity.patient.dateRegistration.clone().add(0,"days"),e.entity.id&&e.updateMinDates()})),e.entity.id&&(e.updateMinDates(),e.rows=b(e.entity.lines.map((function(t){return e.laboratoryService.getLabTestById(t.lab_test_id).subscribe((function(a){t.description=a.description,t.unit=a.unit,e.tests.map((function(e){return e.id})).includes(t.lab_test_id)||(e.tests.push(a),e.selectedTests.push(a),e.tests=b(e.tests),e.selectedTests=b(e.selectedTests)),t.result=t.result||""})),t}))),e.rows=b(e.rows)),e.laboratoryService.laboratoryCategories().subscribe((function(t){return e.categories=t}))}))},e.prototype.updateMinDates=function(){this.minAssayDate=this.entity.dateSampleCollected.clone().add(0,"days"),this.entity.dateAssay?this.minReportedDate=this.entity.dateAssay.clone().add(0,"days"):this.minReportedDate=this.entity.dateSampleCollected.clone().add(1,"days")},e.prototype.filterDates=function(e){var t=!1;return this.visitDates.forEach((function(a){0===e.diff(a,"days")&&(t=!0)})),this.entity.id&&0===e.diff(this.entity.dateSampleCollected,"days")||!t},e.prototype.previousState=function(){window.history.back()},e.prototype.entityCompare=function(e,t){return n.entityCompare(e,t)},e.prototype.sampleDateChanged=function(e){this.minAssayDate=e.clone().add(0,"days")},e.prototype.assayDateChanged=function(e){this.minReportedDate=e.clone().add(0,"days")},e.prototype.edit=function(e){this.editing[e+""]=!0},e.prototype.save=function(){var e=this;this.isSaving=!0;var t=!1;this.rows=this.rows.map((function(a){16!==a.lab_test_id||a.indication||(e._dialogService.openAlert({title:"Indication is required",message:"Please select indication for Viral Load Test",disableClose:!0}),e.isSaving=!1,t=!0),16!==a.lab_test_id&&a.indication&&(a.indication=null),e.entity.dateAssay&&!a.result&&(e._dialogService.openAlert({title:"Result is required",message:"Please provide test result",disableClose:!0}),e.isSaving=!1,t=!0),a.result&&!e.entity.dateAssay&&(e.isSaving=!1,t=!0,e._dialogService.openAlert({title:"Form not complete",message:"Please provide Date of Test Assay",disableClose:!0}));var n=parseInt(a.result,10);if((16===a.lab_test_id||1===a.lab_test_id)&&e.entity.dateAssay)if(n)n<0?(e._dialogService.openAlert({title:"Result is invalid",message:"Please provide value >=0 for test result",disableClose:!0}),e.isSaving=!1,t=!0):a.result=n.toString();else{var r=!1;0===n&&(r=!0),r||(e._dialogService.openAlert({title:"Result is invalid",message:"Please provide numeric result for test",disableClose:!0}),e.isSaving=!1,t=!0)}return a.result&&"NAN"===a.result.toUpperCase()&&(a.result=null),a})),t||(this.appLoaderService.open("Saving request..."),this.entity.lines=this.rows,void 0!==this.entity.id?this.subscribeToSaveResponse(this.laboratoryService.update(this.entity)):this.subscribeToSaveResponse(this.laboratoryService.create(this.entity)))},e.prototype.categoryChanged=function(e){var t=this;this.laboratoryService.labTestsByCategory(e.id).subscribe((function(e){e.forEach((function(e){t.tests.map((function(e){return e.id})).includes(e.id)||(t.tests.push(e),t.tests=b(t.tests))}))}))},e.prototype.testChanged=function(e){var t=this;this.selectedTests.forEach((function(e){t.labTestIds.has(e.id)||(t.rows.push({lab_test_id:e.id,description:e.description,unit:e.unit,result:null}),t.rows=t.rows.map((function(e){return(e.result&&"NAN"===e.result.toUpperCase()||!e.result)&&(e.result=null),e})),t.rows=b(t.rows),t.labTestIds.add(e.id)),t.rows=t.rows.filter((function(e){return t.selectedTests.map((function(e){return e.id})).includes(e.lab_test_id)})),t.labTestIds.forEach((function(e){t.rows.map((function(e){return e.lab_test_id})).includes(e)||t.labTestIds.delete(e)}))}))},e.prototype.updateValue=function(e,t,a){console.log("inline editing rowIndex",a),this.editing[a+"-"+t]=!1,this.rows[a][t]="indication"===t?e:e.target.value,this.errors[a+"-result"]=this.entity.dateAssay&&!this.rows[a][t],this.errors[a+"-indication"]=16===this.rows[a].lab_test_id&&!this.rows[a].indication,this.rows=b(this.rows),console.log("UPDATED!",this.rows[a][t])},e.prototype.subscribeToSaveResponse=function(e){var t=this;e.subscribe((function(e){return t.onSaveSuccess(e.body)}),(function(e){t.appLoaderService.close(),t.onSaveError(),t.onError(e.message)}))},e.prototype.onSaveSuccess=function(e){this.appLoaderService.close(),this.isSaving=!1,this.notification.showInfo("Laboratory request successfully saved"),this.previousState()},e.prototype.onSaveError=function(){this.isSaving=!1,this.error=!0,this.notification.showError("Error saving laboratory request")},e.prototype.onError=function(e){this.isSaving=!1,this.notification.showError(e)},e.ctorParameters=function(){return[{type:w},{type:i.NotificationService},{type:n.AppLoaderService},{type:u.TdDialogService},{type:d.ActivatedRoute}]},y([t.ViewChild(l.MatProgressBar,{static:!0}),g("design:type",l.MatProgressBar)],e.prototype,"progressBar",void 0),y([t.ViewChild(l.MatButton,{static:!0}),g("design:type",l.MatButton)],e.prototype,"submitButton",void 0),e=y([t.Component({selector:"lamis-laboratory-edit",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #laboratoryForm="ngForm">\n            <mat-card class="default">\n                <mat-card-header>\n                </mat-card-header>\n                <mat-card-content *ngIf="patient">\n                    <div>\n                        <mat-form-field class="full-width" *ngIf="entity && dateRegistration">\n                            <input matInput [matDatepicker]="picker"\n                                   placeholder="Date of Sample Collection"\n                                   [(ngModel)]="entity.dateSampleCollected"\n                                   #dateCollected="ngModel"\n                                   (dateChange)="sampleDateChanged($event.value)"\n                                   [max]="today"\n                                   [min]="dateRegistration"\n                                   required\n                                   name="dateCollected">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]="picker">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                            <mat-error\n                                    *ngIf="dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.required)">\n                                Date of Sample Collection is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.min)">\n                                Date of Sample Collection cannot be\n                                before {{entity.patient.dateRegistration | date: \'dd MMM, yyyy\'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.max)">\n                                Date of Sample Collection cannot be in the future\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class="full-width">\n                            <input matInput [(ngModel)]="entity.labNo"\n                                   placeholder="Laboratory Number"\n                                   #labNo="ngModel" required name="labNo"/>\n                            <mat-error\n                                    *ngIf="labNo.errors && (labNo.dirty || labNo.touched) && (labNo.errors.required)">\n                                Lab Number is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf="minAssayDate">\n                        <mat-form-field class="full-width">\n                            <input matInput [matDatepicker]="picker1"\n                                   placeholder="Date Assay"\n                                   [(ngModel)]="entity.dateAssay"\n                                   [matDatepickerFilter]="filterDates.bind(this)"\n                                   (dateChange)="assayDateChanged($event.value)"\n                                   #dateAssay="ngModel"\n                                   [min]="minAssayDate"\n                                   [max]="today"\n                                   name="dateAssay">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]="picker1">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker1></mat-datepicker>\n                            <mat-error\n                                    *ngIf="dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.required)">\n                                Date Assay is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.max)">\n                                Date Assay must be after {{today | date: \'dd MMM, yyyy\'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.min)">\n                                Date Assay must be after {{minAssayDate}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf="minReportedDate">\n                        <mat-form-field class="full-width">\n                            <input matInput [matDatepicker]="picker2"\n                                   placeholder="Date Result Received"\n                                   [(ngModel)]="entity.dateResultReceived"\n                                   [matDatepickerFilter]="filterDates.bind(this)"\n                                   #dateReported="ngModel"\n                                   [min]="minReportedDate"\n                                   [max]="today"\n                                   [required]="!!entity.dateAssay"\n                                   name="dateReported">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]="picker2">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker2></mat-datepicker>\n                            <mat-error\n                                    *ngIf="dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.required)">\n                                Date Result Received is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.max)">\n                                Date Result Received must be after {{today | date: \'dd MMM, yyyy\'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.min)">\n                                Date Result Received must not be before {{minReportedDate | date : \'dd MMM, yyyy\'}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field>\n                                <mat-select placeholder="Laboratory Test Category"\n                                            (selectionChange)="categoryChanged($event.value)">\n                                    <mat-option></mat-option>\n                                    <mat-option *ngFor="let category of categories"\n                                                [value]="category">{{category.category}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field>\n                                <mat-select placeholder="Laboratory Test"\n                                            multiple\n                                            name="regimen"\n                                            [(ngModel)]="selectedTests"\n                                            [compareWith]="entityCompare"\n                                            (selectionChange)="testChanged($event.value)">\n                                    <mat-option *ngFor="let test of tests"\n                                                [value]="test">{{test.description}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        Selected Test\n                        <mat-divider></mat-divider>\n                        <ngx-datatable\n                            #mydatatable\n                            class="material full-width"\n                            [headerHeight]="50"\n                            [limit]="5"\n                            [columnMode]="ColumnMode.force"\n                            [footerHeight]="50"\n                            rowHeight="auto"\n                            [rows]="rows"\n                        >\n                            <ngx-datatable-column name="Test Description" [prop]="\'description\'"\n                                                  [canAutoResize]="true">\n                                <ng-template ngx-datatable-cell-template let-value="value">\n                                    <mat-form-field class="full-width">\n                                        <input matInput disabled [value]="value" style="font-weight: 900">\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name="Result" [prop]="\'result\'" [canAutoResize]="true">\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\n                                             let-row="row">\n                                    \x3c!--<mat-form-field *ngIf="!editing[rowIndex + \'\']" class="full-width">\n                                        <input matInput [value]="value" disabled>\n                                    </mat-form-field>\n                                    <mat-form-field *ngIf="editing[rowIndex + \'\']">--\x3e\n                                    <mat-form-field class="full-width">\n                                        <input\n                                                autofocus\n                                                matInput\n                                                type="text"\n                                                name="result"\n                                                [required]="!!entity.dateAssay"\n                                                (blur)="updateValue($event, \'result\', rowIndex)"\n                                                [value]="value || \'\'"\n                                        >\n                                        <span matSuffix>&nbsp;{{row.unit}}</span>\n                                        <mat-error *ngIf="errors[rowIndex + \'-result\']">\n                                            Result value is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column [maxWidth]="1">\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\n                                             let-row="row">\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name="Comment" [prop]="\'comment\'" [canAutoResize]="true">\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\n                                             let-row="row">\n                                    \x3c!--<mat-form-field *ngIf="!editing[rowIndex + \'\']" class="full-width">\n                                        <textarea matInput [value]="value" disabled rows="2"></textarea>\n                                    </mat-form-field>\n                                    <mat-form-field *ngIf="editing[rowIndex + \'\']">--\x3e\n                                    <mat-form-field class="full-width">\n                                        <textarea\n                                                autofocus\n                                                matInput\n                                                rows="2"\n                                                (blur)="updateValue($event, \'comment\', rowIndex)"\n                                                [value]="value"\n                                        ></textarea>\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name="Indication" [canAutoResize]="true">\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\n                                             let-row="row">\n                                    \x3c!--<mat-form-field *ngIf="!editing[rowIndex + \'\']" class="full-width">\n                                        <input matInput [value]="value" disabled>\n                                    </mat-form-field>\n                                    <mat-form-field *ngIf="editing[rowIndex + \'\']">--\x3e\n                                    <mat-form-field class="full-width">\n                                        <mat-select autofocus\n                                                    [value]="value"\n                                                    [required]="row.lab_test_id === 16"\n                                                    name="ind"\n                                                    (valueChange)="updateValue($event, \'indication\', rowIndex)">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]="\'Routine Monitoring\'">Routine Monitoring</mat-option>\n                                            <mat-option [value]="\'Targeted Monitoring\'">Targeted Monitoring</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf="errors[rowIndex + \'-indication\']">\n                                            Viral Load indication is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            \x3c!--<ngx-datatable-column name="Action" prop="id" [canAutoResize]="true">\n                                <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value"\n                                             let-row="row">\n                                    <button type="button" mat-icon-button\n                                            *ngIf="!editing[rowIndex + \'\']"\n                                            (click)="edit(rowIndex)"\n                                            (mouseenter)="edit(rowIndex)"\n                                            title="Click to edit">\n                                        <mat-icon>edit</mat-icon>\n                                    </button>\n                                    <button type="button" mat-icon-button\n                                            *ngIf="editing[rowIndex + \'\']"\n                                            (dblclick)="editing[rowIndex + \'\'] = false"\n                                            title="Click to save">\n                                        <mat-icon>save</mat-icon>\n                                    </button>\n                                </ng-template>\n                            </ngx-datatable-column>--\x3e\n                        </ngx-datatable>\n                    </div>\n                    <mat-divider></mat-divider>\n                </mat-card-content>\n                <mat-card-actions class="lamis-edit-form-actions">\n                    <button mat-raised-button type="button" (click)="previousState()">Back</button>\n                    <button mat-raised-button color=\'primary\'\n                            [disabled]="laboratoryForm.invalid || rows.length === 0 || isSaving"\n                            type="submit">\n                        {{entity.id !== undefined ? \'Update\' : \'Save\'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n'}),g("design:paramtypes",[w,i.NotificationService,n.AppLoaderService,u.TdDialogService,d.ActivatedRoute])],e)}(),x=function(){function e(e){this.service=e}return e.prototype.resolve=function(e,t){var a=e.params.id?e.params.id:null;return a?this.service.findByUuid(a).pipe(r.filter((function(e){return e.ok})),r.map((function(e){return e.body}))):c.of({})},e.ctorParameters=function(){return[{type:w}]},e=y([t.Injectable(),g("design:paramtypes",[w])],e)}(),C=[{path:"",data:{title:"Laboratory Request",breadcrumb:"LABORATORY REQUEST"},children:[{path:":id/patient/:patientId/view",component:R,resolve:{entity:x},data:{authorities:["ROLE_USER"],title:"Laboratory Request",breadcrumb:"LABORATORY REQUEST"}},{path:"patient/:patientId/new",component:I,data:{authorities:["ROLE_DEC"],title:"LABORATORY REQUEST",breadcrumb:"ADD LABORATORY REQUEST"}},{path:":id/patient/:patientId/edit",component:I,resolve:{entity:x},data:{authorities:["ROLE_DEC"],title:"Laboratory Request Edit",breadcrumb:"LABORATORY REQUEST EDIT"}}]}],A=function(){function e(){}return e=y([t.NgModule({declarations:[R,I],imports:[s.CommonModule,l.MatInputModule,l.MatIconModule,l.MatCardModule,l.MatSelectModule,l.MatButtonModule,d.RouterModule.forChild(C),l.MatProgressBarModule,m.FormsModule,u.CovalentMessageModule,u.CovalentDialogsModule,l.MatTableModule,l.MatListModule,i.CoreModule,p.NgxDatatableModule,m.ReactiveFormsModule,n.MatDateFormatModule,f.CustomFormsModule],exports:[R,I],entryComponents:[],providers:[x]})],e)}();e.LaboratoryModule=A,e.LaboratoryService=w,e.ɵa=R,e.ɵb=I,e.ɵc=x,e.ɵd=C,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=lamis-laboratory-1.4.0.umd.min.js.map