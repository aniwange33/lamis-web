import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { DATE_FORMAT, SERVER_API_URL_CONFIG } from '@lamis/web-core';
import { map } from 'rxjs/operators';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";
var moment = moment_;
var LaboratoryService = /** @class */ (function () {
    function LaboratoryService(http, serverUrl) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.resourceUrl = '';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/laboratories';
    }
    LaboratoryService.prototype.create = function (laboratory) {
        var _this = this;
        var copy = this.convertDateFromClient(laboratory);
        return this.http
            .post(this.resourceUrl, copy, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }));
    };
    LaboratoryService.prototype.update = function (laboratory) {
        var _this = this;
        var copy = this.convertDateFromClient(laboratory);
        return this.http
            .put(this.resourceUrl, copy, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }));
    };
    LaboratoryService.prototype.find = function (id) {
        var _this = this;
        return this.http
            .get(this.resourceUrl + "/" + id, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }));
    };
    LaboratoryService.prototype.findByUuid = function (id) {
        var _this = this;
        return this.http
            .get(this.resourceUrl + "/by-uuid/" + id, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }));
    };
    LaboratoryService.prototype.delete = function (id) {
        return this.http.delete(this.resourceUrl + "/" + id, { observe: 'response' });
    };
    LaboratoryService.prototype.getPatient = function (id) {
        return this.http.get("/api/patients/by-uuid/" + id, { observe: 'body' })
            .pipe(map(function (res) {
            if (res) {
                res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null;
            }
            return res;
        }));
    };
    LaboratoryService.prototype.getVisitDatesByPatient = function (patientId) {
        return this.http.get(this.resourceUrl + "/patient/" + patientId + "/report-dates")
            .pipe(map(function (res) {
            res.forEach(function (d) { return moment(d); });
            return res;
        }));
    };
    LaboratoryService.prototype.laboratoryCategories = function () {
        return this.http.get(this.resourceUrl + "/test-categories");
    };
    LaboratoryService.prototype.getLinesByLaboratory = function (laboratoryId) {
        return this.http.get(this.resourceUrl + "/" + laboratoryId + "/lines");
    };
    LaboratoryService.prototype.labTestsByCategory = function (id) {
        return this.http.get(this.resourceUrl + "/lab-tests/category/" + id);
    };
    LaboratoryService.prototype.getLabTestById = function (id) {
        return this.http.get(this.resourceUrl + "/lab-test/" + id);
    };
    LaboratoryService.prototype.latestVisit = function (patientId) {
        return this.http.get(this.resourceUrl + "/patient/" + patientId + "/latest");
    };
    LaboratoryService.prototype.convertDateFromClient = function (laboratory) {
        var copy = Object.assign({}, laboratory, {
            dateResultReceived: laboratory.dateResultReceived != null && laboratory.dateResultReceived.isValid() ? laboratory.dateResultReceived.format(DATE_FORMAT) : null,
            dateAssay: laboratory.dateAssay != null && laboratory.dateAssay.isValid() ? laboratory.dateAssay.format(DATE_FORMAT) : null,
            dateSampleCollected: laboratory.dateSampleCollected != null && laboratory.dateSampleCollected.isValid() ? laboratory.dateSampleCollected.format(DATE_FORMAT) : null
        });
        return copy;
    };
    LaboratoryService.prototype.convertDateFromServer = function (res) {
        if (res.body) {
            res.body.dateSampleCollected = res.body.dateSampleCollected != null ? moment(res.body.dateSampleCollected) : null;
            res.body.dateResultReceived = res.body.dateResultReceived != null ? moment(res.body.dateResultReceived) : null;
            res.body.dateAssay = res.body.dateAssay != null ? moment(res.body.dateAssay) : null;
        }
        return res;
    };
    LaboratoryService.prototype.convertDateArrayFromServer = function (res) {
        if (res.body) {
            res.body.forEach(function (laboratory) {
                laboratory.dateResultReceived = laboratory.dateResultReceived != null ? moment(laboratory.dateResultReceived) : null;
                laboratory.dateAssay = laboratory.dateAssay != null ? moment(laboratory.dateAssay) : null;
                laboratory.dateSampleCollected = laboratory.dateSampleCollected != null ? moment(laboratory.dateSampleCollected) : null;
                1;
            });
        }
        return res;
    };
    LaboratoryService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: undefined, decorators: [{ type: Inject, args: [SERVER_API_URL_CONFIG,] }] }
    ]; };
    LaboratoryService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LaboratoryService_Factory() { return new LaboratoryService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG)); }, token: LaboratoryService, providedIn: "root" });
    LaboratoryService = tslib_1.__decorate([
        Injectable({ providedIn: 'root' }),
        tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
        tslib_1.__metadata("design:paramtypes", [HttpClient, Object])
    ], LaboratoryService);
    return LaboratoryService;
}());
export { LaboratoryService };
//# sourceMappingURL=data:application/json;base64,