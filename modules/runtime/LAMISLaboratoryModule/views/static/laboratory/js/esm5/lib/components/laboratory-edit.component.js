import * as tslib_1 from "tslib";
import {Component, ViewChild} from '@angular/core';
import {LaboratoryService} from '../services/laboratory.service';
import {NotificationService} from '@alfresco/adf-core';
import {ActivatedRoute} from '@angular/router';
import {MatButton, MatProgressBar} from '@angular/material';
import {ColumnMode} from '@swimlane/ngx-datatable';
import * as moment_ from 'moment';
import {AppLoaderService, entityCompare} from '@lamis/web-core';
import {TdDialogService} from '@covalent/core';

var moment = moment_;
var LaboratoryEditComponent = /** @class */ (function () {
    function LaboratoryEditComponent(laboratoryService, notification, appLoaderService, _dialogService, activatedRoute) {
        this.laboratoryService = laboratoryService;
        this.notification = notification;
        this.appLoaderService = appLoaderService;
        this._dialogService = _dialogService;
        this.activatedRoute = activatedRoute;
        this.entity = {};
        this.maxNextVisit = moment().add(200, 'days');
        this.categories = [];
        this.tests = [];
        this.selectedTests = [];
        this.error = false;
        this.tomorrow = moment().add(1, 'days');
        this.today = moment();
        this.ColumnMode = ColumnMode;
        this.editing = {};
        this.errors = {};
        this.rows = [];
        this.labTestIds = new Set();
        this.visitDates = [];
    }

    LaboratoryEditComponent.prototype.createEntity = function () {
        return {};
    };
    LaboratoryEditComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.isSaving = false;
        this.activatedRoute.data.subscribe(function (_a) {
            var entity = _a.entity;
            _this.entity = !!entity && entity.body ? entity.body : entity;
            if (_this.entity === undefined) {
                _this.entity = _this.createEntity();
            }
            var patientId = _this.activatedRoute.snapshot.paramMap.get('patientId');
            _this.laboratoryService.getPatient(patientId).subscribe(function (res) {
                _this.entity.patient = res;
                _this.patient = res;
                _this.dateRegistration = res.dateRegistration;
                _this.entity.facility = res.facility;
                _this.laboratoryService.getVisitDatesByPatient(res.id).subscribe(function (res) {
                    _this.visitDates = res;
                });
                _this.minReportedDate = _this.entity.patient.dateRegistration.clone().add(3, 'days');
                _this.minAssayDate = _this.entity.patient.dateRegistration.clone().add(2, 'days');
                if (_this.entity.id) {
                    _this.updateMinDates();
                }
            });
            if (_this.entity.id) {
                _this.updateMinDates();
                _this.laboratoryService.getLinesByLaboratory(_this.entity.id)
                    .subscribe(function (res) {
                        _this.rows = res.map(function (r) {
                            _this.laboratoryService.getLabTestById(r.labTest.id).subscribe(function (res) {
                                if (!_this.tests.map(function (r) {
                                    return r.id;
                                }).includes(r.labTest.id)) {
                                    _this.tests.push(res);
                                    _this.selectedTests.push(res);
                                    _this.tests = tslib_1.__spread(_this.tests);
                                    _this.selectedTests = tslib_1.__spread(_this.selectedTests);
                                }
                                r.result = r.result || '';
                            });
                            return r;
                        });
                    });
            }
            _this.laboratoryService.laboratoryCategories().subscribe(function (res) {
                return _this.categories = res;
            });
        });
    };
    LaboratoryEditComponent.prototype.updateMinDates = function () {
        this.minAssayDate = this.entity.dateSampleCollected.clone().add(2, 'days');
        if (this.entity.dateAssay) {
            this.minReportedDate = this.entity.dateAssay.clone().add(2, 'days');
        } else {
            this.minReportedDate = this.entity.dateSampleCollected.clone().add(7, 'days');
        }
    };
    LaboratoryEditComponent.prototype.filterDates = function (date) {
        var exists = false;
        this.visitDates.forEach(function (d) {
            if (date.diff(d, 'days') === 0) {
                exists = true;
            }
        });
        return (this.entity.id && date.diff(this.entity.dateSampleCollected, 'days') === 0) || !exists;
    };
    LaboratoryEditComponent.prototype.previousState = function () {
        window.history.back();
    };
    LaboratoryEditComponent.prototype.entityCompare = function (e1, e2) {
        return entityCompare(e1, e2);
    };
    LaboratoryEditComponent.prototype.sampleDateChanged = function (date) {
        this.minAssayDate = date.clone().add(2, 'days');
    };
    LaboratoryEditComponent.prototype.assayDateChanged = function (date) {
        this.minReportedDate = date.clone().add(2, 'days');
    };
    LaboratoryEditComponent.prototype.edit = function (rowIndex) {
        this.editing[rowIndex + ''] = true;
    };
    LaboratoryEditComponent.prototype.save = function () {
        var _this = this;
        this.isSaving = true;
        var abort = false;
        //this.progressBar.mode = 'indeterminate';
        this.rows.forEach(function (line) {
            if (line.labTest.id === 16 && !line.indication) {
                _this._dialogService.openAlert({
                    title: 'Indication is required',
                    message: 'Please select indication for Viral Load Test',
                    disableClose: true
                });
                _this.isSaving = false;
                abort = true;
            }
            if (line.labTest.id !== 16 && line.indication) {
                line.indication = null;
            }
            if (_this.entity.dateAssay && !line.result) {
                _this._dialogService.openAlert({
                    title: 'Result is required',
                    message: 'Please provide test result',
                    disableClose: true
                });
                _this.isSaving = false;
                abort = true;
            }
            if (line.result && !_this.entity.dateAssay) {
                _this.isSaving = false;
                abort = true;
                _this._dialogService.openAlert({
                    title: 'Form not complete',
                    message: 'Please provide Date of Test Assay',
                    disableClose: true
                });
            }
            var result = parseInt(line.result);
            if ((line.labTest.id === 16 || line.labTest.id === 1) && _this.entity.dateAssay && !result) {
                _this._dialogService.openAlert({
                    title: 'Result is invalid',
                    message: 'Please provide numeric result for test',
                    disableClose: true
                });
                _this.isSaving = false;
                abort = true;
            } else {
                line.result = result.toString();
            }
        });
        if (abort) {
            return;
        }
        this.appLoaderService.open('Saving request...');
        this.entity.lines = this.rows;
        if (this.entity.id !== undefined) {
            this.subscribeToSaveResponse(this.laboratoryService.update(this.entity));
        } else {
            this.subscribeToSaveResponse(this.laboratoryService.create(this.entity));
        }
    };
    LaboratoryEditComponent.prototype.categoryChanged = function (type) {
        var _this = this;
        this.laboratoryService.labTestsByCategory(type.id).subscribe(function (res) {
            res.forEach(function (labTest) {
                if (!_this.tests.map(function (r) {
                    return r.id;
                }).includes(labTest.id)) {
                    _this.tests.push(labTest);
                    _this.tests = tslib_1.__spread(_this.tests);
                }
            });
        });
    };
    LaboratoryEditComponent.prototype.testChanged = function (event) {
        var _this = this;
        this.selectedTests.forEach(function (labTest) {
            if (!_this.labTestIds.has(labTest.id)) {
                _this.rows.push({
                    labTest: labTest,
                    result: ''
                });
                _this.rows = tslib_1.__spread(_this.rows);
                _this.labTestIds.add(labTest.id);
            }
            _this.rows = _this.rows.filter(function (row) {
                return _this.selectedTests.map(function (test) {
                    return test.id;
                }).includes(row.labTest.id);
            });
            _this.labTestIds.forEach(function (id) {
                if (!_this.rows.map(function (r) {
                    return r.labTest.id;
                }).includes(id)) {
                    _this.labTestIds.delete(id);
                }
            });
        });
    };
    LaboratoryEditComponent.prototype.updateValue = function (event, cell, rowIndex) {
        console.log('inline editing rowIndex', rowIndex);
        this.editing[rowIndex + '-' + cell] = false;
        this.rows[rowIndex][cell] = cell === 'indication' ? event : event.target.value;
        this.errors[rowIndex + '-result'] = this.entity.dateAssay && !this.rows[rowIndex][cell];
        this.errors[rowIndex + '-indication'] = this.rows[rowIndex].labTest.id === 16 && !this.rows[rowIndex]['indication'];
        this.rows = tslib_1.__spread(this.rows);
        console.log('UPDATED!', this.rows[rowIndex][cell]);
    };
    LaboratoryEditComponent.prototype.subscribeToSaveResponse = function (result) {
        var _this = this;
        result.subscribe(function (res) {
            return _this.onSaveSuccess(res.body);
        }, function (res) {
            _this.appLoaderService.close();
            _this.onSaveError();
            _this.onError(res.message);
        });
    };
    LaboratoryEditComponent.prototype.onSaveSuccess = function (result) {
        this.appLoaderService.close();
        this.isSaving = false;
        this.notification.showInfo('Laboratory request successfully saved');
        this.previousState();
    };
    LaboratoryEditComponent.prototype.onSaveError = function () {
        this.isSaving = false;
        this.error = true;
        this.notification.showError('Error saving laboratory request');
    };
    LaboratoryEditComponent.prototype.onError = function (errorMessage) {
        this.isSaving = false;
        this.notification.showError(errorMessage);
    };
    LaboratoryEditComponent.ctorParameters = function () {
        return [
            {type: LaboratoryService},
            {type: NotificationService},
            {type: AppLoaderService},
            {type: TdDialogService},
            {type: ActivatedRoute}
        ];
    };
    tslib_1.__decorate([
        ViewChild(MatProgressBar, {static: true}),
        tslib_1.__metadata("design:type", MatProgressBar)
    ], LaboratoryEditComponent.prototype, "progressBar", void 0);
    tslib_1.__decorate([
        ViewChild(MatButton, {static: true}),
        tslib_1.__metadata("design:type", MatButton)
    ], LaboratoryEditComponent.prototype, "submitButton", void 0);
    LaboratoryEditComponent = tslib_1.__decorate([
        Component({
            selector: 'lamis-laboratory-edit',
            template: "<div class=\"lamis-edit-form\">\r\n    <div class=\"lamis-edit-form-container\">\r\n        <form name=\"form\" role=\"form\" novalidate (ngSubmit)=\"save()\" #laboratoryForm=\"ngForm\">\r\n            <mat-card class=\"default\">\r\n                <mat-card-header>\r\n                </mat-card-header>\r\n                <mat-card-content *ngIf=\"patient\">\r\n                    <div>\r\n                        <mat-form-field class=\"full-width\" *ngIf=\"entity && dateRegistration\">\r\n                            <input matInput [matDatepicker]=\"picker\"\r\n                                   placeholder=\"Date of Sample Collection\"\r\n                                   [(ngModel)]=\"entity.dateSampleCollected\"\r\n                                   #dateCollected=\"ngModel\"\r\n                                   (dateChange)=\"sampleDateChanged($event.value)\"\r\n                                   [max]=\"today\"\r\n                                   [min]=\"dateRegistration\"\r\n                                   required\r\n                                   name=\"dateCollected\">\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]=\"picker\">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf=\"dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.required)\">\r\n                                Date of Sample Collection is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.min)\">\r\n                                Date of Sample Collection cannot be\r\n                                before {{entity.patient.dateRegistration | date: 'dd MMM, yyyy'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.max)\">\r\n                                Date of Sample Collection cannot be in the future\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field class=\"full-width\">\r\n                            <input matInput [(ngModel)]=\"entity.labNo\"\r\n                                   placeholder=\"Laboratory Number\"\r\n                                   #labNo=\"ngModel\" required name=\"labNo\"/>\r\n                            <mat-error\r\n                                    *ngIf=\"labNo.errors && (labNo.dirty || labNo.touched) && (labNo.errors.required)\">\r\n                                Lab Number is required\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf=\"minAssayDate\">\r\n                        <mat-form-field class=\"full-width\">\r\n                            <input matInput [matDatepicker]=\"picker1\"\r\n                                   placeholder=\"Date Assay\"\r\n                                   [(ngModel)]=\"entity.dateAssay\"\r\n                                   [matDatepickerFilter]=\"filterDates.bind(this)\"\r\n                                   (dateChange)=\"assayDateChanged($event.value)\"\r\n                                   #dateAssay=\"ngModel\"\r\n                                   [min]=\"minAssayDate\"\r\n                                   [max]=\"today\"\r\n                                   name=\"dateAssay\">\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]=\"picker1\">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker1></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf=\"dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.required)\">\r\n                                Date Assay is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.max)\">\r\n                                Date Assay must be after {{today | date: 'dd MMM, yyyy'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.min)\">\r\n                                Date Assay must be after {{minAssayDate}}\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf=\"minReportedDate\">\r\n                        <mat-form-field class=\"full-width\">\r\n                            <input matInput [matDatepicker]=\"picker2\"\r\n                                   placeholder=\"Date Result Received\"\r\n                                   [(ngModel)]=\"entity.dateResultReceived\"\r\n                                   [matDatepickerFilter]=\"filterDates.bind(this)\"\r\n                                   #dateReported=\"ngModel\"\r\n                                   [min]=\"minReportedDate\"\r\n                                   [max]=\"today\"\r\n                                   [required]=\"!!entity.dateAssay\"\r\n                                   name=\"dateReported\">\r\n                            <mat-datepicker-toggle\r\n                                    matSuffix\r\n                                    [for]=\"picker2\">\r\n                            </mat-datepicker-toggle>\r\n                            <mat-datepicker #picker2></mat-datepicker>\r\n                            <mat-error\r\n                                    *ngIf=\"dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.required)\">\r\n                                Date Result Received is required\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.max)\">\r\n                                Date Result Received must be after {{today | date: 'dd MMM, yyyy'}}\r\n                            </mat-error>\r\n                            <mat-error\r\n                                    *ngIf=\"dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.min)\">\r\n                                Date Result Received must not be before {{minReportedDate | date : 'dd MMM, yyyy'}}\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <mat-form-field>\r\n                                <mat-select placeholder=\"Laboratory Test Category\"\r\n                                            (selectionChange)=\"categoryChanged($event.value)\">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option *ngFor=\"let category of categories\"\r\n                                                [value]=\"category\">{{category.category}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <mat-form-field>\r\n                                <mat-select placeholder=\"Laboratory Test\"\r\n                                            multiple\r\n                                            name=\"regimen\"\r\n                                            [(ngModel)]=\"selectedTests\"\r\n                                            [compareWith]=\"entityCompare\"\r\n                                            (selectionChange)=\"testChanged($event.value)\">\r\n                                    <mat-option *ngFor=\"let test of tests\"\r\n                                                [value]=\"test\">{{test.description}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        Selected Test\r\n                        <mat-divider></mat-divider>\r\n                        <ngx-datatable\r\n                            #mydatatable\r\n                            class=\"material full-width\"\r\n                            [headerHeight]=\"50\"\r\n                            [limit]=\"5\"\r\n                            [columnMode]=\"ColumnMode.force\"\r\n                            [footerHeight]=\"50\"\r\n                            rowHeight=\"auto\"\r\n                            [rows]=\"rows\"\r\n                        >\r\n                            <ngx-datatable-column name=\"Test Description\" [prop]=\"'labTest.description'\"\r\n                                                  [canAutoResize]=\"true\">\r\n                                <ng-template ngx-datatable-cell-template let-value=\"value\">\r\n                                    <mat-form-field class=\"full-width\">\r\n                                        <input matInput disabled [value]=\"value\" style=\"font-weight: 900\">\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name=\"Result\" [prop]=\"'result'\" [canAutoResize]=\"true\">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\r\n                                             let-row=\"row\">\r\n                                    <!--<mat-form-field *ngIf=\"!editing[rowIndex + '']\" class=\"full-width\">\r\n                                        <input matInput [value]=\"value\" disabled>\r\n                                    </mat-form-field>\r\n                                    <mat-form-field *ngIf=\"editing[rowIndex + '']\">-->\r\n                                    <mat-form-field class=\"full-width\">\r\n                                        <input\r\n                                                autofocus\r\n                                                matInput\r\n                                                name=\"result\"\r\n                                                [required]=\"!!entity.dateAssay\"\r\n                                                (blur)=\"updateValue($event, 'result', rowIndex)\"\r\n                                                [value]=\"value || ''\"\r\n                                        >\r\n                                        <span matSuffix>&nbsp;{{row.labTest.unit}}</span>\r\n                                        <mat-error *ngIf=\"errors[rowIndex + '-result']\">\r\n                                            Result value is required\r\n                                        </mat-error>\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column [maxWidth]=\"1\">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\r\n                                             let-row=\"row\">\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name=\"Comment\" [prop]=\"'comment'\" [canAutoResize]=\"true\">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\r\n                                             let-row=\"row\">\r\n                                    <!--<mat-form-field *ngIf=\"!editing[rowIndex + '']\" class=\"full-width\">\r\n                                        <textarea matInput [value]=\"value\" disabled rows=\"2\"></textarea>\r\n                                    </mat-form-field>\r\n                                    <mat-form-field *ngIf=\"editing[rowIndex + '']\">-->\r\n                                    <mat-form-field class=\"full-width\">\r\n                                        <textarea\r\n                                                autofocus\r\n                                                matInput\r\n                                                rows=\"2\"\r\n                                                (blur)=\"updateValue($event, 'comment', rowIndex)\"\r\n                                                [value]=\"value\"\r\n                                        ></textarea>\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <ngx-datatable-column name=\"Indication\" [canAutoResize]=\"true\">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\r\n                                             let-row=\"row\">\r\n                                    <!--<mat-form-field *ngIf=\"!editing[rowIndex + '']\" class=\"full-width\">\r\n                                        <input matInput [value]=\"value\" disabled>\r\n                                    </mat-form-field>\r\n                                    <mat-form-field *ngIf=\"editing[rowIndex + '']\">-->\r\n                                    <mat-form-field class=\"full-width\">\r\n                                        <mat-select autofocus\r\n                                                    [value]=\"value\"\r\n                                                    [required]=\"row.labTest.id === 16\"\r\n                                                    name=\"ind\"\r\n                                                    (valueChange)=\"updateValue($event, 'indication', rowIndex)\">\r\n                                            <mat-option></mat-option>\r\n                                            <mat-option [value]=\"'Routine Monitoring'\">Routine Monitoring</mat-option>\r\n                                            <mat-option [value]=\"'Targeted Monitoring'\">Targeted Monitoring</mat-option>\r\n                                        </mat-select>\r\n                                        <mat-error *ngIf=\"errors[rowIndex + '-indication']\">\r\n                                            Viral Load indication is required\r\n                                        </mat-error>\r\n                                    </mat-form-field>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>\r\n                            <!--<ngx-datatable-column name=\"Action\" prop=\"id\" [canAutoResize]=\"true\">\r\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\r\n                                             let-row=\"row\">\r\n                                    <button type=\"button\" mat-icon-button\r\n                                            *ngIf=\"!editing[rowIndex + '']\"\r\n                                            (click)=\"edit(rowIndex)\"\r\n                                            (mouseenter)=\"edit(rowIndex)\"\r\n                                            title=\"Click to edit\">\r\n                                        <mat-icon>edit</mat-icon>\r\n                                    </button>\r\n                                    <button type=\"button\" mat-icon-button\r\n                                            *ngIf=\"editing[rowIndex + '']\"\r\n                                            (dblclick)=\"editing[rowIndex + ''] = false\"\r\n                                            title=\"Click to save\">\r\n                                        <mat-icon>save</mat-icon>\r\n                                    </button>\r\n                                </ng-template>\r\n                            </ngx-datatable-column>-->\r\n                        </ngx-datatable>\r\n                    </div>\r\n                    <mat-divider></mat-divider>\r\n                </mat-card-content>\r\n                <mat-card-actions class=\"lamis-edit-form-actions\">\r\n                    <button mat-raised-button type=\"button\" (click)=\"previousState()\">Back</button>\r\n                    <button mat-raised-button color='primary'\r\n                            [disabled]=\"laboratoryForm.invalid || rows.length === 0 || isSaving\"\r\n                            type=\"submit\">\r\n                        {{entity.id !== undefined ? 'Update' : 'Save'}}\r\n                    </button>\r\n                </mat-card-actions>\r\n            </mat-card>\r\n        </form>\r\n    </div>\r\n</div>\r\n"
        }),
        tslib_1.__metadata("design:paramtypes", [LaboratoryService,
            NotificationService,
            AppLoaderService,
            TdDialogService,
            ActivatedRoute])
    ], LaboratoryEditComponent);
    return LaboratoryEditComponent;
}());
export {LaboratoryEditComponent};
//# sourceMappingURL=data:application/json;base64,
