import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { LaboratoryService } from '../services/laboratory.service';
import { NotificationService } from '@alfresco/adf-core';
import { ActivatedRoute } from '@angular/router';
import { MatButton, MatProgressBar } from '@angular/material';
import { ColumnMode } from '@swimlane/ngx-datatable';
import * as moment_ from 'moment';
import { AppLoaderService, entityCompare } from '@lamis/web-core';
import { TdDialogService } from '@covalent/core';
var moment = moment_;
var LaboratoryEditComponent = /** @class */ (function () {
    function LaboratoryEditComponent(laboratoryService, notification, appLoaderService, _dialogService, activatedRoute) {
        this.laboratoryService = laboratoryService;
        this.notification = notification;
        this.appLoaderService = appLoaderService;
        this._dialogService = _dialogService;
        this.activatedRoute = activatedRoute;
        this.entity = {};
        this.maxNextVisit = moment().add(200, 'days');
        this.categories = [];
        this.tests = [];
        this.selectedTests = [];
        this.error = false;
        this.tomorrow = moment().add(1, 'days');
        this.today = moment();
        this.ColumnMode = ColumnMode;
        this.editing = {};
        this.errors = {};
        this.rows = [];
        this.labTestIds = new Set();
        this.visitDates = [];
    }
    LaboratoryEditComponent.prototype.createEntity = function () {
        return {};
    };
    LaboratoryEditComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.isSaving = false;
        this.activatedRoute.data.subscribe(function (_a) {
            var entity = _a.entity;
            _this.entity = !!entity && entity.body ? entity.body : entity;
            if (_this.entity === undefined) {
                _this.entity = _this.createEntity();
            }
            var patientId = _this.activatedRoute.snapshot.paramMap.get('patientId');
            _this.laboratoryService.getPatient(patientId).subscribe(function (res) {
                _this.entity.patient = res;
                _this.patient = res;
                _this.dateRegistration = res.dateRegistration;
                _this.entity.facility = res.facility;
                _this.laboratoryService.getVisitDatesByPatient(res.id).subscribe(function (res1) {
                    _this.visitDates = res1;
                });
                _this.minReportedDate = _this.entity.patient.dateRegistration.clone().add(0, 'days');
                _this.minAssayDate = _this.entity.patient.dateRegistration.clone().add(0, 'days');
                if (_this.entity.id) {
                    _this.updateMinDates();
                }
            });
            if (_this.entity.id) {
                _this.updateMinDates();
                _this.rows = tslib_1.__spread(_this.entity.lines.map(function (r) {
                    _this.laboratoryService.getLabTestById(r.lab_test_id).subscribe(function (res) {
                        r.description = res.description;
                        r.unit = res.unit;
                        if (!_this.tests.map(function (r1) { return r1.id; }).includes(r.lab_test_id)) {
                            _this.tests.push(res);
                            _this.selectedTests.push(res);
                            _this.tests = tslib_1.__spread(_this.tests);
                            _this.selectedTests = tslib_1.__spread(_this.selectedTests);
                        }
                        r.result = r.result || '';
                    });
                    return r;
                }));
                _this.rows = tslib_1.__spread(_this.rows);
            }
            _this.laboratoryService.laboratoryCategories().subscribe(function (res) { return _this.categories = res; });
        });
    };
    LaboratoryEditComponent.prototype.updateMinDates = function () {
        this.minAssayDate = this.entity.dateSampleCollected.clone().add(0, 'days');
        if (this.entity.dateAssay) {
            this.minReportedDate = this.entity.dateAssay.clone().add(0, 'days');
        }
        else {
            this.minReportedDate = this.entity.dateSampleCollected.clone().add(1, 'days');
        }
    };
    LaboratoryEditComponent.prototype.filterDates = function (date) {
        var exists = false;
        this.visitDates.forEach(function (d) {
            if (date.diff(d, 'days') === 0) {
                exists = true;
            }
        });
        return (this.entity.id && date.diff(this.entity.dateSampleCollected, 'days') === 0) || !exists;
    };
    LaboratoryEditComponent.prototype.previousState = function () {
        window.history.back();
    };
    LaboratoryEditComponent.prototype.entityCompare = function (e1, e2) {
        return entityCompare(e1, e2);
    };
    LaboratoryEditComponent.prototype.sampleDateChanged = function (date) {
        this.minAssayDate = date.clone().add(0, 'days');
    };
    LaboratoryEditComponent.prototype.assayDateChanged = function (date) {
        this.minReportedDate = date.clone().add(0, 'days');
    };
    LaboratoryEditComponent.prototype.edit = function (rowIndex) {
        this.editing[rowIndex + ''] = true;
    };
    LaboratoryEditComponent.prototype.save = function () {
        var _this = this;
        this.isSaving = true;
        var abort = false;
        // this.progressBar.mode = 'indeterminate';
        this.rows = this.rows.map(function (line) {
            if (line.lab_test_id === 16 && !line.indication) {
                _this._dialogService.openAlert({
                    title: 'Indication is required',
                    message: 'Please select indication for Viral Load Test',
                    disableClose: true
                });
                _this.isSaving = false;
                abort = true;
            }
            if (line.lab_test_id !== 16 && line.indication) {
                line.indication = null;
            }
            if (_this.entity.dateAssay && !line.result) {
                _this._dialogService.openAlert({
                    title: 'Result is required',
                    message: 'Please provide test result',
                    disableClose: true
                });
                _this.isSaving = false;
                abort = true;
            }
            if (line.result && !_this.entity.dateAssay) {
                _this.isSaving = false;
                abort = true;
                _this._dialogService.openAlert({
                    title: 'Form not complete',
                    message: 'Please provide Date of Test Assay',
                    disableClose: true
                });
            }
            var result = parseInt(line.result, 10);
            if ((line.lab_test_id === 16 || line.lab_test_id === 1) && _this.entity.dateAssay) {
                if (!result) {
                    var zero = false;
                    if (result === 0) {
                        zero = true;
                    }
                    if (!zero) {
                        _this._dialogService.openAlert({
                            title: 'Result is invalid',
                            message: 'Please provide numeric result for test',
                            disableClose: true
                        });
                        _this.isSaving = false;
                        abort = true;
                    }
                }
                else if (result < 0) {
                    _this._dialogService.openAlert({
                        title: 'Result is invalid',
                        message: 'Please provide value >=0 for test result',
                        disableClose: true
                    });
                    _this.isSaving = false;
                    abort = true;
                }
                else {
                    line.result = result.toString();
                }
            }
            if (!!line.result && line.result.toUpperCase() === 'NAN') {
                line.result = null;
            }
            return line;
        });
        if (abort) {
            return;
        }
        this.appLoaderService.open('Saving request...');
        this.entity.lines = this.rows;
        if (this.entity.id !== undefined) {
            this.subscribeToSaveResponse(this.laboratoryService.update(this.entity));
        }
        else {
            this.subscribeToSaveResponse(this.laboratoryService.create(this.entity));
        }
    };
    LaboratoryEditComponent.prototype.categoryChanged = function (type) {
        var _this = this;
        this.laboratoryService.labTestsByCategory(type.id).subscribe(function (res) {
            res.forEach(function (labTest) {
                if (!_this.tests.map(function (r) { return r.id; }).includes(labTest.id)) {
                    _this.tests.push(labTest);
                    _this.tests = tslib_1.__spread(_this.tests);
                }
            });
        });
    };
    LaboratoryEditComponent.prototype.testChanged = function (event) {
        var _this = this;
        this.selectedTests.forEach(function (labTest) {
            if (!_this.labTestIds.has(labTest.id)) {
                _this.rows.push({
                    lab_test_id: labTest.id,
                    description: labTest.description,
                    unit: labTest.unit,
                    result: null
                });
                _this.rows = _this.rows.map(function (line) {
                    if ((!!line.result && line.result.toUpperCase() === 'NAN') || !line.result) {
                        line.result = null;
                    }
                    return line;
                });
                _this.rows = tslib_1.__spread(_this.rows);
                _this.labTestIds.add(labTest.id);
            }
            _this.rows = _this.rows.filter(function (row) { return _this.selectedTests.map(function (test) { return test.id; }).includes(row.lab_test_id); });
            _this.labTestIds.forEach(function (id) {
                if (!_this.rows.map(function (r) { return r.lab_test_id; }).includes(id)) {
                    _this.labTestIds.delete(id);
                }
            });
        });
    };
    LaboratoryEditComponent.prototype.updateValue = function (event, cell, rowIndex) {
        console.log('inline editing rowIndex', rowIndex);
        this.editing[rowIndex + '-' + cell] = false;
        this.rows[rowIndex][cell] = cell === 'indication' ? event : event.target.value;
        this.errors[rowIndex + '-result'] = this.entity.dateAssay && !this.rows[rowIndex][cell];
        this.errors[rowIndex + '-indication'] = this.rows[rowIndex].lab_test_id === 16 && !this.rows[rowIndex]['indication'];
        this.rows = tslib_1.__spread(this.rows);
        console.log('UPDATED!', this.rows[rowIndex][cell]);
    };
    LaboratoryEditComponent.prototype.subscribeToSaveResponse = function (result) {
        var _this = this;
        result.subscribe(function (res) { return _this.onSaveSuccess(res.body); }, function (res) {
            _this.appLoaderService.close();
            _this.onSaveError();
            _this.onError(res.message);
        });
    };
    LaboratoryEditComponent.prototype.onSaveSuccess = function (result) {
        this.appLoaderService.close();
        this.isSaving = false;
        this.notification.showInfo('Laboratory request successfully saved');
        this.previousState();
    };
    LaboratoryEditComponent.prototype.onSaveError = function () {
        this.isSaving = false;
        this.error = true;
        this.notification.showError('Error saving laboratory request');
    };
    LaboratoryEditComponent.prototype.onError = function (errorMessage) {
        this.isSaving = false;
        this.notification.showError(errorMessage);
    };
    LaboratoryEditComponent.ctorParameters = function () { return [
        { type: LaboratoryService },
        { type: NotificationService },
        { type: AppLoaderService },
        { type: TdDialogService },
        { type: ActivatedRoute }
    ]; };
    tslib_1.__decorate([
        ViewChild(MatProgressBar, { static: true }),
        tslib_1.__metadata("design:type", MatProgressBar)
    ], LaboratoryEditComponent.prototype, "progressBar", void 0);
    tslib_1.__decorate([
        ViewChild(MatButton, { static: true }),
        tslib_1.__metadata("design:type", MatButton)
    ], LaboratoryEditComponent.prototype, "submitButton", void 0);
    LaboratoryEditComponent = tslib_1.__decorate([
        Component({
            selector: 'lamis-laboratory-edit',
            template: "<div class=\"lamis-edit-form\">\n    <div class=\"lamis-edit-form-container\">\n        <form name=\"form\" role=\"form\" novalidate (ngSubmit)=\"save()\" #laboratoryForm=\"ngForm\">\n            <mat-card class=\"default\">\n                <mat-card-header>\n                </mat-card-header>\n                <mat-card-content *ngIf=\"patient\">\n                    <div>\n                        <mat-form-field class=\"full-width\" *ngIf=\"entity && dateRegistration\">\n                            <input matInput [matDatepicker]=\"picker\"\n                                   placeholder=\"Date of Sample Collection\"\n                                   [(ngModel)]=\"entity.dateSampleCollected\"\n                                   #dateCollected=\"ngModel\"\n                                   (dateChange)=\"sampleDateChanged($event.value)\"\n                                   [max]=\"today\"\n                                   [min]=\"dateRegistration\"\n                                   required\n                                   name=\"dateCollected\">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                            <mat-error\n                                    *ngIf=\"dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.required)\">\n                                Date of Sample Collection is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.min)\">\n                                Date of Sample Collection cannot be\n                                before {{entity.patient.dateRegistration | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.max)\">\n                                Date of Sample Collection cannot be in the future\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class=\"full-width\">\n                            <input matInput [(ngModel)]=\"entity.labNo\"\n                                   placeholder=\"Laboratory Number\"\n                                   #labNo=\"ngModel\" required name=\"labNo\"/>\n                            <mat-error\n                                    *ngIf=\"labNo.errors && (labNo.dirty || labNo.touched) && (labNo.errors.required)\">\n                                Lab Number is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"minAssayDate\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput [matDatepicker]=\"picker1\"\n                                   placeholder=\"Date Assay\"\n                                   [(ngModel)]=\"entity.dateAssay\"\n                                   [matDatepickerFilter]=\"filterDates.bind(this)\"\n                                   (dateChange)=\"assayDateChanged($event.value)\"\n                                   #dateAssay=\"ngModel\"\n                                   [min]=\"minAssayDate\"\n                                   [max]=\"today\"\n                                   name=\"dateAssay\">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker1\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker1></mat-datepicker>\n                            <mat-error\n                                    *ngIf=\"dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.required)\">\n                                Date Assay is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.max)\">\n                                Date Assay must be after {{today | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.min)\">\n                                Date Assay must be after {{minAssayDate}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"minReportedDate\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput [matDatepicker]=\"picker2\"\n                                   placeholder=\"Date Result Received\"\n                                   [(ngModel)]=\"entity.dateResultReceived\"\n                                   [matDatepickerFilter]=\"filterDates.bind(this)\"\n                                   #dateReported=\"ngModel\"\n                                   [min]=\"minReportedDate\"\n                                   [max]=\"today\"\n                                   [required]=\"!!entity.dateAssay\"\n                                   name=\"dateReported\">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker2\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker2></mat-datepicker>\n                            <mat-error\n                                    *ngIf=\"dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.required)\">\n                                Date Result Received is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.max)\">\n                                Date Result Received must be after {{today | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.min)\">\n                                Date Result Received must not be before {{minReportedDate | date : 'dd MMM, yyyy'}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"Laboratory Test Category\"\n                                            (selectionChange)=\"categoryChanged($event.value)\">\n                                    <mat-option></mat-option>\n                                    <mat-option *ngFor=\"let category of categories\"\n                                                [value]=\"category\">{{category.category}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"Laboratory Test\"\n                                            multiple\n                                            name=\"regimen\"\n                                            [(ngModel)]=\"selectedTests\"\n                                            [compareWith]=\"entityCompare\"\n                                            (selectionChange)=\"testChanged($event.value)\">\n                                    <mat-option *ngFor=\"let test of tests\"\n                                                [value]=\"test\">{{test.description}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        Selected Test\n                        <mat-divider></mat-divider>\n                        <ngx-datatable\n                            #mydatatable\n                            class=\"material full-width\"\n                            [headerHeight]=\"50\"\n                            [limit]=\"5\"\n                            [columnMode]=\"ColumnMode.force\"\n                            [footerHeight]=\"50\"\n                            rowHeight=\"auto\"\n                            [rows]=\"rows\"\n                        >\n                            <ngx-datatable-column name=\"Test Description\" [prop]=\"'description'\"\n                                                  [canAutoResize]=\"true\">\n                                <ng-template ngx-datatable-cell-template let-value=\"value\">\n                                    <mat-form-field class=\"full-width\">\n                                        <input matInput disabled [value]=\"value\" style=\"font-weight: 900\">\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"Result\" [prop]=\"'result'\" [canAutoResize]=\"true\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <!--<mat-form-field *ngIf=\"!editing[rowIndex + '']\" class=\"full-width\">\n                                        <input matInput [value]=\"value\" disabled>\n                                    </mat-form-field>\n                                    <mat-form-field *ngIf=\"editing[rowIndex + '']\">-->\n                                    <mat-form-field class=\"full-width\">\n                                        <input\n                                                autofocus\n                                                matInput\n                                                type=\"text\"\n                                                name=\"result\"\n                                                [required]=\"!!entity.dateAssay\"\n                                                (blur)=\"updateValue($event, 'result', rowIndex)\"\n                                                [value]=\"value || ''\"\n                                        >\n                                        <span matSuffix>&nbsp;{{row.unit}}</span>\n                                        <mat-error *ngIf=\"errors[rowIndex + '-result']\">\n                                            Result value is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column [maxWidth]=\"1\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"Comment\" [prop]=\"'comment'\" [canAutoResize]=\"true\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <!--<mat-form-field *ngIf=\"!editing[rowIndex + '']\" class=\"full-width\">\n                                        <textarea matInput [value]=\"value\" disabled rows=\"2\"></textarea>\n                                    </mat-form-field>\n                                    <mat-form-field *ngIf=\"editing[rowIndex + '']\">-->\n                                    <mat-form-field class=\"full-width\">\n                                        <textarea\n                                                autofocus\n                                                matInput\n                                                rows=\"2\"\n                                                (blur)=\"updateValue($event, 'comment', rowIndex)\"\n                                                [value]=\"value\"\n                                        ></textarea>\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"Indication\" [canAutoResize]=\"true\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <!--<mat-form-field *ngIf=\"!editing[rowIndex + '']\" class=\"full-width\">\n                                        <input matInput [value]=\"value\" disabled>\n                                    </mat-form-field>\n                                    <mat-form-field *ngIf=\"editing[rowIndex + '']\">-->\n                                    <mat-form-field class=\"full-width\">\n                                        <mat-select autofocus\n                                                    [value]=\"value\"\n                                                    [required]=\"row.lab_test_id === 16\"\n                                                    name=\"ind\"\n                                                    (valueChange)=\"updateValue($event, 'indication', rowIndex)\">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]=\"'Routine Monitoring'\">Routine Monitoring</mat-option>\n                                            <mat-option [value]=\"'Targeted Monitoring'\">Targeted Monitoring</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"errors[rowIndex + '-indication']\">\n                                            Viral Load indication is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <!--<ngx-datatable-column name=\"Action\" prop=\"id\" [canAutoResize]=\"true\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <button type=\"button\" mat-icon-button\n                                            *ngIf=\"!editing[rowIndex + '']\"\n                                            (click)=\"edit(rowIndex)\"\n                                            (mouseenter)=\"edit(rowIndex)\"\n                                            title=\"Click to edit\">\n                                        <mat-icon>edit</mat-icon>\n                                    </button>\n                                    <button type=\"button\" mat-icon-button\n                                            *ngIf=\"editing[rowIndex + '']\"\n                                            (dblclick)=\"editing[rowIndex + ''] = false\"\n                                            title=\"Click to save\">\n                                        <mat-icon>save</mat-icon>\n                                    </button>\n                                </ng-template>\n                            </ngx-datatable-column>-->\n                        </ngx-datatable>\n                    </div>\n                    <mat-divider></mat-divider>\n                </mat-card-content>\n                <mat-card-actions class=\"lamis-edit-form-actions\">\n                    <button mat-raised-button type=\"button\" (click)=\"previousState()\">Back</button>\n                    <button mat-raised-button color='primary'\n                            [disabled]=\"laboratoryForm.invalid || rows.length === 0 || isSaving\"\n                            type=\"submit\">\n                        {{entity.id !== undefined ? 'Update' : 'Save'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n"
        }),
        tslib_1.__metadata("design:paramtypes", [LaboratoryService,
            NotificationService,
            AppLoaderService,
            TdDialogService,
            ActivatedRoute])
    ], LaboratoryEditComponent);
    return LaboratoryEditComponent;
}());
export { LaboratoryEditComponent };
//# sourceMappingURL=data:application/json;base64,