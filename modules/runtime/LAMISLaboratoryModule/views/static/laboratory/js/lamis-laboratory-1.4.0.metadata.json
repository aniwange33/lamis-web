{"__symbolic":"module","version":4,"metadata":{"Patient":{"__symbolic":"interface"},"LabTestCategory":{"__symbolic":"interface"},"LabTest":{"__symbolic":"interface"},"LaboratoryLine":{"__symbolic":"interface"},"Laboratory":{"__symbolic":"interface"},"LaboratoryService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":14,"character":1},"arguments":[{"providedIn":"root"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":18,"character":45},"arguments":[{"__symbolic":"reference","module":"@lamis/web-core","name":"SERVER_API_URL_CONFIG","line":18,"character":52}]}]],"parameters":[{"__symbolic":"reference","module":"@angular/common/http","name":"HttpClient","line":18,"character":32},{"__symbolic":"reference","module":"@lamis/web-core","name":"ServerApiUrlConfig","line":18,"character":94}]}],"create":[{"__symbolic":"method"}],"update":[{"__symbolic":"method"}],"find":[{"__symbolic":"method"}],"findByUuid":[{"__symbolic":"method"}],"delete":[{"__symbolic":"method"}],"getPatient":[{"__symbolic":"method"}],"getVisitDatesByPatient":[{"__symbolic":"method"}],"laboratoryCategories":[{"__symbolic":"method"}],"getLinesByLaboratory":[{"__symbolic":"method"}],"labTestsByCategory":[{"__symbolic":"method"}],"getLabTestById":[{"__symbolic":"method"}],"latestVisit":[{"__symbolic":"method"}],"convertDateFromClient":[{"__symbolic":"method"}],"convertDateFromServer":[{"__symbolic":"method"}],"convertDateArrayFromServer":[{"__symbolic":"method"}]},"statics":{"ngInjectableDef":{}}},"LaboratoryModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":23,"character":1},"arguments":[{"declarations":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵb"}],"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule","line":29,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatInputModule","line":30,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatIconModule","line":31,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatCardModule","line":32,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatSelectModule","line":33,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatButtonModule","line":34,"character":8},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/router","name":"RouterModule","line":35,"character":8},"member":"forChild"},"arguments":[{"__symbolic":"reference","name":"ɵd"}]},{"__symbolic":"reference","module":"@angular/material","name":"MatProgressBarModule","line":36,"character":8},{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule","line":37,"character":8},{"__symbolic":"reference","module":"@covalent/core","name":"CovalentMessageModule","line":38,"character":8},{"__symbolic":"reference","module":"@covalent/core","name":"CovalentDialogsModule","line":39,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatTableModule","line":40,"character":8},{"__symbolic":"reference","module":"@angular/material","name":"MatListModule","line":41,"character":8},{"__symbolic":"reference","module":"@alfresco/adf-core","name":"CoreModule","line":42,"character":8},{"__symbolic":"reference","module":"@swimlane/ngx-datatable","name":"NgxDatatableModule","line":43,"character":8},{"__symbolic":"reference","module":"@angular/forms","name":"ReactiveFormsModule","line":44,"character":8},{"__symbolic":"reference","module":"@lamis/web-core","name":"MatDateFormatModule","line":45,"character":8},{"__symbolic":"reference","module":"ng2-validation","name":"CustomFormsModule","line":46,"character":8}],"exports":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵb"}],"entryComponents":[],"providers":[{"__symbolic":"reference","name":"ɵc"}]}]}],"members":{}},"ɵa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":14,"character":1},"arguments":[{"selector":"lamis-laboratory","template":"<div class=\"lamis-edit-form\">\n    <div class=\"lamis-edit-form-container\">\n        <mat-card>\n            <mat-card-header>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-card-view [properties]=\"properties\" editable=\"false\"></adf-card-view>\n                <mat-divider></mat-divider>\n                <ngx-datatable\n                    #mydatatable\n                    *ngIf=\"dataSource\"\n                    class=\"material full-width\"\n                    [headerHeight]=\"50\"\n                    [limit]=\"5\"\n                    [columnMode]=\"ColumnMode.force\"\n                    [footerHeight]=\"50\"\n                    rowHeight=\"auto\"\n                    [rows]=\"dataSource\"\n                >\n                    <ngx-datatable-column name=\"Test Description\" [prop]=\"'description'\"\n                                          [canAutoResize]=\"true\">\n                        <ng-template ngx-datatable-cell-template let-value=\"value\">\n                            <mat-form-field class=\"full-width\">\n                                <input matInput disabled [value]=\"value\" style=\"font-weight: 900\">\n                            </mat-form-field>\n                        </ng-template>\n                    </ngx-datatable-column>\n                    <ngx-datatable-column name=\"Result\" [prop]=\"'result'\" [canAutoResize]=\"true\">\n                        <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                     let-row=\"row\">\n                            <mat-form-field class=\"full-width\">\n                                <input matInput disabled [value]=\"value\" style=\"font-weight: 900\">\n                            </mat-form-field>\n                        </ng-template>\n                    </ngx-datatable-column>\n                    <ngx-datatable-column name=\"Comment\" [prop]=\"'comment'\" [canAutoResize]=\"true\">\n                        <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                     let-row=\"row\">\n                            <mat-form-field class=\"full-width\">\n                                <input matInput disabled [value]=\"value\" style=\"font-weight: 900\">\n                            </mat-form-field>\n                        </ng-template>\n                    </ngx-datatable-column>\n                    <ngx-datatable-column name=\"Indication\" [prop]=\"'indication'\" [canAutoResize]=\"true\">\n                        <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                     let-row=\"row\">\n                            <mat-form-field class=\"full-width\">\n                                <input matInput disabled [value]=\"value\" style=\"font-weight: 900\">\n                            </mat-form-field>\n                        </ng-template>\n                    </ngx-datatable-column>\n                </ngx-datatable>\n            </mat-card-content>\n            <mat-card-actions class=\"lamis-edit-form-actions\">\n                <button mat-button (click)=\"previousState()\">Back</button>\n                <button mat-raised-button color=\"warn\" (click)=\"delete()\">Delete</button>\n                <button mat-raised-button color=\"primary\" (click)=\"edit()\">Edit</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/router","name":"Router","line":24,"character":32},{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":24,"character":55},{"__symbolic":"reference","name":"LaboratoryService"},{"__symbolic":"reference","module":"@angular/core","name":"ComponentFactoryResolver","line":25,"character":29},{"__symbolic":"reference","module":"@covalent/core","name":"TdDialogService","line":25,"character":79},{"__symbolic":"reference","module":"@alfresco/adf-core","name":"NotificationService","line":26,"character":45},{"__symbolic":"reference","module":"@alfresco/adf-core","name":"CardViewUpdateService","line":27,"character":39}]}],"ngOnInit":[{"__symbolic":"method"}],"edit":[{"__symbolic":"method"}],"delete":[{"__symbolic":"method"}],"buildProperties":[{"__symbolic":"method"}],"previousState":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}]}},"ɵb":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":16,"character":1},"arguments":[{"selector":"lamis-laboratory-edit","template":"<div class=\"lamis-edit-form\">\n    <div class=\"lamis-edit-form-container\">\n        <form name=\"form\" role=\"form\" novalidate (ngSubmit)=\"save()\" #laboratoryForm=\"ngForm\">\n            <mat-card class=\"default\">\n                <mat-card-header>\n                </mat-card-header>\n                <mat-card-content *ngIf=\"patient\">\n                    <div>\n                        <mat-form-field class=\"full-width\" *ngIf=\"entity && dateRegistration\">\n                            <input matInput [matDatepicker]=\"picker\"\n                                   placeholder=\"Date of Sample Collection\"\n                                   [(ngModel)]=\"entity.dateSampleCollected\"\n                                   #dateCollected=\"ngModel\"\n                                   (dateChange)=\"sampleDateChanged($event.value)\"\n                                   [max]=\"today\"\n                                   [min]=\"dateRegistration\"\n                                   required\n                                   name=\"dateCollected\">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                            <mat-error\n                                    *ngIf=\"dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.required)\">\n                                Date of Sample Collection is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.min)\">\n                                Date of Sample Collection cannot be\n                                before {{entity.patient.dateRegistration | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateCollected.errors && (dateCollected.dirty || dateCollected.touched) && (dateCollected.errors.max)\">\n                                Date of Sample Collection cannot be in the future\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class=\"full-width\">\n                            <input matInput [(ngModel)]=\"entity.labNo\"\n                                   placeholder=\"Laboratory Number\"\n                                   #labNo=\"ngModel\" required name=\"labNo\"/>\n                            <mat-error\n                                    *ngIf=\"labNo.errors && (labNo.dirty || labNo.touched) && (labNo.errors.required)\">\n                                Lab Number is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"minAssayDate\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput [matDatepicker]=\"picker1\"\n                                   placeholder=\"Date Assay\"\n                                   [(ngModel)]=\"entity.dateAssay\"\n                                   [matDatepickerFilter]=\"filterDates.bind(this)\"\n                                   (dateChange)=\"assayDateChanged($event.value)\"\n                                   #dateAssay=\"ngModel\"\n                                   [min]=\"minAssayDate\"\n                                   [max]=\"today\"\n                                   name=\"dateAssay\">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker1\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker1></mat-datepicker>\n                            <mat-error\n                                    *ngIf=\"dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.required)\">\n                                Date Assay is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.max)\">\n                                Date Assay must be after {{today | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateAssay.errors && (dateAssay.dirty || dateAssay.touched) && (dateAssay.errors.min)\">\n                                Date Assay must be after {{minAssayDate}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"minReportedDate\">\n                        <mat-form-field class=\"full-width\">\n                            <input matInput [matDatepicker]=\"picker2\"\n                                   placeholder=\"Date Result Received\"\n                                   [(ngModel)]=\"entity.dateResultReceived\"\n                                   [matDatepickerFilter]=\"filterDates.bind(this)\"\n                                   #dateReported=\"ngModel\"\n                                   [min]=\"minReportedDate\"\n                                   [max]=\"today\"\n                                   [required]=\"!!entity.dateAssay\"\n                                   name=\"dateReported\">\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker2\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker2></mat-datepicker>\n                            <mat-error\n                                    *ngIf=\"dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.required)\">\n                                Date Result Received is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.max)\">\n                                Date Result Received must be after {{today | date: 'dd MMM, yyyy'}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf=\"dateReported.errors && (dateReported.dirty || dateReported.touched) && (dateReported.errors.min)\">\n                                Date Result Received must not be before {{minReportedDate | date : 'dd MMM, yyyy'}}\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"Laboratory Test Category\"\n                                            (selectionChange)=\"categoryChanged($event.value)\">\n                                    <mat-option></mat-option>\n                                    <mat-option *ngFor=\"let category of categories\"\n                                                [value]=\"category\">{{category.category}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"Laboratory Test\"\n                                            multiple\n                                            name=\"regimen\"\n                                            [(ngModel)]=\"selectedTests\"\n                                            [compareWith]=\"entityCompare\"\n                                            (selectionChange)=\"testChanged($event.value)\">\n                                    <mat-option *ngFor=\"let test of tests\"\n                                                [value]=\"test\">{{test.description}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        Selected Test\n                        <mat-divider></mat-divider>\n                        <ngx-datatable\n                            #mydatatable\n                            class=\"material full-width\"\n                            [headerHeight]=\"50\"\n                            [limit]=\"5\"\n                            [columnMode]=\"ColumnMode.force\"\n                            [footerHeight]=\"50\"\n                            rowHeight=\"auto\"\n                            [rows]=\"rows\"\n                        >\n                            <ngx-datatable-column name=\"Test Description\" [prop]=\"'description'\"\n                                                  [canAutoResize]=\"true\">\n                                <ng-template ngx-datatable-cell-template let-value=\"value\">\n                                    <mat-form-field class=\"full-width\">\n                                        <input matInput disabled [value]=\"value\" style=\"font-weight: 900\">\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"Result\" [prop]=\"'result'\" [canAutoResize]=\"true\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <!--<mat-form-field *ngIf=\"!editing[rowIndex + '']\" class=\"full-width\">\n                                        <input matInput [value]=\"value\" disabled>\n                                    </mat-form-field>\n                                    <mat-form-field *ngIf=\"editing[rowIndex + '']\">-->\n                                    <mat-form-field class=\"full-width\">\n                                        <input\n                                                autofocus\n                                                matInput\n                                                type=\"text\"\n                                                name=\"result\"\n                                                [required]=\"!!entity.dateAssay\"\n                                                (blur)=\"updateValue($event, 'result', rowIndex)\"\n                                                [value]=\"value || ''\"\n                                        >\n                                        <span matSuffix>&nbsp;{{row.unit}}</span>\n                                        <mat-error *ngIf=\"errors[rowIndex + '-result']\">\n                                            Result value is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column [maxWidth]=\"1\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"Comment\" [prop]=\"'comment'\" [canAutoResize]=\"true\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <!--<mat-form-field *ngIf=\"!editing[rowIndex + '']\" class=\"full-width\">\n                                        <textarea matInput [value]=\"value\" disabled rows=\"2\"></textarea>\n                                    </mat-form-field>\n                                    <mat-form-field *ngIf=\"editing[rowIndex + '']\">-->\n                                    <mat-form-field class=\"full-width\">\n                                        <textarea\n                                                autofocus\n                                                matInput\n                                                rows=\"2\"\n                                                (blur)=\"updateValue($event, 'comment', rowIndex)\"\n                                                [value]=\"value\"\n                                        ></textarea>\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <ngx-datatable-column name=\"Indication\" [canAutoResize]=\"true\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <!--<mat-form-field *ngIf=\"!editing[rowIndex + '']\" class=\"full-width\">\n                                        <input matInput [value]=\"value\" disabled>\n                                    </mat-form-field>\n                                    <mat-form-field *ngIf=\"editing[rowIndex + '']\">-->\n                                    <mat-form-field class=\"full-width\">\n                                        <mat-select autofocus\n                                                    [value]=\"value\"\n                                                    [required]=\"row.lab_test_id === 16\"\n                                                    name=\"ind\"\n                                                    (valueChange)=\"updateValue($event, 'indication', rowIndex)\">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]=\"'Routine Monitoring'\">Routine Monitoring</mat-option>\n                                            <mat-option [value]=\"'Targeted Monitoring'\">Targeted Monitoring</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"errors[rowIndex + '-indication']\">\n                                            Viral Load indication is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </ng-template>\n                            </ngx-datatable-column>\n                            <!--<ngx-datatable-column name=\"Action\" prop=\"id\" [canAutoResize]=\"true\">\n                                <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\"\n                                             let-row=\"row\">\n                                    <button type=\"button\" mat-icon-button\n                                            *ngIf=\"!editing[rowIndex + '']\"\n                                            (click)=\"edit(rowIndex)\"\n                                            (mouseenter)=\"edit(rowIndex)\"\n                                            title=\"Click to edit\">\n                                        <mat-icon>edit</mat-icon>\n                                    </button>\n                                    <button type=\"button\" mat-icon-button\n                                            *ngIf=\"editing[rowIndex + '']\"\n                                            (dblclick)=\"editing[rowIndex + ''] = false\"\n                                            title=\"Click to save\">\n                                        <mat-icon>save</mat-icon>\n                                    </button>\n                                </ng-template>\n                            </ngx-datatable-column>-->\n                        </ngx-datatable>\n                    </div>\n                    <mat-divider></mat-divider>\n                </mat-card-content>\n                <mat-card-actions class=\"lamis-edit-form-actions\">\n                    <button mat-raised-button type=\"button\" (click)=\"previousState()\">Back</button>\n                    <button mat-raised-button color='primary'\n                            [disabled]=\"laboratoryForm.invalid || rows.length === 0 || isSaving\"\n                            type=\"submit\">\n                        {{entity.id !== undefined ? 'Update' : 'Save'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n"}]}],"members":{"progressBar":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":21,"character":5},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MatProgressBar","line":21,"character":15},{"static":true}]}]}],"submitButton":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":22,"character":5},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MatButton","line":22,"character":15},{"static":true}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"LaboratoryService"},{"__symbolic":"reference","module":"@alfresco/adf-core","name":"NotificationService","line":44,"character":40},{"__symbolic":"reference","module":"@lamis/web-core","name":"AppLoaderService","line":45,"character":42},{"__symbolic":"reference","module":"@covalent/core","name":"TdDialogService","line":46,"character":40},{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":47,"character":42}]}],"createEntity":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"updateMinDates":[{"__symbolic":"method"}],"filterDates":[{"__symbolic":"method"}],"previousState":[{"__symbolic":"method"}],"entityCompare":[{"__symbolic":"method"}],"sampleDateChanged":[{"__symbolic":"method"}],"assayDateChanged":[{"__symbolic":"method"}],"edit":[{"__symbolic":"method"}],"save":[{"__symbolic":"method"}],"categoryChanged":[{"__symbolic":"method"}],"testChanged":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}],"subscribeToSaveResponse":[{"__symbolic":"method"}],"onSaveSuccess":[{"__symbolic":"method"}],"onSaveError":[{"__symbolic":"method"}],"onError":[{"__symbolic":"method"}]}},"ɵc":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":10,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"LaboratoryService"}]}],"resolve":[{"__symbolic":"method"}]}},"ɵd":[{"path":"","data":{"title":"Laboratory Request","breadcrumb":"LABORATORY REQUEST"},"children":[{"path":":id/patient/:patientId/view","component":{"__symbolic":"reference","name":"ɵa"},"resolve":{"entity":{"__symbolic":"reference","name":"ɵc"}},"data":{"authorities":["ROLE_USER"],"title":"Laboratory Request","breadcrumb":"LABORATORY REQUEST"}},{"path":"patient/:patientId/new","component":{"__symbolic":"reference","name":"ɵb"},"data":{"authorities":["ROLE_DEC"],"title":"LABORATORY REQUEST","breadcrumb":"ADD LABORATORY REQUEST"}},{"path":":id/patient/:patientId/edit","component":{"__symbolic":"reference","name":"ɵb"},"resolve":{"entity":{"__symbolic":"reference","name":"ɵc"}},"data":{"authorities":["ROLE_DEC"],"title":"Laboratory Request Edit","breadcrumb":"LABORATORY REQUEST EDIT"}}]}]},"origins":{"Patient":"./lib/model/laboratory.model","LabTestCategory":"./lib/model/laboratory.model","LabTest":"./lib/model/laboratory.model","LaboratoryLine":"./lib/model/laboratory.model","Laboratory":"./lib/model/laboratory.model","LaboratoryService":"./lib/services/laboratory.service","LaboratoryModule":"./lib/laboratory.module","ɵa":"./lib/components/laboratory-details.component","ɵb":"./lib/components/laboratory-edit.component","ɵc":"./lib/services/laboratory.route","ɵd":"./lib/services/laboratory.route"},"importAs":"lamis-laboratory-1.4.0"}