import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { AuthServerProvider, createRequestOption, DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';
import { map, share } from 'rxjs/operators';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";
var moment = moment_;
var PatientService = /** @class */ (function () {
    function PatientService(http, serverUrl, authServerProvider) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.authServerProvider = authServerProvider;
        this.resourceUrl = '';
        this.resourceSearchUrl = '';
        this.ovcResourceUrl = '';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/patients';
        this.resourceSearchUrl = serverUrl.SERVER_API_URL + '/api/_search/patients';
        this.ovcResourceUrl = serverUrl.SERVER_API_URL + '/api/ovcs';
    }
    PatientService_1 = PatientService;
    PatientService.prototype.create = function (data) {
        var _this = this;
        var patient = this.convertDateFromClient(data);
        return this.http
            .post(this.resourceUrl, patient, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }));
    };
    PatientService.prototype.update = function (data) {
        var _this = this;
        var patient = this.convertDateFromClient(data);
        return this.http
            .put(this.resourceUrl, patient, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }), share());
    };
    PatientService.prototype.find = function (id) {
        var _this = this;
        return this.http
            .get(this.resourceUrl + "/" + id, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }));
    };
    PatientService.prototype.findByUuid = function (id) {
        var _this = this;
        return this.http
            .get(this.resourceUrl + "/by-uuid/" + id, { observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateFromServer(res); }));
    };
    PatientService.prototype.query = function (req) {
        var _this = this;
        var options = createRequestOption(req);
        return this.http
            .get(this.resourceUrl, { params: options, observe: 'response' })
            .pipe(map(function (res) { return _this.convertDateArrayFromServer(res); }));
    };
    PatientService.prototype.delete = function (id) {
        return this.http.delete(this.resourceUrl + "/" + id, { observe: 'response' });
    };
    PatientService.prototype.getOVCByPatient = function (id) {
        return this.http.get(this.ovcResourceUrl + "/patient/" + id);
    };
    PatientService.prototype.widgets = function (patientId) {
        return this.http.get(this.resourceUrl + "/" + patientId + "/widgets", { observe: 'body' });
    };
    PatientService.prototype.observations = function (patientId) {
        return this.http.get(this.resourceUrl + "/" + patientId + "/observations", {
            observe: 'body'
        });
    };
    PatientService.prototype.activities = function (patientId, detailed) {
        return this.http.get(this.resourceUrl + "/" + patientId + "/activities?full=" + detailed, { observe: 'body' })
            .pipe(map(function (res) {
            res.sort(function (t1, t2) {
                var d1 = moment(t1.date, 'DD MMM, YYYY');
                var d2 = moment(t2.date, 'DD MMM, YYYY');
                return d2.diff(d1);
            });
            return res;
        }));
    };
    PatientService.prototype.getActiveFacility = function () {
        return this.http.get('/api/facilities/active');
    };
    PatientService.prototype.getAllFacility = function () {
        return this.http.get('/api/facilities');
    };
    PatientService.prototype.getStates = function () {
        return this.http.get('/api/states');
    };
    PatientService.prototype.getLgasByState = function (id) {
        return this.http.get("/api/provinces/state/" + id);
    };
    PatientService.prototype.getStateByLga = function (id) {
        return this.http.get("/api/provinces/" + id + "/state");
    };
    PatientService.prototype.getFacility = function (id) {
        return this.http.get("/api/facilities/" + id);
    };
    PatientService.prototype.existsByHospitalNumber = function (hospitalNum) {
        return this.http.post(this.resourceUrl + "/exists/hospital-number", { number: hospitalNum })
            .pipe(map((function (res) { return res ? { 'numberExists': true } : null; })));
    };
    PatientService.prototype.getStatusDatesByPatient = function (patientId) {
        return this.http.get("/api/client-statuses/patient/" + patientId + "/status-dates")
            .pipe(map(function (res) {
            res.forEach(function (d) { return moment(d); });
            return res;
        }));
    };
    PatientService.prototype.getSummaryForPatient = function (id) {
        return this.http.get(this.resourceUrl + "/" + id + "/summary");
    };
    PatientService.prototype.saveClientStatus = function (status) {
        console.log('Status', status);
        var copy = PatientService_1.convertStatusFromClient(status);
        console.log('Copy', copy);
        return this.http.post('/api/client-statuses', copy, { observe: 'response' });
    };
    PatientService.prototype.updateClientStatus = function (status) {
        var copy = PatientService_1.convertStatusFromClient(status);
        return this.http.put('/api/client-statuses', copy, { observe: 'response' });
    };
    PatientService.prototype.findClientStatus = function (id) {
        return this.http.get("/api/client-statuses/by-uuid/" + id, { observe: 'response' })
            .pipe(map(function (res) {
            res.body.dateTracked = res.body.dateTracked != null ? moment(res.body.dateTracked) : null;
            res.body.dateStatus = res.body.dateStatus != null ? moment(res.body.dateStatus) : null;
            res.body.agreedDate = res.body.agreedDate != null ? moment(res.body.agreedDate) : null;
            return res;
        }));
    };
    PatientService.prototype.currentClientStatus = function (patientId) {
        return this.http.get("/api/client-statuses/patient/" + patientId + "/current", { responseType: 'text' });
    };
    PatientService.prototype.getStatusName = function (id) {
        return this.http.get("/api/client-statuses/" + id + "/name", { responseType: 'text' });
    };
    PatientService.convertStatusFromClient = function (status) {
        var copy = Object.assign({}, status, {
            dateStatus: status.dateStatus != null && status.dateStatus.isValid() ? status.dateStatus.format(DATE_FORMAT) : null,
            agreedDate: status.agreedDate != null && status.agreedDate.isValid() ? status.agreedDate.format(DATE_FORMAT) : null,
            dateTracked: status.dateTracked != null && status.dateTracked.isValid() ? status.dateTracked.format(DATE_FORMAT) : null,
        });
        return copy;
    };
    PatientService.prototype.convertDateFromClient = function (patient) {
        var copy = Object.assign({}, patient, {
            dateBirth: patient.dateBirth != null && patient.dateBirth.isValid() ? patient.dateBirth.format(DATE_FORMAT) : null,
            dateRegistration: patient.dateRegistration != null && patient.dateRegistration.isValid() ? patient.dateRegistration.format(DATE_FORMAT) : null,
            dateStarted: patient.dateStarted != null && patient.dateStarted.isValid() ? patient.dateStarted.format(DATE_FORMAT) : null,
            dateConfirmedHiv: patient.dateConfirmedHiv != null && patient.dateConfirmedHiv.isValid() ? patient.dateConfirmedHiv.format(DATE_FORMAT) : null,
            dateEnrolledPMTCT: patient.dateEnrolledPMTCT != null && patient.dateEnrolledPMTCT.isValid() ? patient.dateEnrolledPMTCT.format(DATE_FORMAT) : null,
            pregnant: patient.pregnancyStatus === 2,
            breastfeeding: patient.pregnancyStatus === 3
        });
        return copy;
    };
    PatientService.prototype.convertDateFromServer = function (res) {
        if (res.body) {
            res.body.name = res.body.surname + ', ' + res.body.otherNames;
            res.body.dateBirth = res.body.dateBirth != null ? moment(res.body.dateBirth) : null;
            res.body.dateRegistration = res.body.dateRegistration != null ? moment(res.body.dateRegistration) : null;
            res.body.dateConfirmedHiv = res.body.dateConfirmedHiv != null ? moment(res.body.dateConfirmedHiv) : null;
            res.body.dateEnrolledPMTCT = res.body.dateEnrolledPMTCT != null ? moment(res.body.dateEnrolledPMTCT) : null;
            res.body.dateStarted = res.body.dateStarted != null ? moment(res.body.dateStarted) : null;
            res.body.pregnancyStatus = res.body.pregnant != null && res.body.pregnant ? 2 : res.body.gender === 'FEMALE' ? 1 : null;
            res.body.pregnancyStatus = res.body.breastfeeding != null && res.body.breastfeeding ? 3 : res.body.gender === 'FEMALE' ? 1 : null;
        }
        return res;
    };
    PatientService.prototype.convertDateArrayFromServer = function (res) {
        if (res.body) {
            res.body.forEach(function (patient) {
                patient.name = patient.surname + ', ' + patient.otherNames;
                patient.dateBirth = patient.dateBirth != null ? moment(patient.dateBirth) : null;
                patient.dateRegistration = patient.dateRegistration != null ? moment(patient.dateRegistration) : null;
                patient.dateStarted = patient.dateStarted != null ? moment(patient.dateStarted) : null;
            });
        }
        return res;
    };
    var PatientService_1;
    PatientService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: undefined, decorators: [{ type: Inject, args: [SERVER_API_URL_CONFIG,] }] },
        { type: AuthServerProvider }
    ]; };
    PatientService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PatientService_Factory() { return new PatientService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG), i0.ɵɵinject(i2.AuthServerProvider)); }, token: PatientService, providedIn: "root" });
    PatientService = PatientService_1 = tslib_1.__decorate([
        Injectable({ providedIn: 'root' }),
        tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
        tslib_1.__metadata("design:paramtypes", [HttpClient, Object, AuthServerProvider])
    ], PatientService);
    return PatientService;
}());
export { PatientService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aWVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbGFtaXMtcGF0aWVudC0xLjQuMS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9wYXRpZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxVQUFVLEVBQUUsWUFBWSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFOUQsT0FBTyxFQUNILGtCQUFrQixFQUNsQixtQkFBbUIsRUFDbkIsV0FBVyxFQUNYLHFCQUFxQixFQUNyQixrQkFBa0IsRUFDckIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRzFDLE9BQU8sS0FBSyxPQUFPLE1BQU0sUUFBUSxDQUFDOzs7O0FBTWxDLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQztBQW9DdkI7SUFLSSx3QkFBc0IsSUFBZ0IsRUFBeUMsU0FBNkIsRUFDeEYsa0JBQXNDO1FBRHBDLFNBQUksR0FBSixJQUFJLENBQVk7UUFBeUMsY0FBUyxHQUFULFNBQVMsQ0FBb0I7UUFDeEYsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUxuRCxnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUNqQixzQkFBaUIsR0FBRyxFQUFFLENBQUM7UUFDdEIsbUJBQWMsR0FBRyxFQUFFLENBQUM7UUFJeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUMsY0FBYyxHQUFHLGVBQWUsQ0FBQztRQUM5RCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDLGNBQWMsR0FBRyx1QkFBdUIsQ0FBQztRQUM1RSxJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUFDO0lBQ2pFLENBQUM7dUJBVlEsY0FBYztJQVl2QiwrQkFBTSxHQUFO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QUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwQ2xpZW50LCBIdHRwUmVzcG9uc2V9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICAgIEF1dGhTZXJ2ZXJQcm92aWRlcixcbiAgICBjcmVhdGVSZXF1ZXN0T3B0aW9uLFxuICAgIERBVEVfRk9STUFULFxuICAgIFNFUlZFUl9BUElfVVJMX0NPTkZJRyxcbiAgICBTZXJ2ZXJBcGlVcmxDb25maWdcbn0gZnJvbSAnQGxhbWlzL3dlYi1jb3JlJztcbmltcG9ydCB7bWFwLCBzaGFyZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtPVkMsIFBhdGllbnQsIFN0YXR1c0hpc3Rvcnl9IGZyb20gJy4uL21vZGVsL3BhdGllbnQubW9kZWwnO1xuXG5pbXBvcnQgKiBhcyBtb21lbnRfIGZyb20gJ21vbWVudCc7XG5pbXBvcnQge01vbWVudH0gZnJvbSAnbW9tZW50JztcbmltcG9ydCB7RmFjaWxpdHl9IGZyb20gJy4uL21vZGVsL2ZhY2lsaXR5Lm1vZGVsJztcbmltcG9ydCB7VmFsaWRhdGlvbkVycm9yc30gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtTdW1tYXJ5fSBmcm9tICcuLi9jb21wb25lbnRzL3N1bW1hcnkud2lkZ2V0LmNvbXBvbmVudCc7XG5cbmNvbnN0IG1vbWVudCA9IG1vbWVudF87XG5cbnR5cGUgRW50aXR5UmVzcG9uc2VUeXBlID0gSHR0cFJlc3BvbnNlPFBhdGllbnQ+O1xudHlwZSBFbnRpdHlBcnJheVJlc3BvbnNlVHlwZSA9IEh0dHBSZXNwb25zZTxQYXRpZW50W10+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhdGllbnRBY3Rpdml0eSB7XG4gICAgdXVpZD86IHN0cmluZztcbiAgICBpZD86IGFueTtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIGljb24/OiBzdHJpbmc7XG4gICAgcGF0aD86IHN0cmluZztcbiAgICBlZGl0YWJsZT86IGJvb2xlYW47XG4gICAgdmlld2FibGU/OiBib29sZWFuO1xuICAgIGRlbGV0YWJsZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aWVudFRpbWVsaW5lIHtcbiAgICBkYXRlPzogc3RyaW5nO1xuICAgIGFjdGl2aXRpZXM/OiBQYXRpZW50QWN0aXZpdHlbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXRpZW50V2lkZ2V0IHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGNvbXBvbmVudE5hbWU6IHN0cmluZztcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIGljb24/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aWVudE9ic2VydmF0aW9uIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHBhdGg/OiBzdHJpbmc7XG4gICAgaWNvbj86IHN0cmluZztcbiAgICB0b29sdGlwPzogc3RyaW5nO1xufVxuXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBQYXRpZW50U2VydmljZSB7XG4gICAgcHVibGljIHJlc291cmNlVXJsID0gJyc7XG4gICAgcHVibGljIHJlc291cmNlU2VhcmNoVXJsID0gJyc7XG4gICAgcHJpdmF0ZSBvdmNSZXNvdXJjZVVybCA9ICcnO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQsIEBJbmplY3QoU0VSVkVSX0FQSV9VUkxfQ09ORklHKSBwcml2YXRlIHNlcnZlclVybDogU2VydmVyQXBpVXJsQ29uZmlnLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgYXV0aFNlcnZlclByb3ZpZGVyOiBBdXRoU2VydmVyUHJvdmlkZXIpIHtcbiAgICAgICAgdGhpcy5yZXNvdXJjZVVybCA9IHNlcnZlclVybC5TRVJWRVJfQVBJX1VSTCArICcvYXBpL3BhdGllbnRzJztcbiAgICAgICAgdGhpcy5yZXNvdXJjZVNlYXJjaFVybCA9IHNlcnZlclVybC5TRVJWRVJfQVBJX1VSTCArICcvYXBpL19zZWFyY2gvcGF0aWVudHMnO1xuICAgICAgICB0aGlzLm92Y1Jlc291cmNlVXJsID0gc2VydmVyVXJsLlNFUlZFUl9BUElfVVJMICsgJy9hcGkvb3Zjcyc7XG4gICAgfVxuXG4gICAgY3JlYXRlKGRhdGE6IFBhdGllbnQpOiBPYnNlcnZhYmxlPEVudGl0eVJlc3BvbnNlVHlwZT4ge1xuICAgICAgICBjb25zdCBwYXRpZW50ID0gdGhpcy5jb252ZXJ0RGF0ZUZyb21DbGllbnQoZGF0YSk7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgICAgICAgIC5wb3N0PFBhdGllbnQ+KHRoaXMucmVzb3VyY2VVcmwsIHBhdGllbnQsIHtvYnNlcnZlOiAncmVzcG9uc2UnfSlcbiAgICAgICAgICAgIC5waXBlKG1hcCgocmVzOiBFbnRpdHlSZXNwb25zZVR5cGUpID0+IHRoaXMuY29udmVydERhdGVGcm9tU2VydmVyKHJlcykpKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoZGF0YTogUGF0aWVudCk6IE9ic2VydmFibGU8RW50aXR5UmVzcG9uc2VUeXBlPiB7XG4gICAgICAgIGNvbnN0IHBhdGllbnQgPSB0aGlzLmNvbnZlcnREYXRlRnJvbUNsaWVudChkYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgICAgICAgLnB1dDxQYXRpZW50Pih0aGlzLnJlc291cmNlVXJsLCBwYXRpZW50LCB7b2JzZXJ2ZTogJ3Jlc3BvbnNlJ30pXG4gICAgICAgICAgICAucGlwZShtYXAoKHJlczogRW50aXR5UmVzcG9uc2VUeXBlKSA9PiB0aGlzLmNvbnZlcnREYXRlRnJvbVNlcnZlcihyZXMpKSxcbiAgICAgICAgICAgICAgICBzaGFyZSgpKTtcbiAgICB9XG5cbiAgICBmaW5kKGlkOiBhbnkpOiBPYnNlcnZhYmxlPEVudGl0eVJlc3BvbnNlVHlwZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAgICAgICAuZ2V0PFBhdGllbnQ+KGAke3RoaXMucmVzb3VyY2VVcmx9LyR7aWR9YCwge29ic2VydmU6ICdyZXNwb25zZSd9KVxuICAgICAgICAgICAgLnBpcGUobWFwKChyZXM6IEVudGl0eVJlc3BvbnNlVHlwZSkgPT4gdGhpcy5jb252ZXJ0RGF0ZUZyb21TZXJ2ZXIocmVzKSkpO1xuICAgIH1cblxuICAgIGZpbmRCeVV1aWQoaWQ6IGFueSk6IE9ic2VydmFibGU8RW50aXR5UmVzcG9uc2VUeXBlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgICAgICAgIC5nZXQ8UGF0aWVudD4oYCR7dGhpcy5yZXNvdXJjZVVybH0vYnktdXVpZC8ke2lkfWAsIHtvYnNlcnZlOiAncmVzcG9uc2UnfSlcbiAgICAgICAgICAgIC5waXBlKG1hcCgocmVzOiBFbnRpdHlSZXNwb25zZVR5cGUpID0+IHRoaXMuY29udmVydERhdGVGcm9tU2VydmVyKHJlcykpKTtcbiAgICB9XG5cbiAgICBxdWVyeShyZXE/OiBhbnkpOiBPYnNlcnZhYmxlPEVudGl0eUFycmF5UmVzcG9uc2VUeXBlPiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjcmVhdGVSZXF1ZXN0T3B0aW9uKHJlcSk7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgICAgICAgIC5nZXQ8UGF0aWVudFtdPih0aGlzLnJlc291cmNlVXJsLCB7cGFyYW1zOiBvcHRpb25zLCBvYnNlcnZlOiAncmVzcG9uc2UnfSlcbiAgICAgICAgICAgIC5waXBlKG1hcCgocmVzOiBFbnRpdHlBcnJheVJlc3BvbnNlVHlwZSkgPT4gdGhpcy5jb252ZXJ0RGF0ZUFycmF5RnJvbVNlcnZlcihyZXMpKSk7XG4gICAgfVxuXG4gICAgZGVsZXRlKGlkOiBudW1iZXIpOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlPGFueT4oYCR7dGhpcy5yZXNvdXJjZVVybH0vJHtpZH1gLCB7b2JzZXJ2ZTogJ3Jlc3BvbnNlJ30pO1xuICAgIH1cblxuICAgIGdldE9WQ0J5UGF0aWVudChpZDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PE9WQz4oYCR7dGhpcy5vdmNSZXNvdXJjZVVybH0vcGF0aWVudC8ke2lkfWApXG4gICAgfVxuXG4gICAgd2lkZ2V0cyhwYXRpZW50SWQ6IG51bWJlcik6IE9ic2VydmFibGU8UGF0aWVudFdpZGdldFtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBhdGllbnRXaWRnZXRbXT4oYCR7dGhpcy5yZXNvdXJjZVVybH0vJHtwYXRpZW50SWR9L3dpZGdldHNgLCB7b2JzZXJ2ZTogJ2JvZHknfSlcbiAgICB9XG5cbiAgICBvYnNlcnZhdGlvbnMocGF0aWVudElkOiBudW1iZXIpOiBPYnNlcnZhYmxlPFBhdGllbnRPYnNlcnZhdGlvbltdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBhdGllbnRPYnNlcnZhdGlvbltdPihgJHt0aGlzLnJlc291cmNlVXJsfS8ke3BhdGllbnRJZH0vb2JzZXJ2YXRpb25zYCwge1xuICAgICAgICAgICAgb2JzZXJ2ZTogJ2JvZHknXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYWN0aXZpdGllcyhwYXRpZW50SWQ6IG51bWJlciwgZGV0YWlsZWQ6IGJvb2xlYW4pOiBPYnNlcnZhYmxlPFBhdGllbnRUaW1lbGluZVtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBhdGllbnRUaW1lbGluZVtdPihgJHt0aGlzLnJlc291cmNlVXJsfS8ke3BhdGllbnRJZH0vYWN0aXZpdGllcz9mdWxsPSR7ZGV0YWlsZWR9YCwge29ic2VydmU6ICdib2R5J30pXG4gICAgICAgICAgICAucGlwZShtYXAocmVzID0+IHtcbiAgICAgICAgICAgICAgICByZXMuc29ydCgodDEsIHQyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGQxID0gbW9tZW50KHQxLmRhdGUsICdERCBNTU0sIFlZWVknKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZDIgPSBtb21lbnQodDIuZGF0ZSwgJ0REIE1NTSwgWVlZWScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDIuZGlmZihkMSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH0pKVxuICAgIH1cblxuICAgIGdldEFjdGl2ZUZhY2lsaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxGYWNpbGl0eT4oJy9hcGkvZmFjaWxpdGllcy9hY3RpdmUnKVxuICAgIH1cblxuICAgIGdldEFsbEZhY2lsaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxGYWNpbGl0eVtdPignL2FwaS9mYWNpbGl0aWVzJylcbiAgICB9XG5cbiAgICBnZXRTdGF0ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PGFueVtdPignL2FwaS9zdGF0ZXMnKVxuICAgIH1cblxuICAgIGdldExnYXNCeVN0YXRlKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PGFueVtdPihgL2FwaS9wcm92aW5jZXMvc3RhdGUvJHtpZH1gKVxuICAgIH1cblxuICAgIGdldFN0YXRlQnlMZ2EoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYC9hcGkvcHJvdmluY2VzLyR7aWR9L3N0YXRlYClcbiAgICB9XG5cbiAgICBnZXRGYWNpbGl0eShpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldChgL2FwaS9mYWNpbGl0aWVzLyR7aWR9YClcbiAgICB9XG5cbiAgICBleGlzdHNCeUhvc3BpdGFsTnVtYmVyKGhvc3BpdGFsTnVtOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFZhbGlkYXRpb25FcnJvcnMgfCBudWxsPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxib29sZWFuPihgJHt0aGlzLnJlc291cmNlVXJsfS9leGlzdHMvaG9zcGl0YWwtbnVtYmVyYCwge251bWJlcjogaG9zcGl0YWxOdW19KVxuICAgICAgICAgICAgLnBpcGUobWFwKChyZXMgPT4gcmVzID8geydudW1iZXJFeGlzdHMnOiB0cnVlfSA6IG51bGwpKSk7XG4gICAgfVxuXG4gICAgZ2V0U3RhdHVzRGF0ZXNCeVBhdGllbnQocGF0aWVudElkOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8TW9tZW50W10+KGAvYXBpL2NsaWVudC1zdGF0dXNlcy9wYXRpZW50LyR7cGF0aWVudElkfS9zdGF0dXMtZGF0ZXNgKVxuICAgICAgICAgICAgLnBpcGUobWFwKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmZvckVhY2goZCA9PiBtb21lbnQoZCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgfVxuXG4gICAgZ2V0U3VtbWFyeUZvclBhdGllbnQoaWQ6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxTdW1tYXJ5W10+KGAke3RoaXMucmVzb3VyY2VVcmx9LyR7aWR9L3N1bW1hcnlgKVxuICAgIH1cblxuICAgIHNhdmVDbGllbnRTdGF0dXMoc3RhdHVzOiBTdGF0dXNIaXN0b3J5KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTdGF0dXMnLCBzdGF0dXMpO1xuICAgICAgICBjb25zdCBjb3B5ID0gUGF0aWVudFNlcnZpY2UuY29udmVydFN0YXR1c0Zyb21DbGllbnQoc3RhdHVzKTtcbiAgICAgICAgY29uc29sZS5sb2coJ0NvcHknLCBjb3B5KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PFN0YXR1c0hpc3Rvcnk+KCcvYXBpL2NsaWVudC1zdGF0dXNlcycsIGNvcHksIHtvYnNlcnZlOiAncmVzcG9uc2UnfSlcbiAgICB9XG5cbiAgICB1cGRhdGVDbGllbnRTdGF0dXMoc3RhdHVzOiBTdGF0dXNIaXN0b3J5KSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBQYXRpZW50U2VydmljZS5jb252ZXJ0U3RhdHVzRnJvbUNsaWVudChzdGF0dXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnB1dDxTdGF0dXNIaXN0b3J5PignL2FwaS9jbGllbnQtc3RhdHVzZXMnLCBjb3B5LCB7b2JzZXJ2ZTogJ3Jlc3BvbnNlJ30pXG4gICAgfVxuXG4gICAgZmluZENsaWVudFN0YXR1cyhpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxTdGF0dXNIaXN0b3J5PihgL2FwaS9jbGllbnQtc3RhdHVzZXMvYnktdXVpZC8ke2lkfWAsIHtvYnNlcnZlOiAncmVzcG9uc2UnfSlcbiAgICAgICAgICAgIC5waXBlKG1hcCgocmVzOiBIdHRwUmVzcG9uc2U8U3RhdHVzSGlzdG9yeT4pID0+IHtcbiAgICAgICAgICAgICAgICByZXMuYm9keS5kYXRlVHJhY2tlZCA9IHJlcy5ib2R5LmRhdGVUcmFja2VkICE9IG51bGwgPyBtb21lbnQocmVzLmJvZHkuZGF0ZVRyYWNrZWQpIDogbnVsbDtcbiAgICAgICAgICAgICAgICByZXMuYm9keS5kYXRlU3RhdHVzID0gcmVzLmJvZHkuZGF0ZVN0YXR1cyAhPSBudWxsID8gbW9tZW50KHJlcy5ib2R5LmRhdGVTdGF0dXMpIDogbnVsbDtcbiAgICAgICAgICAgICAgICByZXMuYm9keS5hZ3JlZWREYXRlID0gcmVzLmJvZHkuYWdyZWVkRGF0ZSAhPSBudWxsID8gbW9tZW50KHJlcy5ib2R5LmFncmVlZERhdGUpIDogbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfSkpXG4gICAgfVxuXG4gICAgY3VycmVudENsaWVudFN0YXR1cyhwYXRpZW50SWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldChgL2FwaS9jbGllbnQtc3RhdHVzZXMvcGF0aWVudC8ke3BhdGllbnRJZH0vY3VycmVudGAsIHtyZXNwb25zZVR5cGU6ICd0ZXh0J30pXG4gICAgfVxuXG4gICAgZ2V0U3RhdHVzTmFtZShpZDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGAvYXBpL2NsaWVudC1zdGF0dXNlcy8ke2lkfS9uYW1lYCwge3Jlc3BvbnNlVHlwZTogJ3RleHQnfSlcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjb252ZXJ0U3RhdHVzRnJvbUNsaWVudChzdGF0dXM6IFN0YXR1c0hpc3RvcnkpOiBTdGF0dXNIaXN0b3J5IHtcbiAgICAgICAgY29uc3QgY29weTogU3RhdHVzSGlzdG9yeSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXR1cywge1xuICAgICAgICAgICAgICAgIGRhdGVTdGF0dXM6IHN0YXR1cy5kYXRlU3RhdHVzICE9IG51bGwgJiYgc3RhdHVzLmRhdGVTdGF0dXMuaXNWYWxpZCgpID8gc3RhdHVzLmRhdGVTdGF0dXMuZm9ybWF0KERBVEVfRk9STUFUKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgYWdyZWVkRGF0ZTogc3RhdHVzLmFncmVlZERhdGUgIT0gbnVsbCAmJiBzdGF0dXMuYWdyZWVkRGF0ZS5pc1ZhbGlkKCkgPyBzdGF0dXMuYWdyZWVkRGF0ZS5mb3JtYXQoREFURV9GT1JNQVQpIDogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlVHJhY2tlZDogc3RhdHVzLmRhdGVUcmFja2VkICE9IG51bGwgJiYgc3RhdHVzLmRhdGVUcmFja2VkLmlzVmFsaWQoKSA/IHN0YXR1cy5kYXRlVHJhY2tlZC5mb3JtYXQoREFURV9GT1JNQVQpIDogbnVsbCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNvbnZlcnREYXRlRnJvbUNsaWVudChwYXRpZW50OiBQYXRpZW50KTogUGF0aWVudCB7XG4gICAgICAgIGNvbnN0IGNvcHk6IFBhdGllbnQgPSBPYmplY3QuYXNzaWduKHt9LCBwYXRpZW50LCB7XG4gICAgICAgICAgICBkYXRlQmlydGg6IHBhdGllbnQuZGF0ZUJpcnRoICE9IG51bGwgJiYgcGF0aWVudC5kYXRlQmlydGguaXNWYWxpZCgpID8gcGF0aWVudC5kYXRlQmlydGguZm9ybWF0KERBVEVfRk9STUFUKSA6IG51bGwsXG4gICAgICAgICAgICBkYXRlUmVnaXN0cmF0aW9uOiBwYXRpZW50LmRhdGVSZWdpc3RyYXRpb24gIT0gbnVsbCAmJiBwYXRpZW50LmRhdGVSZWdpc3RyYXRpb24uaXNWYWxpZCgpID8gcGF0aWVudC5kYXRlUmVnaXN0cmF0aW9uLmZvcm1hdChEQVRFX0ZPUk1BVCkgOiBudWxsLFxuICAgICAgICAgICAgZGF0ZVN0YXJ0ZWQ6IHBhdGllbnQuZGF0ZVN0YXJ0ZWQgIT0gbnVsbCAmJiBwYXRpZW50LmRhdGVTdGFydGVkLmlzVmFsaWQoKSA/IHBhdGllbnQuZGF0ZVN0YXJ0ZWQuZm9ybWF0KERBVEVfRk9STUFUKSA6IG51bGwsXG4gICAgICAgICAgICBkYXRlQ29uZmlybWVkSGl2OiBwYXRpZW50LmRhdGVDb25maXJtZWRIaXYgIT0gbnVsbCAmJiBwYXRpZW50LmRhdGVDb25maXJtZWRIaXYuaXNWYWxpZCgpID8gcGF0aWVudC5kYXRlQ29uZmlybWVkSGl2LmZvcm1hdChEQVRFX0ZPUk1BVCkgOiBudWxsLFxuICAgICAgICAgICAgZGF0ZUVucm9sbGVkUE1UQ1Q6IHBhdGllbnQuZGF0ZUVucm9sbGVkUE1UQ1QgIT0gbnVsbCAmJiBwYXRpZW50LmRhdGVFbnJvbGxlZFBNVENULmlzVmFsaWQoKSA/IHBhdGllbnQuZGF0ZUVucm9sbGVkUE1UQ1QuZm9ybWF0KERBVEVfRk9STUFUKSA6IG51bGwsXG4gICAgICAgICAgICBwcmVnbmFudDogcGF0aWVudC5wcmVnbmFuY3lTdGF0dXMgPT09IDIsXG4gICAgICAgICAgICBicmVhc3RmZWVkaW5nOiBwYXRpZW50LnByZWduYW5jeVN0YXR1cyA9PT0gM1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNvbnZlcnREYXRlRnJvbVNlcnZlcihyZXM6IEVudGl0eVJlc3BvbnNlVHlwZSk6IEVudGl0eVJlc3BvbnNlVHlwZSB7XG4gICAgICAgIGlmIChyZXMuYm9keSkge1xuICAgICAgICAgICAgcmVzLmJvZHkubmFtZSA9IHJlcy5ib2R5LnN1cm5hbWUgKyAnLCAnICsgcmVzLmJvZHkub3RoZXJOYW1lcztcbiAgICAgICAgICAgIHJlcy5ib2R5LmRhdGVCaXJ0aCA9IHJlcy5ib2R5LmRhdGVCaXJ0aCAhPSBudWxsID8gbW9tZW50KHJlcy5ib2R5LmRhdGVCaXJ0aCkgOiBudWxsO1xuICAgICAgICAgICAgcmVzLmJvZHkuZGF0ZVJlZ2lzdHJhdGlvbiA9IHJlcy5ib2R5LmRhdGVSZWdpc3RyYXRpb24gIT0gbnVsbCA/IG1vbWVudChyZXMuYm9keS5kYXRlUmVnaXN0cmF0aW9uKSA6IG51bGw7XG4gICAgICAgICAgICByZXMuYm9keS5kYXRlQ29uZmlybWVkSGl2ID0gcmVzLmJvZHkuZGF0ZUNvbmZpcm1lZEhpdiAhPSBudWxsID8gbW9tZW50KHJlcy5ib2R5LmRhdGVDb25maXJtZWRIaXYpIDogbnVsbDtcbiAgICAgICAgICAgIHJlcy5ib2R5LmRhdGVFbnJvbGxlZFBNVENUID0gcmVzLmJvZHkuZGF0ZUVucm9sbGVkUE1UQ1QgIT0gbnVsbCA/IG1vbWVudChyZXMuYm9keS5kYXRlRW5yb2xsZWRQTVRDVCkgOiBudWxsO1xuICAgICAgICAgICAgcmVzLmJvZHkuZGF0ZVN0YXJ0ZWQgPSByZXMuYm9keS5kYXRlU3RhcnRlZCAhPSBudWxsID8gbW9tZW50KHJlcy5ib2R5LmRhdGVTdGFydGVkKSA6IG51bGw7XG4gICAgICAgICAgICByZXMuYm9keS5wcmVnbmFuY3lTdGF0dXMgPSByZXMuYm9keS5wcmVnbmFudCAhPSBudWxsICYmIHJlcy5ib2R5LnByZWduYW50ID8gMiA6IHJlcy5ib2R5LmdlbmRlciA9PT0gJ0ZFTUFMRScgPyAxIDogbnVsbDtcbiAgICAgICAgICAgIHJlcy5ib2R5LnByZWduYW5jeVN0YXR1cyA9IHJlcy5ib2R5LmJyZWFzdGZlZWRpbmcgIT0gbnVsbCAmJiByZXMuYm9keS5icmVhc3RmZWVkaW5nID8gMyA6IHJlcy5ib2R5LmdlbmRlciA9PT0gJ0ZFTUFMRScgPyAxIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBjb252ZXJ0RGF0ZUFycmF5RnJvbVNlcnZlcihyZXM6IEVudGl0eUFycmF5UmVzcG9uc2VUeXBlKTogRW50aXR5QXJyYXlSZXNwb25zZVR5cGUge1xuICAgICAgICBpZiAocmVzLmJvZHkpIHtcbiAgICAgICAgICAgIHJlcy5ib2R5LmZvckVhY2goKHBhdGllbnQ6IFBhdGllbnQpID0+IHtcbiAgICAgICAgICAgICAgICBwYXRpZW50Lm5hbWUgPSBwYXRpZW50LnN1cm5hbWUgKyAnLCAnICsgcGF0aWVudC5vdGhlck5hbWVzO1xuICAgICAgICAgICAgICAgIHBhdGllbnQuZGF0ZUJpcnRoID0gcGF0aWVudC5kYXRlQmlydGggIT0gbnVsbCA/IG1vbWVudChwYXRpZW50LmRhdGVCaXJ0aCkgOiBudWxsO1xuICAgICAgICAgICAgICAgIHBhdGllbnQuZGF0ZVJlZ2lzdHJhdGlvbiA9IHBhdGllbnQuZGF0ZVJlZ2lzdHJhdGlvbiAhPSBudWxsID8gbW9tZW50KHBhdGllbnQuZGF0ZVJlZ2lzdHJhdGlvbikgOiBudWxsO1xuICAgICAgICAgICAgICAgIHBhdGllbnQuZGF0ZVN0YXJ0ZWQgPSBwYXRpZW50LmRhdGVTdGFydGVkICE9IG51bGwgPyBtb21lbnQocGF0aWVudC5kYXRlU3RhcnRlZCkgOiBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG59XG4iXX0=