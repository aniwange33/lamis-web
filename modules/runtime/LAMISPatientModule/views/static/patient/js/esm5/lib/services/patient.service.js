import * as tslib_1 from "tslib";
import {Inject, Injectable} from '@angular/core';
import {HttpClient, HttpResponse} from '@angular/common/http';
import {
    AuthServerProvider,
    createRequestOption,
    DATE_FORMAT,
    SERVER_API_URL_CONFIG,
    ServerApiUrlConfig
} from '@lamis/web-core';
import {map, share} from 'rxjs/operators';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";

var moment = moment_;
var PatientService = /** @class */ (function () {
    function PatientService(http, serverUrl, authServerProvider) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.authServerProvider = authServerProvider;
        this.resourceUrl = '';
        this.resourceSearchUrl = '';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/patients';
        this.resourceSearchUrl = serverUrl.SERVER_API_URL + '/api/_search/patients';
    }

    PatientService_1 = PatientService;
    PatientService.prototype.create = function (patient) {
        var _this = this;
        var copy = this.convertDateFromClient(patient);
        return this.http
            .post(this.resourceUrl, copy, {observe: 'response'})
            .pipe(map(function (res) {
                return _this.convertDateFromServer(res);
            }));
    };
    PatientService.prototype.update = function (patient) {
        var _this = this;
        var copy = this.convertDateFromClient(patient);
        return this.http
            .put(this.resourceUrl, copy, {observe: 'response'})
            .pipe(map(function (res) {
                return _this.convertDateFromServer(res);
            }), share());
    };
    PatientService.prototype.find = function (id) {
        var _this = this;
        return this.http
            .get(this.resourceUrl + "/" + id, {observe: 'response'})
            .pipe(map(function (res) {
                return _this.convertDateFromServer(res);
            }));
    };
    PatientService.prototype.findByUuid = function (id) {
        var _this = this;
        return this.http
            .get(this.resourceUrl + "/by-uuid/" + id, {observe: 'response'})
            .pipe(map(function (res) {
                return _this.convertDateFromServer(res);
            }));
    };
    PatientService.prototype.query = function (req) {
        var _this = this;
        var options = createRequestOption(req);
        return this.http
            .get(this.resourceUrl, {params: options, observe: 'response'})
            .pipe(map(function (res) {
                return _this.convertDateArrayFromServer(res);
            }));
    };
    PatientService.prototype.delete = function (id) {
        return this.http.delete(this.resourceUrl + "/" + id, {observe: 'response'});
    };
    PatientService.prototype.widgets = function (patientId) {
        return this.http.get(this.resourceUrl + "/" + patientId + "/widgets", {observe: 'body'});
    };
    PatientService.prototype.observations = function (patientId) {
        return this.http.get(this.resourceUrl + "/" + patientId + "/observations", {
            observe: 'body'
        });
    };
    PatientService.prototype.activities = function (patientId, detailed) {
        return this.http.get(this.resourceUrl + "/" + patientId + "/activities?full=" + detailed, {observe: 'body'})
            .pipe(map(function (res) {
                res.sort(function (t1, t2) {
                    var d1 = moment(t1.date, 'DD MMM, YYYY');
                    var d2 = moment(t2.date, 'DD MMM, YYYY');
                    return d2.diff(d1);
                });
                return res;
            }));
    };
    PatientService.prototype.getActiveFacility = function () {
        return this.http.get('/api/facilities/active');
    };
    PatientService.prototype.getStates = function () {
        return this.http.get('/api/states');
    };
    PatientService.prototype.getLgasByState = function (id) {
        return this.http.get("/api/provinces/state/" + id);
    };
    PatientService.prototype.getStateByLga = function (id) {
        return this.http.get("/api/provinces/" + id + "/state");
    };
    PatientService.prototype.getFacility = function (id) {
        return this.http.get("/api/facilities/" + id);
    };
    PatientService.prototype.existsByHospitalNumber = function (hospitalNum) {
        return this.http.get(this.resourceUrl + "/exists/hospital-number/" + hospitalNum)
            .pipe(map((function (res) {
                return res ? {'numberExists': true} : null;
            })));
    };
    PatientService.prototype.getStatusDatesByPatient = function (patientId) {
        return this.http.get("/api/client-statuses/patient/" + patientId + "/status-dates")
            .pipe(map(function (res) {
                res.forEach(function (d) {
                    return moment(d);
                });
                return res;
            }));
    };
    PatientService.prototype.getSummaryForPatient = function (id) {
        return this.http.get(this.resourceUrl + "/" + id + "/summary");
    };
    PatientService.prototype.saveClientStatus = function (status) {
        console.log('Status', status);
        var copy = PatientService_1.convertStatusFromClient(status);
        console.log('Copy', copy);
        return this.http.post('/api/client-statuses', copy, {observe: 'response'});
    };
    PatientService.prototype.updateClientStatus = function (status) {
        var copy = PatientService_1.convertStatusFromClient(status);
        return this.http.put('/api/client-statuses', copy, {observe: 'response'});
    };
    PatientService.prototype.findClientStatus = function (id) {
        return this.http.get("/api/client-statuses/by-uuid/" + id, {observe: 'response'})
            .pipe(map(function (res) {
                res.body.dateTracked = res.body.dateTracked != null ? moment(res.body.dateTracked) : null;
                res.body.dateStatus = res.body.dateStatus != null ? moment(res.body.dateStatus) : null;
                res.body.agreedDate = res.body.agreedDate != null ? moment(res.body.agreedDate) : null;
                return res;
            }));
    };
    PatientService.prototype.currentClientStatus = function (patientId) {
        return this.http.get("/api/client-statuses/patient/" + patientId + "/current", {responseType: 'text'});
    };
    PatientService.prototype.getStatusName = function (id) {
        return this.http.get("/api/client-statuses/" + id + "/name", {responseType: 'text'});
    };
    PatientService.convertStatusFromClient = function (status) {
        var copy = Object.assign({}, status, {
            dateStatus: status.dateStatus != null && status.dateStatus.isValid() ? status.dateStatus.format(DATE_FORMAT) : null,
            agreedDate: status.agreedDate != null && status.agreedDate.isValid() ? status.agreedDate.format(DATE_FORMAT) : null,
            dateTracked: status.dateTracked != null && status.dateTracked.isValid() ? status.dateTracked.format(DATE_FORMAT) : null,
        });
        return copy;
    };
    PatientService.prototype.convertDateFromClient = function (patient) {
        var copy = Object.assign({}, patient, {
            dob: patient.dateBirth != null && patient.dateBirth.isValid() ? patient.dateBirth.format(DATE_FORMAT) : null,
            dateRegistration: patient.dateRegistration != null && patient.dateRegistration.isValid() ? patient.dateRegistration.format(DATE_FORMAT) : null,
            dateStarted: patient.dateStarted != null && patient.dateStarted.isValid() ? patient.dateStarted.format(DATE_FORMAT) : null,
            dateConfirmedHiv: patient.dateConfirmedHiv != null && patient.dateConfirmedHiv.isValid() ? patient.dateConfirmedHiv.format(DATE_FORMAT) : null,
            dateEnrolledPMTCT: patient.dateEnrolledPMTCT != null && patient.dateEnrolledPMTCT.isValid() ? patient.dateEnrolledPMTCT.format(DATE_FORMAT) : null,
            pregnant: patient.pregnancyStatus === 2,
            breastfeeding: patient.pregnancyStatus === 3
        });
        return copy;
    };
    PatientService.prototype.convertDateFromServer = function (res) {
        if (res.body) {
            res.body.name = res.body.surname + ', ' + res.body.otherNames;
            res.body.dateBirth = res.body.dateBirth != null ? moment(res.body.dateBirth) : null;
            res.body.dateRegistration = res.body.dateRegistration != null ? moment(res.body.dateRegistration) : null;
            res.body.dateConfirmedHiv = res.body.dateConfirmedHiv != null ? moment(res.body.dateConfirmedHiv) : null;
            res.body.dateEnrolledPMTCT = res.body.dateEnrolledPMTCT != null ? moment(res.body.dateEnrolledPMTCT) : null;
            res.body.dateStarted = res.body.dateStarted != null ? moment(res.body.dateStarted) : null;
            res.body.pregnancyStatus = res.body.pregnant != null && res.body.pregnant ? 2 : res.body.gender === 'FEMALE' ? 1 : null;
            res.body.pregnancyStatus = res.body.breastfeeding != null && res.body.breastfeeding ? 3 : res.body.gender === 'FEMALE' ? 1 : null;
        }
        return res;
    };
    PatientService.prototype.convertDateArrayFromServer = function (res) {
        if (res.body) {
            res.body.forEach(function (patient) {
                patient.name = patient.surname + ', ' + patient.otherNames;
                patient.dateBirth = patient.dateBirth != null ? moment(patient.dateBirth) : null;
                patient.dateRegistration = patient.dateRegistration != null ? moment(patient.dateRegistration) : null;
                patient.dateStarted = patient.dateStarted != null ? moment(patient.dateStarted) : null;
            });
        }
        return res;
    };
    var PatientService_1;
    PatientService.ctorParameters = function () {
        return [
            {type: HttpClient},
            {type: undefined, decorators: [{type: Inject, args: [SERVER_API_URL_CONFIG,]}]},
            {type: AuthServerProvider}
        ];
    };
    PatientService.ngInjectableDef = i0.ɵɵdefineInjectable({
        factory: function PatientService_Factory() {
            return new PatientService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG), i0.ɵɵinject(i2.AuthServerProvider));
        }, token: PatientService, providedIn: "root"
    });
    PatientService = PatientService_1 = tslib_1.__decorate([
        Injectable({providedIn: 'root'}),
        tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
        tslib_1.__metadata("design:paramtypes", [HttpClient, Object, AuthServerProvider])
    ], PatientService);
    return PatientService;
}());
export {PatientService};
//# sourceMappingURL=data:application/json;base64,
