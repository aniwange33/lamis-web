{
    "version": 3,
    "file": "lamis-patient-1.2.0.js",
    "sources": [
        "ng://lamis-patient-1.2.0/lib/services/patient.service.ts",
        "ng://lamis-patient-1.2.0/lib/components/patient-list.component.ts",
        "ng://lamis-patient-1.2.0/lib/components/patient-details.component.ts",
        "ng://lamis-patient-1.2.0/lib/components/patient-edit.component.ts",
        "ng://lamis-patient-1.2.0/lib/components/detailed.timeline.component.ts",
        "ng://lamis-patient-1.2.0/lib/services/patient.route.ts",
        "ng://lamis-patient-1.2.0/lib/components/widget-container.component.ts",
        "ng://lamis-patient-1.2.0/lib/services/observation.service.ts",
        "ng://lamis-patient-1.2.0/lib/components/timeline.component.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.widget.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.event.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.badge.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.footer.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.header.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.panel.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.widget.module.ts",
        "ng://lamis-patient-1.2.0/lib/components/unique-hospital-num.validator.ts",
        "ng://lamis-patient-1.2.0/lib/components/summary.widget.component.ts",
        "ng://lamis-patient-1.2.0/lib/patient.module.ts",
        "ng://lamis-patient-1.2.0/lib/components/client-status.component.ts",
        "ng://lamis-patient-1.2.0/lib/services/status.route.ts",
        "ng://lamis-patient-1.2.0/lib/client-status.module.ts",
        "ng://lamis-patient-1.2.0/public_api.ts",
        "ng://lamis-patient-1.2.0/lamis-patient-1.2.0.ts"
    ],
    "sourcesContent": [
        "import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {\n    AuthServerProvider,\n    createRequestOption,\n    DATE_FORMAT,\n    SERVER_API_URL_CONFIG,\n    ServerApiUrlConfig\n} from '@lamis/web-core';\nimport { map, share } from 'rxjs/operators';\nimport { Patient, StatusHistory } from '../model/patient.model';\n\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Facility } from '../model/facility.model';\nimport { ValidationErrors } from '@angular/forms';\nimport { Summary } from '../components/summary.widget.component';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Patient>;\ntype EntityArrayResponseType = HttpResponse<Patient[]>;\n\nexport interface PatientActivity {\n    uuid?: string;\n    id?: any;\n    name?: string;\n    icon?: string;\n    path?: string;\n    editable?: boolean;\n    viewable?: boolean;\n    deletable?: boolean;\n}\n\nexport interface PatientTimeline {\n    date?: string;\n    activities?: PatientActivity[];\n}\n\nexport interface PatientWidget {\n    title: string;\n    componentName: string;\n    index: number;\n    icon?: string;\n}\n\nexport interface PatientObservation {\n    name?: string;\n    path?: string;\n    icon?: string;\n    tooltip?: string;\n}\n\n@Injectable({providedIn: 'root'})\nexport class PatientService {\n    public resourceUrl = '';\n    public resourceSearchUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig,\n                private authServerProvider: AuthServerProvider) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/patients';\n        this.resourceSearchUrl = serverUrl.SERVER_API_URL + '/api/_search/patients';\n    }\n\n    create(patient: Patient): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(patient);\n        return this.http\n            .post<Patient>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(patient: Patient): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(patient);\n        return this.http\n            .put<Patient>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)),\n                share());\n    }\n\n    find(id: any): Observable<EntityResponseType> {\n        return this.http\n            .get<Patient>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: any): Observable<EntityResponseType> {\n        return this.http\n            .get<Patient>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<Patient[]>(this.resourceUrl, {params: options, observe: 'response'})\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    widgets(patientId: number): Observable<PatientWidget[]> {\n        return this.http.get<PatientWidget[]>(`${this.resourceUrl}/${patientId}/widgets`, {observe: 'body'})\n    }\n\n    observations(patientId: number): Observable<PatientObservation[]> {\n        return this.http.get<PatientObservation[]>(`${this.resourceUrl}/${patientId}/observations`, {\n            observe: 'body'\n        })\n    }\n\n    activities(patientId: number, detailed: boolean): Observable<PatientTimeline[]> {\n        return this.http.get<PatientTimeline[]>(`${this.resourceUrl}/${patientId}/activities?full=${detailed}`, {observe: 'body'})\n            .pipe(map(res => {\n                res.sort((t1, t2) => {\n                    const d1 = moment(t1.date, 'DD MMM, YYYY');\n                    const d2 = moment(t2.date, 'DD MMM, YYYY');\n                    return d2.diff(d1);\n                });\n                return res;\n            }))\n    }\n\n    getActiveFacility() {\n        return this.http.get<Facility>('/api/facilities/active')\n    }\n\n    getStates() {\n        return this.http.get<any[]>('/api/states')\n    }\n\n    getLgasByState(id) {\n        return this.http.get<any[]>(`/api/provinces/state/${id}`)\n    }\n\n    getStateByLga(id) {\n        return this.http.get(`/api/provinces/${id}/state`)\n    }\n\n    getFacility(id) {\n        return this.http.get(`/api/facilities/${id}`)\n    }\n\n    existsByHospitalNumber(hospitalNum: string): Observable<ValidationErrors | null> {\n        return this.http.get<boolean>(`${this.resourceUrl}/exists/hospital-number/${hospitalNum}`)\n            .pipe(map((res => res ? {'numberExists': true} : null)));\n    }\n\n    getStatusDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`/api/client-statuses/patient/${patientId}/status-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            )\n    }\n\n    getSummaryForPatient(id: number) {\n        return this.http.get<Summary[]>(`${this.resourceUrl}/${id}/summary`)\n    }\n\n    saveClientStatus(status: StatusHistory) {\n        console.log('Status', status);\n        const copy = PatientService.convertStatusFromClient(status);\n        console.log('Copy', copy);\n        return this.http.post<StatusHistory>('/api/client-statuses', copy, {observe: 'response'})\n    }\n\n    updateClientStatus(status: StatusHistory) {\n        const copy = PatientService.convertStatusFromClient(status);\n        return this.http.put<StatusHistory>('/api/client-statuses', copy, {observe: 'response'})\n    }\n\n    findClientStatus(id) {\n        return this.http.get<StatusHistory>(`/api/client-statuses/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<StatusHistory>) => {\n                res.body.dateTracked = res.body.dateTracked != null ? moment(res.body.dateTracked) : null;\n                res.body.dateStatus = res.body.dateStatus != null ? moment(res.body.dateStatus) : null;\n                res.body.agreedDate = res.body.agreedDate != null ? moment(res.body.agreedDate) : null;\n                return res;\n            }))\n    }\n\n    currentClientStatus(patientId: string) {\n        return this.http.get(`/api/client-statuses/patient/${patientId}/current`, {responseType: 'text'})\n    }\n\n    getStatusName(id: number) {\n        return this.http.get(`/api/client-statuses/${id}/name`, {responseType: 'text'})\n    }\n\n    private static convertStatusFromClient(status: StatusHistory): StatusHistory {\n        const copy: StatusHistory = Object.assign({}, status, {\n                dateStatus: status.dateStatus != null && status.dateStatus.isValid() ? status.dateStatus.format(DATE_FORMAT) : null,\n                agreedDate: status.agreedDate != null && status.agreedDate.isValid() ? status.agreedDate.format(DATE_FORMAT) : null,\n                dateTracked: status.dateTracked != null && status.dateTracked.isValid() ? status.dateTracked.format(DATE_FORMAT) : null,\n            }\n        );\n        return copy;\n    }\n\n    protected convertDateFromClient(patient: Patient): Patient {\n        const copy: Patient = Object.assign({}, patient, {\n            dob: patient.dateBirth != null && patient.dateBirth.isValid() ? patient.dateBirth.format(DATE_FORMAT) : null,\n            dateRegistration: patient.dateRegistration != null && patient.dateRegistration.isValid() ? patient.dateRegistration.format(DATE_FORMAT) : null,\n            dateStarted: patient.dateStarted != null && patient.dateStarted.isValid() ? patient.dateStarted.format(DATE_FORMAT) : null,\n            dateConfirmedHiv: patient.dateConfirmedHiv != null && patient.dateConfirmedHiv.isValid() ? patient.dateConfirmedHiv.format(DATE_FORMAT) : null,\n            dateEnrolledPMTCT: patient.dateEnrolledPMTCT != null && patient.dateEnrolledPMTCT.isValid() ? patient.dateEnrolledPMTCT.format(DATE_FORMAT) : null,\n            pregnant: patient.pregnancyStatus === 2,\n            breastfeeding: patient.pregnancyStatus === 3\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.name = res.body.surname + ', ' + res.body.otherNames;\n            res.body.dateBirth = res.body.dateBirth != null ? moment(res.body.dateBirth) : null;\n            res.body.dateRegistration = res.body.dateRegistration != null ? moment(res.body.dateRegistration) : null;\n            res.body.dateConfirmedHiv = res.body.dateConfirmedHiv != null ? moment(res.body.dateConfirmedHiv) : null;\n            res.body.dateEnrolledPMTCT = res.body.dateEnrolledPMTCT != null ? moment(res.body.dateEnrolledPMTCT) : null;\n            res.body.dateStarted = res.body.dateStarted != null ? moment(res.body.dateStarted) : null;\n            res.body.pregnancyStatus = res.body.pregnant != null && res.body.pregnant ? 2 : res.body.gender === 'FEMALE' ? 1 : null;\n            res.body.pregnancyStatus = res.body.breastfeeding != null && res.body.breastfeeding ? 3 : res.body.gender === 'FEMALE' ? 1 : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((patient: Patient) => {\n                patient.name = patient.surname + ', ' + patient.otherNames;\n                patient.dateBirth = patient.dateBirth != null ? moment(patient.dateBirth) : null;\n                patient.dateRegistration = patient.dateRegistration != null ? moment(patient.dateRegistration) : null;\n                patient.dateStarted = patient.dateStarted != null ? moment(patient.dateStarted) : null;\n            });\n        }\n        return res;\n    }\n}\n",
        "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { PatientService } from '../services/patient.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { Patient } from '../model/patient.model';\r\nimport { Facility } from '../model/facility.model';\r\n\r\n@Component({\r\n    selector: 'lamis-patients',\r\n    templateUrl: './patient-list.component.html'\r\n})\r\nexport class PatientListComponent implements OnInit, OnDestroy {\r\n    @Input()\r\n    path: string;\r\n    page = 0;\r\n    patients: Patient[];\r\n    loading = false;\r\n    public itemsPerPage: number = 10;\r\n    public currentSearch: string = '';\r\n    totalItems = 0;\r\n    display = 'list';\r\n    facility: Facility = {};\r\n\r\n    constructor(private patientService: PatientService,\r\n                protected notification: NotificationService,\r\n                protected router: Router,\r\n                protected activatedRoute: ActivatedRoute) {\r\n        this.currentSearch = '';\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.patientService.getActiveFacility().subscribe(res => {\r\n            this.facility = res;\r\n            this.onPageChange(0);\r\n        })\r\n    }\r\n\r\n    searchPatient(search: any) {\r\n        this.currentSearch = search;\r\n        this.page = 0;\r\n        this.loadAll();\r\n    }\r\n\r\n\r\n    public select(data: any): any {\r\n        if (!!this.path) {\r\n            this.router.navigateByUrl(`${this.path}/${data.obj.uuid}`)\r\n        } else {\r\n            this.router.navigate(['..', 'patients', data.obj.uuid, 'view'], {relativeTo: this.activatedRoute});\r\n        }\r\n    }\r\n\r\n    onPageChange(pageInfo) {\r\n        this.page = pageInfo;\r\n        this.loadAll();\r\n    }\r\n\r\n    loadPage(page: number) {\r\n        this.loadAll();\r\n    }\r\n\r\n    loadAll() {\r\n        this.loading = true;\r\n        this.patientService.query({\r\n            keyword: this.currentSearch,\r\n            page: this.page > 0 ? this.page - 1 : 0,\r\n            facilityId: this.facility.id || 0,\r\n            size: this.itemsPerPage,\r\n            sort: ['id', 'asc']\r\n        }).subscribe(\r\n            (res: any) => {\r\n                this.onSuccess(res.body, res.headers)\r\n            },\r\n            (res: any) => this.onError(res)\r\n        );\r\n    }\r\n\r\n    protected onSuccess(data: any, headers: any) {\r\n        this.patients = data;\r\n        this.totalItems = headers.get('X-Total-Count');\r\n        this.loading = false;\r\n    }\r\n\r\n    private onError(error: any) {\r\n        this.notification.openSnackMessage(error.message);\r\n        this.loading = false;\r\n    }\r\n}\r\n\r\n",
        "import {\r\n    Component,\r\n    ComponentFactory,\r\n    ComponentFactoryResolver,\r\n    OnDestroy,\r\n    OnInit,\r\n    Renderer2,\r\n    ViewChild,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\nimport { Patient } from '../model/patient.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PatientObservation, PatientService, PatientWidget } from '../services/patient.service';\r\nimport { TdDialogService } from '@covalent/core';\r\nimport { CardViewItem, NotificationService } from '@alfresco/adf-core';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-patient',\r\n    templateUrl: './patient-details.component.html',\r\n    styleUrls: ['./patient-details.component.scss']\r\n})\r\nexport class PatientDetailsComponent implements OnInit, OnDestroy {\r\n    template = 'patient-details';\r\n    entity: Patient;\r\n    observations: PatientObservation[];\r\n    @ViewChild('container', {read: ViewContainerRef, static: true}) container: ViewContainerRef;\r\n    properties: CardViewItem[] = [];\r\n    status: string;\r\n\r\n    constructor(private router: Router, private route: ActivatedRoute, private patientService: PatientService,\r\n                private cfr: ComponentFactoryResolver, private _dialogService: TdDialogService,\r\n                private notificationService: NotificationService, private _viewContainerRef: ViewContainerRef,\r\n                private renderer2: Renderer2) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            this.patientService.currentClientStatus(entity.uuid).subscribe(res => {\r\n                this.status = res;\r\n            });\r\n            this.attacheWidgets();\r\n            this.getObservations();\r\n        });\r\n    }\r\n\r\n    edit() {\r\n        this.router.navigate(['..', 'edit'], {relativeTo: this.route});\r\n    }\r\n\r\n    updateStatus() {\r\n        this.router.navigate(['/', 'client-statuses', 'patient', this.entity.uuid, 'new']);\r\n    }\r\n\r\n    delete() {\r\n        this._dialogService.openConfirm({\r\n            title: 'Confirm',\r\n            message: 'Do you want to delete this patient, action cannot be reversed?',\r\n            cancelButton: 'No',\r\n            acceptButton: 'Yes',\r\n            width: '500px',\r\n        }).afterClosed().subscribe((accept: boolean) => {\r\n            if (accept) {\r\n                this.patientService.delete(this.entity.id).subscribe((res) => {\r\n                    if (res.ok) {\r\n                        this.router.navigate(['patients'])\r\n                    } else {\r\n                        this.notificationService.showError('Error deleting patient, please try again')\r\n                    }\r\n                })\r\n            } else {\r\n                // DO SOMETHING ELSE\r\n            }\r\n        });\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    private getComponentFactory(name: string) {\r\n        const factories = Array.from(this.cfr['_factories'].values());\r\n        return <ComponentFactory<any>>factories.find((x: any) => x.componentType.name === name);\r\n    }\r\n\r\n    getObservations() {\r\n        this.patientService.observations(this.entity.id).subscribe((res: PatientObservation[]) => this.observations = res)\r\n    }\r\n\r\n    addObservation(action: PatientObservation) {\r\n        const path = action.path.split('/');\r\n        const parts = ['/'];\r\n        parts.push(...path);\r\n        parts.push('patient', this.entity.uuid, 'new');\r\n        this.router.navigate([...parts]);\r\n    }\r\n\r\n    private attacheWidgets() {\r\n        this.buildWidget('TimelineComponent', 'Recent Activities', 'timeline');\r\n        this.buildWidget('SummaryWidgetComponent', 'Patient Summary', 'account_balance_wallet');\r\n        /*this.patientService.widgets(this.entity.id).subscribe((res: PatientWidget[]) => {\r\n            res.forEach((widget: PatientWidget) => {\r\n                this.buildWidget(widget.componentName, widget.title, widget.icon);\r\n            })\r\n        });*/\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n    }\r\n\r\n    private buildWidget(componentName: string, title: string, icon: string) {\r\n        const factory = this.getComponentFactory(componentName);\r\n        if (factory !== undefined) {\r\n            const parentFactory = this.getComponentFactory('WidgetContainerComponent');\r\n            const componentRef = this.container.createComponent(parentFactory);\r\n            if (!componentRef.instance.embeddedContainer) {\r\n                const cmpName = componentRef.instance.constructor.name;\r\n                throw new TypeError(`Trying to render embedded content. ${cmpName} must have @ViewChild() embeddedContainer defined`);\r\n            }\r\n            console.log('Created component', componentRef);\r\n            const instanceRef = componentRef.instance.embeddedContainer.createComponent(factory);\r\n            this.renderer2.addClass(componentRef.location.nativeElement, 'col-md-6');\r\n            componentRef.instance.icon = icon;\r\n            componentRef.instance.title = title;\r\n            try {\r\n                instanceRef.instance.patientId = this.entity.id;\r\n                instanceRef.instance.patientUuid = this.entity.uuid;\r\n            } catch (e) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    age(dob: Moment) {\r\n        let age = moment().diff(dob, 'years');\r\n        if (age > 0) {\r\n            return age + ' year(s)'\r\n        }\r\n\r\n        age = moment().diff(dob, 'months');\r\n        if (age > 0) {\r\n            return age + ' month(s)';\r\n        }\r\n        return moment().diff(dob, 'weeks') + ' week(s)';\r\n    }\r\n}\r\n",
        "import { Component, OnInit } from '@angular/core';\r\nimport { Patient } from '../model/patient.model';\r\nimport { PatientService } from '../services/patient.service';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment_ from 'moment';\r\nimport { DurationInputArg2, Moment } from 'moment';\r\nimport { AppLoaderService, entityCompare } from '@lamis/web-core';\r\nimport { FormBuilder } from '@angular/forms';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-patient-edit',\r\n    templateUrl: './patient-edit.component.html'\r\n})\r\nexport class PatientEditComponent implements OnInit {\r\n    template = 'patient-edit';\r\n    entity: Patient;\r\n    patient: Patient;\r\n    isSaving: boolean;\r\n    error = false;\r\n    today = moment();\r\n    minDob = moment().subtract(75, 'years');\r\n    minDateRegistration: Moment = moment('2008', 'YYYY');\r\n    maxDateBirth: Moment = moment().subtract(2, 'months');\r\n    maxDateConfirmed = moment();\r\n    minDateConfirmed = moment('2008', 'YYYY');\r\n    age: number;\r\n    ageUnit: DurationInputArg2;\r\n    state: any;\r\n    states: any[];\r\n    lgas: any[];\r\n\r\n    constructor(private patientService: PatientService,\r\n                protected notification: NotificationService,\r\n                private loaderService: AppLoaderService,\r\n                protected activatedRoute: ActivatedRoute,\r\n                private formBuilder: FormBuilder) {\r\n    }\r\n\r\n    createEntity(): Patient {\r\n        return <Patient>{};\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.patientService.getActiveFacility().subscribe((res: any) => {\r\n            this.entity.facility = res;\r\n        });\r\n        this.isSaving = false;\r\n        this.activatedRoute.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            if (this.entity === undefined) {\r\n                this.entity = this.createEntity();\r\n            }\r\n            if (this.entity.id && this.entity.lga) {\r\n                this.minDateRegistration = this.entity.dateBirth.clone().add(2, 'month');\r\n                this.minDateConfirmed = this.entity.dateBirth.clone().add(1, 'month');\r\n                this.patientService.getStateByLga(this.entity.lga.id).subscribe(res => {\r\n                    this.state = res;\r\n                    this.stateChange(this.state.id);\r\n                })\r\n            }\r\n        });\r\n\r\n        this.patientService.getStates().subscribe(res => this.states = res);\r\n    }\r\n\r\n    entityCompare(e1, e2) {\r\n        return entityCompare(e1, e2);\r\n    }\r\n\r\n    estimateDob() {\r\n        if (this.age && this.ageUnit && this.entity.dateRegistration) {\r\n            const dateRegistration = this.entity.dateRegistration;\r\n            this.entity.dateBirth = dateRegistration.clone().subtract(this.age, this.ageUnit);\r\n            this.minDateConfirmed = this.entity.dateBirth.clone().add(1, 'months');\r\n        }\r\n    }\r\n\r\n    stateChange(id) {\r\n        this.patientService.getLgasByState(id).subscribe(res => this.lgas = res)\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    dateBirthChanged(date: Moment) {\r\n        this.minDateRegistration = date.clone().add(2, 'months');\r\n        this.minDateConfirmed = date.clone().add(1, 'months');\r\n        if (this.minDateRegistration.isBefore(moment('2008', 'YYYY'), 'day')) {\r\n            this.minDateRegistration = moment('2008', 'YYYY');\r\n            this.minDateConfirmed = moment('2008', 'YYYY');\r\n        }\r\n    }\r\n\r\n    dateRegistrationChanged(date: Moment) {\r\n        this.maxDateBirth = date.clone().subtract(2, 'months');\r\n        this.maxDateConfirmed = date.clone();\r\n    }\r\n\r\n    save() {\r\n        //this.progressBar.mode = 'indeterminate';\r\n        this.loaderService.open('Saving patient...');\r\n        this.isSaving = true;\r\n        if (!this.entity.id) {\r\n            if (this.entity.dobEstimated) {\r\n                this.entity.dateBirth = this.entity.dateRegistration.clone().subtract(this.age, this.ageUnit);\r\n            }\r\n            this.subscribeToSaveResponse(this.patientService.create(this.entity));\r\n        } else {\r\n            this.subscribeToSaveResponse(this.patientService.update(this.entity));\r\n        }\r\n    }\r\n\r\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\r\n        this.loaderService.close();\r\n        result.subscribe(\r\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\r\n            (res: HttpErrorResponse) => {\r\n                this.onSaveError();\r\n                this.onError(res.message)\r\n            });\r\n    }\r\n\r\n    private onSaveSuccess(result: any) {\r\n        this.isSaving = false;\r\n        this.notification.openSnackMessage('Patient successfully saved');\r\n        this.previousState();\r\n    }\r\n\r\n    private onSaveError() {\r\n        this.isSaving = false;\r\n        this.error = true;\r\n        //this.progressBar.mode = 'determinate';\r\n    }\r\n\r\n    protected onError(errorMessage: string) {\r\n        this.notification.showError(errorMessage);\r\n    }\r\n}\r\n",
        "import { Component, OnInit } from \"@angular/core\";\nimport { PatientService } from \"../services/patient.service\";\nimport { ActivatedRoute } from \"@angular/router\";\n\n@Component({\n    selector: 'detailed-timeline',\n    templateUrl: './detailed.timeline.component.html'\n})\nexport class DetailedTimelineComponent implements OnInit {\n    id: number;\n    uuid: string;\n\n    constructor(private patientService: PatientService, private route: ActivatedRoute) {\n    }\n\n    ngOnInit(): void {\n        this.route.data.subscribe(({entity}) => {\n            const patient = !!entity && entity.body ? entity.body : entity;\n            this.id = patient.id;\n            this.uuid = patient.uuid;\n        });\n    }\n\n    previousState() {\n        window.history.back();\n    }\n}\n",
        "import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { PagingParamsResolve, UserRouteAccessService } from '@lamis/web-core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PatientService } from './patient.service';\nimport { Patient } from '../model/patient.model';\nimport { PatientDetailsComponent } from '../components/patient-details.component';\nimport { PatientEditComponent } from '../components/patient-edit.component';\nimport { PatientListComponent } from '../components/patient-list.component';\nimport { DetailedTimelineComponent } from '../components/detailed.timeline.component';\n\n@Injectable()\nexport class PatientResolve implements Resolve<Patient> {\n    constructor(private service: PatientService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Patient> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Patient>) => response.ok),\n                map((patient: HttpResponse<Patient>) => patient.body)\n            );\n        }\n        return of(<Patient>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Patients',\n            breadcrumb: 'PATIENTS'\n        },\n        children: [\n            {\n                path: '',\n                component: PatientListComponent,\n                resolve: {\n                    pagingParams: PagingParamsResolve\n                },\n                data: {},\n            },\n            {\n                path: ':id/view',\n                component: PatientDetailsComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Patient Details',\n                    breadcrumb: 'PATIENT DETAILS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'new',\n                component: PatientEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Add Patient',\n                    breadcrumb: 'ADD PATIENT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/edit',\n                component: PatientEditComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Patient Edit',\n                    breadcrumb: 'PATIENT EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/timeline',\n                component: DetailedTimelineComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Patient Timeline',\n                    breadcrumb: 'PATIENT TIMELINE'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n",
        "import { Component, HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n@Component({\n    selector:'widget-container',\n    templateUrl: './widget-container.component.html',\n    styleUrls: ['./widget-container.component.scss']\n})\nexport class WidgetContainerComponent {\n    @Input()\n    title: string;\n    @Input()\n    icon: string;\n\n    @ViewChild('container', { read: ViewContainerRef,  static: true })\n    embeddedContainer: ViewContainerRef;\n}\n",
        "import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\n\n@Injectable({providedIn:'root'})\nexport class ObservationService {\n    resourceUrl: string = '';\n\n    constructor(private http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api';\n    }\n\n    deleteObservation(path: string, id: string) {\n        return this.http.delete(`${this.resourceUrl}/${path}/${id}`, {observe: 'response'})\n    }\n\n    getObservation(path: string, id: string) {\n        return this.http.get<any>(`${this.resourceUrl}/${path}/by-uuid/${id}`,{observe: 'response'})\n    }\n}\n",
        "import { Component, Input, OnInit } from '@angular/core';\nimport { PatientService, PatientTimeline } from '../services/patient.service';\nimport { Router } from '@angular/router';\nimport { TdDialogService } from '@covalent/core';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { ObservationService } from '../services/observation.service';\n\n@Component({\n    selector: 'patient-timeline',\n    templateUrl: './timeline.component.html'\n})\nexport class TimelineComponent implements OnInit {\n    @Input()\n    patientId: number;\n    @Input()\n    patientUuid: string;\n    @Input()\n    detailed: boolean = false;\n    timeLine: PatientTimeline[];\n\n    constructor(private patientService: PatientService, private router: Router, private observationService: ObservationService,\n                private _dialogService: TdDialogService, private notificationService: NotificationService) {\n    }\n\n    ngOnInit(): void {\n        this.loadActivities()\n    }\n\n    view(path: string, id: string) {\n        this.router.navigate(['/', path, id, 'patient', this.patientUuid, 'view'])\n    }\n\n    edit(path: string, id: string) {\n        this.router.navigate(['/', path, id, 'patient', this.patientUuid, 'edit'])\n    }\n\n    delete(path: string, id: string) {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this event, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.observationService.getObservation(path, id).subscribe(obj => {\n                    if (obj.body) {\n                        this.observationService.deleteObservation(path, obj.body.id).subscribe((res) => {\n                            if (res.ok) {\n                                this.patientService.activities(this.patientId, this.detailed).subscribe((res) => this.timeLine = res)\n                            } else {\n                                this.notificationService.showError('Error deleting event, please try again')\n                            }\n                        })\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    loadActivities() {\n        this.patientService.activities(this.patientId, this.detailed).subscribe((res) => this.timeLine = res)\n    }\n}\n",
        "import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: 'timeline',\n    templateUrl: './timeline.widget.html'\n})\nexport class TimelineWidget implements OnInit{\n    ngOnInit(): void {\n    }\n\n}\n",
        "import { Component, Input, OnInit } from '@angular/core';\nimport { TimelineWidget } from './timeline.widget';\n\n@Component({\n    selector: 'timeline-event',\n    templateUrl: './timeline.event.html'\n})\nexport class TimelineEvent implements OnInit {\n\n    oddClass;\n    evenClass;\n    _side: string = 'left';\n    @Input()\n    set side(side: string) {\n        this._side = side;\n        this.updateRowClasses(this._side);\n    }\n    \n    constructor(private parent: TimelineWidget) {\n    }\n\n    ngOnInit(): void {\n        this.updateRowClasses(this._side);\n    }\n\n    checkClass(side, leftSide) {\n        let leftClass = '';\n        let rightClass = 'timeline-inverted';\n\n        if (side === 'left' || (!side && leftSide === true)) {\n            return leftClass;\n        } else if ((side === 'alternate' || !side) && leftSide === false) {\n            return rightClass;\n        } else if (side === 'right') {\n            return rightClass;\n        } else {\n            return leftClass;\n        }\n    }\n\n    updateRowClasses(value) {\n        this.oddClass = this.checkClass(value, true);\n        this.evenClass = this.checkClass(value, false);\n    }\n}\n",
        "import { Component } from '@angular/core';\nimport { TimelineEvent } from './timeline.event';\n\n@Component({\n    selector: 'timeline-badge',\n    template: `\n        <div class='timeline-badge'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineBadge {\n    constructor(private event: TimelineEvent) {\n    }\n}\n",
        "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'timeline-footer',\n    template: `\n        <div class='timeline-footer'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineFooter {\n    \n}\n",
        "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'timeline-header',\n    template: `\n        <div class='timeline-header'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineHeader {\n\n}\n",
        "import { Component } from '@angular/core';\nimport { TimelineEvent } from './timeline.event';\n\n@Component({\n    selector: 'timeline-panel',\n    template:\n            `\n        <div class='timeline-panel'>\n            <ng-content></ng-content>\n        </div>`\n})\nexport class TimelinePanel {\n    constructor(private event: TimelineEvent) {\n    }\n}\n",
        "import { NgModule } from '@angular/core';\nimport { TimelineWidget } from './timeline.widget';\nimport { TimelineEvent } from './timeline.event';\nimport { TimelineBadge } from './timeline.badge';\nimport { TimelineFooter } from './timeline.footer';\nimport { TimelineHeader } from './timeline.header';\nimport { TimelinePanel } from './timeline.panel';\n\nconst COMPONENTS = [TimelineBadge, TimelineEvent, TimelineFooter, TimelineHeader, TimelinePanel, TimelineWidget];\n\n@NgModule({\n    declarations: [\n        ...COMPONENTS\n    ],\n    exports: [\n        ...COMPONENTS\n    ]\n})\nexport class TimelineWidgetModule {\n\n}\n",
        "import { AbstractControl, AsyncValidator, NG_ASYNC_VALIDATORS, ValidationErrors } from '@angular/forms';\nimport { Directive } from '@angular/core';\nimport { PatientService } from '../services/patient.service';\nimport { Observable, of } from 'rxjs';\nimport { debounceTime, switchMap, take } from 'rxjs/operators';\n\n@Directive({\n    selector: '[uniqueHospitalNum]',\n    providers: [{\n        provide: NG_ASYNC_VALIDATORS,\n        useExisting: UniqueHospitalNumValidator,\n        multi: true\n    }]\n})\nexport class UniqueHospitalNumValidator implements AsyncValidator {\n    constructor(private patientService: PatientService) {\n    }\n\n    validate(control: AbstractControl): Observable<ValidationErrors | null> {\n        return control.valueChanges\n            .pipe(\n                debounceTime(300),\n                take(1),\n                switchMap(value => this.patientService.existsByHospitalNumber(value))\n            );\n    }\n}\n",
        "import { Component, Input, OnInit } from '@angular/core';\nimport {\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewDatetimeItemModel,\n    CardViewFloatItemModel,\n    CardViewIntItemModel,\n    CardViewItem,\n    CardViewTextItemModel\n} from '@alfresco/adf-core';\nimport { FieldType } from '@lamis/web-core';\nimport { PatientService } from '../services/patient.service';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\nexport interface Summary {\n    header?: string;\n    headerClass?: string;\n    fields: Field[];\n}\n\nexport interface Field {\n    type: FieldType;\n    label: string;\n    value: any;\n}\n\n@Component({\n    selector: 'patient-summary-widget',\n    templateUrl: './summary.widget.component.html'\n})\nexport class SummaryWidgetComponent implements OnInit {\n    @Input()\n    patientId: number;\n    @Input()\n    patientUuid: string;\n    @Input()\n\n    summaries: Summary[];\n\n    constructor(private patientService: PatientService) {\n    }\n\n    ngOnInit(): void {\n        this.patientService.getSummaryForPatient(this.patientId).subscribe(res => this.summaries = res)\n    }\n\n    public propertiesForSummary(summary: Summary): Array<CardViewItem> {\n        const properties = [];\n        for (const field of summary.fields) {\n            const dataType = field.type.toLowerCase();\n            let item: CardViewItem;\n            switch (dataType) {\n                case FieldType.boolean:\n                    item = new CardViewBoolItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label\n                    });\n                    break;\n                case FieldType.int:\n                    item = new CardViewIntItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n                    break;\n                case FieldType.float:\n                    item = new CardViewFloatItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n                    break;\n                case FieldType.date:\n                    item = new CardViewDateItemModel({\n                        value: field.value ? moment(field.value) : null,\n                        key: '',\n                        label: field.label,\n                        format: 'dd MMM, yyyy'\n                    });\n                    break;\n                case FieldType.datetime:\n                    item = new CardViewDatetimeItemModel({\n                        value: field.value ? moment(field.value) : null,\n                        key: '',\n                        label: field.label,\n                        format: 'dd MMM, yyyy HH:mm'\n                    });\n                    break;\n                default:\n                    item = new CardViewTextItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n            }\n            properties.push(item);\n        }\n        return properties;\n    }\n}\n",
        "import { CoreModule } from '@alfresco/adf-core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDividerModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatProgressBarModule,\r\n    MatSelectModule,\r\n    MatTabsModule\r\n} from '@angular/material';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CovalentDialogsModule, CovalentMessageModule, CovalentSearchModule } from '@covalent/core';\r\nimport { JsonFormModule, LamisSharedModule, MatDateFormatModule } from '@lamis/web-core';\r\nimport { NgbPaginationModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgJhipsterModule } from 'ng-jhipster';\r\nimport { PatientDetailsComponent } from './components/patient-details.component';\r\nimport { PatientEditComponent } from './components/patient-edit.component';\r\nimport { PatientListComponent } from './components/patient-list.component';\r\nimport { PatientResolve, ROUTES } from './services/patient.route';\r\nimport { WidgetContainerComponent } from './components/widget-container.component';\r\nimport { TimelineComponent } from './components/timeline.component';\r\nimport { TimelineWidgetModule } from './widget/timeline.widget.module';\r\nimport { ObservationService } from './services/observation.service';\r\nimport { MatFormioModule } from 'angular-material-formio';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { UniqueHospitalNumValidator } from './components/unique-hospital-num.validator';\r\nimport { CustomFormsModule } from 'ng2-validation';\r\nimport { DetailedTimelineComponent } from './components/detailed.timeline.component';\r\nimport { SummaryWidgetComponent } from './components/summary.widget.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PatientListComponent,\r\n        PatientDetailsComponent,\r\n        PatientEditComponent,\r\n        WidgetContainerComponent,\r\n        TimelineComponent,\r\n        DetailedTimelineComponent,\r\n        SummaryWidgetComponent,\r\n        UniqueHospitalNumValidator\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        NgJhipsterModule,\r\n        LamisSharedModule,\r\n        JsonFormModule,\r\n        MatFormioModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatDividerModule,\r\n        MatCardModule,\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        MatCheckboxModule,\r\n        MatTabsModule,\r\n        RouterModule.forChild(ROUTES),\r\n        MatProgressBarModule,\r\n        CovalentMessageModule,\r\n        MatListModule,\r\n        MatChipsModule,\r\n        CoreModule,\r\n        CovalentDialogsModule,\r\n        CovalentSearchModule,\r\n        NgbPaginationModule,\r\n        TimelineWidgetModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatDateFormatModule,\r\n        CustomFormsModule,\r\n    ],\r\n    exports: [\r\n        PatientListComponent,\r\n        PatientDetailsComponent,\r\n        PatientEditComponent\r\n    ],\r\n    entryComponents: [\r\n        WidgetContainerComponent,\r\n        TimelineComponent,\r\n        SummaryWidgetComponent\r\n    ],\r\n    providers: [\r\n        //PatientService,\r\n        //ObservationService,\r\n        PatientResolve\r\n    ]\r\n})\r\nexport class PatientModule {\r\n}\r\n",
        "import { Component, OnInit } from '@angular/core';\nimport { PatientService } from '../services/patient.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { AppLoaderService } from '@lamis/web-core';\nimport { Patient, StatusHistory } from '../model/patient.model';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'client-status',\n    templateUrl: './client-status.component.html'\n})\nexport class ClientStatusComponent implements OnInit {\n    isSaving: boolean;\n    entity: StatusHistory;\n    patient: Patient;\n    status: string;\n    statusDates: Moment[] = [];\n    today = moment();\n    statuses = ['TRACED_UNABLE_TO_LOCATE', 'TRACED_AGREED_TO_RETURN_TO_CARE', 'DID_NOT_ATTEMPT_TO_TRACE'];\n\n    constructor(private patientService: PatientService, private activatedRoute: ActivatedRoute, private router: Router,\n                private notification: NotificationService, private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): StatusHistory {\n        return <StatusHistory>{};\n    }\n\n    ngOnInit(): void {\n        this.isSaving = false;\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.patientService.findByUuid(patientId).subscribe((res) => {\n                this.entity.patient = res.body;\n                this.patient = res.body;\n                this.entity.facility = res.body.facility;\n                this.patientService.getStatusDatesByPatient(res.body.id).subscribe((res) => {\n                    this.statusDates = res;\n                });\n            });\n\n            if (this.entity.id) {\n                this.patientService.getStatusName(this.entity.id).subscribe(res => this.status = res)\n            }\n        });\n    }\n\n    filterDates(date: Moment): boolean {\n        let exists = false;\n\n        this.statusDates.forEach(d => {\n            if (date.diff(d, 'days') === 0) {\n                exists = true;\n            }\n        });\n        return (this.entity.id && date.diff(this.entity.dateStatus, 'days') === 0) || !exists;\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    save() {\n        this.appLoaderService.open('Saving Client status update...');\n        this.isSaving = true;\n        if (this.statuses.includes(this.entity.status)) {\n            this.entity.outcome = this.entity.status;\n            this.entity.status = null;\n\n            console.log('Clearing status')\n        }\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.patientService.updateClientStatus(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.patientService.saveClientStatus(this.entity));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.appLoaderService.close();\n                this.onSaveError();\n                this.onError(res.message)\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.openSnackMessage('Client status update successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.notification.openSnackMessage('Error saving status update');\n    }\n\n    protected onError(errorMessage: string) {\n        this.isSaving = false;\n        this.notification.showError(errorMessage);\n    }\n}\n",
        "import { ClientStatusComponent } from '../components/client-status.component';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { StatusHistory } from '../model/patient.model';\nimport { PatientService } from './patient.service';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter, map } from 'rxjs/operators';\nimport { HttpResponse } from '@angular/common/http';\n\n@Injectable()\nexport class StatusResolve implements Resolve<StatusHistory> {\n    constructor(private service: PatientService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<StatusHistory> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findClientStatus(id).pipe(\n                filter((response: HttpResponse<StatusHistory>) => response.ok),\n                map((patient: HttpResponse<StatusHistory>) => patient.body)\n            );\n        }\n        return of(<StatusHistory>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Clinic Visit',\n            breadcrumb: 'CLINIC VISIT'\n        },\n        children: [\n            {\n                path: 'patient/:patientId/new',\n                component: ClientStatusComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Update Client Status',\n                    breadcrumb: 'UPDATE CLIENT STATUS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: ClientStatusComponent,\n                resolve: {\n                    entity: StatusResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Client Status Edit',\n                    breadcrumb: 'CLIENT STATUS EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n",
        "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CovalentDialogsModule } from '@covalent/core';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { JsonFormModule, LamisSharedModule, MatDateFormatModule } from '@lamis/web-core';\nimport { MatFormioModule } from 'angular-material-formio';\nimport { RouterModule } from '@angular/router';\nimport { ROUTES, StatusResolve } from './services/status.route';\nimport {\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatDividerModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressBarModule,\n    MatSelectModule,\n    MatTabsModule\n} from '@angular/material';\nimport { ClientStatusComponent } from './components/client-status.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CovalentDialogsModule,\n        LamisSharedModule,\n        JsonFormModule,\n        MatFormioModule,\n        MatInputModule,\n        MatIconModule,\n        MatDividerModule,\n        MatCardModule,\n        MatSelectModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatTabsModule,\n        RouterModule.forChild(ROUTES),\n        MatProgressBarModule,\n        CoreModule,\n        MatDateFormatModule\n    ],\n    declarations: [\n        ClientStatusComponent\n    ],\n    exports: [\n        ClientStatusComponent\n    ],\n    providers: [\n        StatusResolve\n    ]\n})\nexport class ClientStatusModule {\n\n}\n",
        "/*\r\n * Public API Surface of Patient\r\n */\r\n\r\nexport * from './lib/components/patient-list.component';\r\nexport * from './lib/model/patient.model';\r\nexport * from './lib/services/patient.service';\r\nexport * from './lib/patient.module';\r\nexport * from './lib/client-status.module';\r\n",
        "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {ClientStatusComponent as Éµt} from './lib/components/client-status.component';\nexport {DetailedTimelineComponent as Éµf} from './lib/components/detailed.timeline.component';\nexport {PatientDetailsComponent as Éµa} from './lib/components/patient-details.component';\nexport {PatientEditComponent as Éµb} from './lib/components/patient-edit.component';\nexport {SummaryWidgetComponent as Éµg} from './lib/components/summary.widget.component';\nexport {TimelineComponent as Éµd} from './lib/components/timeline.component';\nexport {UniqueHospitalNumValidator as Éµh} from './lib/components/unique-hospital-num.validator';\nexport {WidgetContainerComponent as Éµc} from './lib/components/widget-container.component';\nexport {ObservationService as Éµe} from './lib/services/observation.service';\nexport {PatientResolve as Éµi,ROUTES as Éµj} from './lib/services/patient.route';\nexport {ROUTES as Éµs,StatusResolve as Éµr} from './lib/services/status.route';\nexport {TimelineBadge as Éµl} from './lib/widget/timeline.badge';\nexport {TimelineEvent as Éµm} from './lib/widget/timeline.event';\nexport {TimelineFooter as Éµo} from './lib/widget/timeline.footer';\nexport {TimelineHeader as Éµp} from './lib/widget/timeline.header';\nexport {TimelinePanel as Éµq} from './lib/widget/timeline.panel';\nexport {TimelineWidget as Éµn} from './lib/widget/timeline.widget';\nexport {TimelineWidgetModule as Éµk} from './lib/widget/timeline.widget.module';"
    ],
    "names": [
        "tslib_1.__param",
        "tslib_1.__decorate",
        "moment",
        "ROUTES"
    ],
    "mappings": "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"
}
