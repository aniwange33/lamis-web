{
    "version": 3,
    "sources": [
        "../../../../../../../../node_modules/tslib/tslib.es6.js",
        "ng://lamis-patient-1.2.0/lib/services/patient.service.ts",
        "ng://lamis-patient-1.2.0/lib/components/patient-list.component.ts",
        "ng://lamis-patient-1.2.0/lib/components/patient-details.component.ts",
        "ng://lamis-patient-1.2.0/lib/components/patient-edit.component.ts",
        "ng://lamis-patient-1.2.0/lib/components/detailed.timeline.component.ts",
        "ng://lamis-patient-1.2.0/lib/services/patient.route.ts",
        "ng://lamis-patient-1.2.0/lib/components/widget-container.component.ts",
        "ng://lamis-patient-1.2.0/lib/services/observation.service.ts",
        "ng://lamis-patient-1.2.0/lib/components/timeline.component.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.widget.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.event.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.badge.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.footer.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.header.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.panel.ts",
        "ng://lamis-patient-1.2.0/lib/widget/timeline.widget.module.ts",
        "ng://lamis-patient-1.2.0/lib/components/unique-hospital-num.validator.ts",
        "ng://lamis-patient-1.2.0/lib/components/summary.widget.component.ts",
        "ng://lamis-patient-1.2.0/lib/patient.module.ts",
        "ng://lamis-patient-1.2.0/lib/components/client-status.component.ts",
        "ng://lamis-patient-1.2.0/lib/services/status.route.ts",
        "ng://lamis-patient-1.2.0/lib/client-status.module.ts"
    ],
    "names": [
        "__decorate",
        "decorators",
        "target",
        "key",
        "desc",
        "d",
        "c",
        "arguments",
        "length",
        "r",
        "Object",
        "getOwnPropertyDescriptor",
        "Reflect",
        "decorate",
        "i",
        "defineProperty",
        "__param",
        "paramIndex",
        "decorator",
        "__metadata",
        "metadataKey",
        "metadataValue",
        "metadata",
        "__values",
        "o",
        "m",
        "Symbol",
        "iterator",
        "call",
        "next",
        "value",
        "done",
        "__read",
        "n",
        "e",
        "ar",
        "push",
        "error",
        "__spread",
        "concat",
        "moment",
        "moment_",
        "PatientService",
        "http",
        "serverUrl",
        "authServerProvider",
        "this",
        "resourceUrl",
        "resourceSearchUrl",
        "SERVER_API_URL",
        "prototype",
        "create",
        "patient",
        "_this",
        "copy",
        "convertDateFromClient",
        "post",
        "observe",
        "pipe",
        "map",
        "res",
        "convertDateFromServer",
        "update",
        "put",
        "share",
        "find",
        "id",
        "get",
        "findByUuid",
        "query",
        "req",
        "options",
        "createRequestOption",
        "params",
        "convertDateArrayFromServer",
        "delete",
        "widgets",
        "patientId",
        "observations",
        "activities",
        "detailed",
        "sort",
        "t1",
        "t2",
        "d1",
        "date",
        "diff",
        "getActiveFacility",
        "getStates",
        "getLgasByState",
        "getStateByLga",
        "getFacility",
        "existsByHospitalNumber",
        "hospitalNum",
        "numberExists",
        "getStatusDatesByPatient",
        "forEach",
        "getSummaryForPatient",
        "saveClientStatus",
        "status",
        "console",
        "log",
        "PatientService_1",
        "convertStatusFromClient",
        "updateClientStatus",
        "findClientStatus",
        "body",
        "dateTracked",
        "dateStatus",
        "agreedDate",
        "currentClientStatus",
        "responseType",
        "getStatusName",
        "assign",
        "isValid",
        "format",
        "DATE_FORMAT",
        "dob",
        "dateBirth",
        "dateRegistration",
        "dateStarted",
        "dateConfirmedHiv",
        "dateEnrolledPMTCT",
        "pregnant",
        "pregnancyStatus",
        "breastfeeding",
        "name",
        "surname",
        "otherNames",
        "gender",
        "HttpClient",
        "Inject",
        "args",
        "SERVER_API_URL_CONFIG",
        "AuthServerProvider",
        "Injectable",
        "providedIn",
        "tslib_1.__param",
        "PatientListComponent",
        "patientService",
        "notification",
        "router",
        "activatedRoute",
        "page",
        "loading",
        "itemsPerPage",
        "currentSearch",
        "totalItems",
        "display",
        "facility",
        "ngOnDestroy",
        "ngOnInit",
        "subscribe",
        "onPageChange",
        "searchPatient",
        "search",
        "loadAll",
        "select",
        "data",
        "path",
        "navigateByUrl",
        "obj",
        "uuid",
        "navigate",
        "relativeTo",
        "pageInfo",
        "loadPage",
        "keyword",
        "facilityId",
        "size",
        "onSuccess",
        "headers",
        "onError",
        "patients",
        "openSnackMessage",
        "message",
        "NotificationService",
        "Router",
        "ActivatedRoute",
        "tslib_1.__decorate",
        "Input",
        "Component",
        "selector",
        "template",
        "PatientDetailsComponent",
        "route",
        "cfr",
        "_dialogService",
        "notificationService",
        "_viewContainerRef",
        "renderer2",
        "properties",
        "_a",
        "entity",
        "attacheWidgets",
        "getObservations",
        "edit",
        "updateStatus",
        "openConfirm",
        "title",
        "cancelButton",
        "acceptButton",
        "width",
        "afterClosed",
        "accept",
        "ok",
        "showError",
        "previousState",
        "window",
        "history",
        "back",
        "getComponentFactory",
        "Array",
        "from",
        "values",
        "x",
        "componentType",
        "addObservation",
        "action",
        "split",
        "parts",
        "apply",
        "buildWidget",
        "componentName",
        "icon",
        "factory",
        "undefined",
        "parentFactory",
        "componentRef",
        "container",
        "createComponent",
        "instance",
        "embeddedContainer",
        "cmpName",
        "constructor",
        "TypeError",
        "instanceRef",
        "addClass",
        "location",
        "nativeElement",
        "patientUuid",
        "age",
        "ComponentFactoryResolver",
        "TdDialogService",
        "ViewContainerRef",
        "Renderer2",
        "ViewChild",
        "read",
        "static",
        "PatientEditComponent",
        "loaderService",
        "formBuilder",
        "today",
        "minDob",
        "subtract",
        "minDateRegistration",
        "maxDateBirth",
        "maxDateConfirmed",
        "minDateConfirmed",
        "createEntity",
        "isSaving",
        "lga",
        "clone",
        "add",
        "state",
        "stateChange",
        "states",
        "entityCompare",
        "e1",
        "e2",
        "estimateDob",
        "ageUnit",
        "lgas",
        "dateBirthChanged",
        "isBefore",
        "dateRegistrationChanged",
        "save",
        "open",
        "subscribeToSaveResponse",
        "dobEstimated",
        "result",
        "close",
        "onSaveSuccess",
        "onSaveError",
        "errorMessage",
        "AppLoaderService",
        "FormBuilder",
        "DetailedTimelineComponent",
        "PatientResolve",
        "service",
        "resolve",
        "filter",
        "response",
        "of",
        "ROUTES",
        "breadcrumb",
        "children",
        "component",
        "pagingParams",
        "PagingParamsResolve",
        "authorities",
        "WidgetContainerComponent",
        "ObservationService",
        "deleteObservation",
        "getObservation",
        "TimelineComponent",
        "observationService",
        "loadActivities",
        "view",
        "timeLine",
        "TimelineWidget",
        "TimelineEvent",
        "parent",
        "_side",
        "side",
        "updateRowClasses",
        "checkClass",
        "leftSide",
        "oddClass",
        "evenClass",
        "TimelineBadge",
        "event",
        "TimelineFooter",
        "TimelineHeader",
        "TimelinePanel",
        "COMPONENTS",
        "TimelineWidgetModule",
        "NgModule",
        "declarations",
        "exports",
        "UniqueHospitalNumValidator",
        "validate",
        "control",
        "valueChanges",
        "debounceTime",
        "take",
        "switchMap",
        "UniqueHospitalNumValidator_1",
        "Directive",
        "providers",
        "provide",
        "NG_ASYNC_VALIDATORS",
        "useExisting",
        "multi",
        "SummaryWidgetComponent",
        "summaries",
        "propertiesForSummary",
        "summary",
        "_b",
        "tslib_1.__values",
        "fields",
        "_c",
        "field",
        "dataType",
        "type",
        "toLowerCase",
        "item",
        "FieldType",
        "boolean",
        "CardViewBoolItemModel",
        "label",
        "int",
        "CardViewIntItemModel",
        "float",
        "CardViewFloatItemModel",
        "CardViewDateItemModel",
        "datetime",
        "CardViewDatetimeItemModel",
        "CardViewTextItemModel",
        "PatientModule",
        "imports",
        "CommonModule",
        "NgJhipsterModule",
        "LamisSharedModule",
        "JsonFormModule",
        "MatFormioModule",
        "MatInputModule",
        "MatIconModule",
        "MatDividerModule",
        "MatCardModule",
        "MatSelectModule",
        "MatButtonModule",
        "MatCheckboxModule",
        "MatTabsModule",
        "RouterModule",
        "forChild",
        "MatProgressBarModule",
        "CovalentMessageModule",
        "MatListModule",
        "MatChipsModule",
        "CoreModule",
        "CovalentDialogsModule",
        "CovalentSearchModule",
        "NgbPaginationModule",
        "FormsModule",
        "ReactiveFormsModule",
        "MatDateFormatModule",
        "CustomFormsModule",
        "entryComponents",
        "ClientStatusComponent",
        "appLoaderService",
        "statusDates",
        "statuses",
        "snapshot",
        "paramMap",
        "filterDates",
        "exists",
        "includes",
        "outcome",
        "StatusResolve",
        "ClientStatusModule"
    ],
    "mappings": "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",
    "sourcesContent": [
        "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
        "import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {\n    AuthServerProvider,\n    createRequestOption,\n    DATE_FORMAT,\n    SERVER_API_URL_CONFIG,\n    ServerApiUrlConfig\n} from '@lamis/web-core';\nimport { map, share } from 'rxjs/operators';\nimport { Patient, StatusHistory } from '../model/patient.model';\n\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Facility } from '../model/facility.model';\nimport { ValidationErrors } from '@angular/forms';\nimport { Summary } from '../components/summary.widget.component';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Patient>;\ntype EntityArrayResponseType = HttpResponse<Patient[]>;\n\nexport interface PatientActivity {\n    uuid?: string;\n    id?: any;\n    name?: string;\n    icon?: string;\n    path?: string;\n    editable?: boolean;\n    viewable?: boolean;\n    deletable?: boolean;\n}\n\nexport interface PatientTimeline {\n    date?: string;\n    activities?: PatientActivity[];\n}\n\nexport interface PatientWidget {\n    title: string;\n    componentName: string;\n    index: number;\n    icon?: string;\n}\n\nexport interface PatientObservation {\n    name?: string;\n    path?: string;\n    icon?: string;\n    tooltip?: string;\n}\n\n@Injectable({providedIn: 'root'})\nexport class PatientService {\n    public resourceUrl = '';\n    public resourceSearchUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig,\n                private authServerProvider: AuthServerProvider) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/patients';\n        this.resourceSearchUrl = serverUrl.SERVER_API_URL + '/api/_search/patients';\n    }\n\n    create(patient: Patient): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(patient);\n        return this.http\n            .post<Patient>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(patient: Patient): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(patient);\n        return this.http\n            .put<Patient>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)),\n                share());\n    }\n\n    find(id: any): Observable<EntityResponseType> {\n        return this.http\n            .get<Patient>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: any): Observable<EntityResponseType> {\n        return this.http\n            .get<Patient>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<Patient[]>(this.resourceUrl, {params: options, observe: 'response'})\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    widgets(patientId: number): Observable<PatientWidget[]> {\n        return this.http.get<PatientWidget[]>(`${this.resourceUrl}/${patientId}/widgets`, {observe: 'body'})\n    }\n\n    observations(patientId: number): Observable<PatientObservation[]> {\n        return this.http.get<PatientObservation[]>(`${this.resourceUrl}/${patientId}/observations`, {\n            observe: 'body'\n        })\n    }\n\n    activities(patientId: number, detailed: boolean): Observable<PatientTimeline[]> {\n        return this.http.get<PatientTimeline[]>(`${this.resourceUrl}/${patientId}/activities?full=${detailed}`, {observe: 'body'})\n            .pipe(map(res => {\n                res.sort((t1, t2) => {\n                    const d1 = moment(t1.date, 'DD MMM, YYYY');\n                    const d2 = moment(t2.date, 'DD MMM, YYYY');\n                    return d2.diff(d1);\n                });\n                return res;\n            }))\n    }\n\n    getActiveFacility() {\n        return this.http.get<Facility>('/api/facilities/active')\n    }\n\n    getStates() {\n        return this.http.get<any[]>('/api/states')\n    }\n\n    getLgasByState(id) {\n        return this.http.get<any[]>(`/api/provinces/state/${id}`)\n    }\n\n    getStateByLga(id) {\n        return this.http.get(`/api/provinces/${id}/state`)\n    }\n\n    getFacility(id) {\n        return this.http.get(`/api/facilities/${id}`)\n    }\n\n    existsByHospitalNumber(hospitalNum: string): Observable<ValidationErrors | null> {\n        return this.http.get<boolean>(`${this.resourceUrl}/exists/hospital-number/${hospitalNum}`)\n            .pipe(map((res => res ? {'numberExists': true} : null)));\n    }\n\n    getStatusDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`/api/client-statuses/patient/${patientId}/status-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            )\n    }\n\n    getSummaryForPatient(id: number) {\n        return this.http.get<Summary[]>(`${this.resourceUrl}/${id}/summary`)\n    }\n\n    saveClientStatus(status: StatusHistory) {\n        console.log('Status', status);\n        const copy = PatientService.convertStatusFromClient(status);\n        console.log('Copy', copy);\n        return this.http.post<StatusHistory>('/api/client-statuses', copy, {observe: 'response'})\n    }\n\n    updateClientStatus(status: StatusHistory) {\n        const copy = PatientService.convertStatusFromClient(status);\n        return this.http.put<StatusHistory>('/api/client-statuses', copy, {observe: 'response'})\n    }\n\n    findClientStatus(id) {\n        return this.http.get<StatusHistory>(`/api/client-statuses/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<StatusHistory>) => {\n                res.body.dateTracked = res.body.dateTracked != null ? moment(res.body.dateTracked) : null;\n                res.body.dateStatus = res.body.dateStatus != null ? moment(res.body.dateStatus) : null;\n                res.body.agreedDate = res.body.agreedDate != null ? moment(res.body.agreedDate) : null;\n                return res;\n            }))\n    }\n\n    currentClientStatus(patientId: string) {\n        return this.http.get(`/api/client-statuses/patient/${patientId}/current`, {responseType: 'text'})\n    }\n\n    getStatusName(id: number) {\n        return this.http.get(`/api/client-statuses/${id}/name`, {responseType: 'text'})\n    }\n\n    private static convertStatusFromClient(status: StatusHistory): StatusHistory {\n        const copy: StatusHistory = Object.assign({}, status, {\n                dateStatus: status.dateStatus != null && status.dateStatus.isValid() ? status.dateStatus.format(DATE_FORMAT) : null,\n                agreedDate: status.agreedDate != null && status.agreedDate.isValid() ? status.agreedDate.format(DATE_FORMAT) : null,\n                dateTracked: status.dateTracked != null && status.dateTracked.isValid() ? status.dateTracked.format(DATE_FORMAT) : null,\n            }\n        );\n        return copy;\n    }\n\n    protected convertDateFromClient(patient: Patient): Patient {\n        const copy: Patient = Object.assign({}, patient, {\n            dob: patient.dateBirth != null && patient.dateBirth.isValid() ? patient.dateBirth.format(DATE_FORMAT) : null,\n            dateRegistration: patient.dateRegistration != null && patient.dateRegistration.isValid() ? patient.dateRegistration.format(DATE_FORMAT) : null,\n            dateStarted: patient.dateStarted != null && patient.dateStarted.isValid() ? patient.dateStarted.format(DATE_FORMAT) : null,\n            dateConfirmedHiv: patient.dateConfirmedHiv != null && patient.dateConfirmedHiv.isValid() ? patient.dateConfirmedHiv.format(DATE_FORMAT) : null,\n            dateEnrolledPMTCT: patient.dateEnrolledPMTCT != null && patient.dateEnrolledPMTCT.isValid() ? patient.dateEnrolledPMTCT.format(DATE_FORMAT) : null,\n            pregnant: patient.pregnancyStatus === 2,\n            breastfeeding: patient.pregnancyStatus === 3\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.name = res.body.surname + ', ' + res.body.otherNames;\n            res.body.dateBirth = res.body.dateBirth != null ? moment(res.body.dateBirth) : null;\n            res.body.dateRegistration = res.body.dateRegistration != null ? moment(res.body.dateRegistration) : null;\n            res.body.dateConfirmedHiv = res.body.dateConfirmedHiv != null ? moment(res.body.dateConfirmedHiv) : null;\n            res.body.dateEnrolledPMTCT = res.body.dateEnrolledPMTCT != null ? moment(res.body.dateEnrolledPMTCT) : null;\n            res.body.dateStarted = res.body.dateStarted != null ? moment(res.body.dateStarted) : null;\n            res.body.pregnancyStatus = res.body.pregnant != null && res.body.pregnant ? 2 : res.body.gender === 'FEMALE' ? 1 : null;\n            res.body.pregnancyStatus = res.body.breastfeeding != null && res.body.breastfeeding ? 3 : res.body.gender === 'FEMALE' ? 1 : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((patient: Patient) => {\n                patient.name = patient.surname + ', ' + patient.otherNames;\n                patient.dateBirth = patient.dateBirth != null ? moment(patient.dateBirth) : null;\n                patient.dateRegistration = patient.dateRegistration != null ? moment(patient.dateRegistration) : null;\n                patient.dateStarted = patient.dateStarted != null ? moment(patient.dateStarted) : null;\n            });\n        }\n        return res;\n    }\n}\n",
        "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { PatientService } from '../services/patient.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { Patient } from '../model/patient.model';\r\nimport { Facility } from '../model/facility.model';\r\n\r\n@Component({\r\n    selector: 'lamis-patients',\r\n    templateUrl: './patient-list.component.html'\r\n})\r\nexport class PatientListComponent implements OnInit, OnDestroy {\r\n    @Input()\r\n    path: string;\r\n    page = 0;\r\n    patients: Patient[];\r\n    loading = false;\r\n    public itemsPerPage: number = 10;\r\n    public currentSearch: string = '';\r\n    totalItems = 0;\r\n    display = 'list';\r\n    facility: Facility = {};\r\n\r\n    constructor(private patientService: PatientService,\r\n                protected notification: NotificationService,\r\n                protected router: Router,\r\n                protected activatedRoute: ActivatedRoute) {\r\n        this.currentSearch = '';\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.patientService.getActiveFacility().subscribe(res => {\r\n            this.facility = res;\r\n            this.onPageChange(0);\r\n        })\r\n    }\r\n\r\n    searchPatient(search: any) {\r\n        this.currentSearch = search;\r\n        this.page = 0;\r\n        this.loadAll();\r\n    }\r\n\r\n\r\n    public select(data: any): any {\r\n        if (!!this.path) {\r\n            this.router.navigateByUrl(`${this.path}/${data.obj.uuid}`)\r\n        } else {\r\n            this.router.navigate(['..', 'patients', data.obj.uuid, 'view'], {relativeTo: this.activatedRoute});\r\n        }\r\n    }\r\n\r\n    onPageChange(pageInfo) {\r\n        this.page = pageInfo;\r\n        this.loadAll();\r\n    }\r\n\r\n    loadPage(page: number) {\r\n        this.loadAll();\r\n    }\r\n\r\n    loadAll() {\r\n        this.loading = true;\r\n        this.patientService.query({\r\n            keyword: this.currentSearch,\r\n            page: this.page > 0 ? this.page - 1 : 0,\r\n            facilityId: this.facility.id || 0,\r\n            size: this.itemsPerPage,\r\n            sort: ['id', 'asc']\r\n        }).subscribe(\r\n            (res: any) => {\r\n                this.onSuccess(res.body, res.headers)\r\n            },\r\n            (res: any) => this.onError(res)\r\n        );\r\n    }\r\n\r\n    protected onSuccess(data: any, headers: any) {\r\n        this.patients = data;\r\n        this.totalItems = headers.get('X-Total-Count');\r\n        this.loading = false;\r\n    }\r\n\r\n    private onError(error: any) {\r\n        this.notification.openSnackMessage(error.message);\r\n        this.loading = false;\r\n    }\r\n}\r\n\r\n",
        "import {\r\n    Component,\r\n    ComponentFactory,\r\n    ComponentFactoryResolver,\r\n    OnDestroy,\r\n    OnInit,\r\n    Renderer2,\r\n    ViewChild,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\nimport { Patient } from '../model/patient.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PatientObservation, PatientService, PatientWidget } from '../services/patient.service';\r\nimport { TdDialogService } from '@covalent/core';\r\nimport { CardViewItem, NotificationService } from '@alfresco/adf-core';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-patient',\r\n    templateUrl: './patient-details.component.html',\r\n    styleUrls: ['./patient-details.component.scss']\r\n})\r\nexport class PatientDetailsComponent implements OnInit, OnDestroy {\r\n    template = 'patient-details';\r\n    entity: Patient;\r\n    observations: PatientObservation[];\r\n    @ViewChild('container', {read: ViewContainerRef, static: true}) container: ViewContainerRef;\r\n    properties: CardViewItem[] = [];\r\n    status: string;\r\n\r\n    constructor(private router: Router, private route: ActivatedRoute, private patientService: PatientService,\r\n                private cfr: ComponentFactoryResolver, private _dialogService: TdDialogService,\r\n                private notificationService: NotificationService, private _viewContainerRef: ViewContainerRef,\r\n                private renderer2: Renderer2) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            this.patientService.currentClientStatus(entity.uuid).subscribe(res => {\r\n                this.status = res;\r\n            });\r\n            this.attacheWidgets();\r\n            this.getObservations();\r\n        });\r\n    }\r\n\r\n    edit() {\r\n        this.router.navigate(['..', 'edit'], {relativeTo: this.route});\r\n    }\r\n\r\n    updateStatus() {\r\n        this.router.navigate(['/', 'client-statuses', 'patient', this.entity.uuid, 'new']);\r\n    }\r\n\r\n    delete() {\r\n        this._dialogService.openConfirm({\r\n            title: 'Confirm',\r\n            message: 'Do you want to delete this patient, action cannot be reversed?',\r\n            cancelButton: 'No',\r\n            acceptButton: 'Yes',\r\n            width: '500px',\r\n        }).afterClosed().subscribe((accept: boolean) => {\r\n            if (accept) {\r\n                this.patientService.delete(this.entity.id).subscribe((res) => {\r\n                    if (res.ok) {\r\n                        this.router.navigate(['patients'])\r\n                    } else {\r\n                        this.notificationService.showError('Error deleting patient, please try again')\r\n                    }\r\n                })\r\n            } else {\r\n                // DO SOMETHING ELSE\r\n            }\r\n        });\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    private getComponentFactory(name: string) {\r\n        const factories = Array.from(this.cfr['_factories'].values());\r\n        return <ComponentFactory<any>>factories.find((x: any) => x.componentType.name === name);\r\n    }\r\n\r\n    getObservations() {\r\n        this.patientService.observations(this.entity.id).subscribe((res: PatientObservation[]) => this.observations = res)\r\n    }\r\n\r\n    addObservation(action: PatientObservation) {\r\n        const path = action.path.split('/');\r\n        const parts = ['/'];\r\n        parts.push(...path);\r\n        parts.push('patient', this.entity.uuid, 'new');\r\n        this.router.navigate([...parts]);\r\n    }\r\n\r\n    private attacheWidgets() {\r\n        this.buildWidget('TimelineComponent', 'Recent Activities', 'timeline');\r\n        this.buildWidget('SummaryWidgetComponent', 'Patient Summary', 'account_balance_wallet');\r\n        /*this.patientService.widgets(this.entity.id).subscribe((res: PatientWidget[]) => {\r\n            res.forEach((widget: PatientWidget) => {\r\n                this.buildWidget(widget.componentName, widget.title, widget.icon);\r\n            })\r\n        });*/\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n    }\r\n\r\n    private buildWidget(componentName: string, title: string, icon: string) {\r\n        const factory = this.getComponentFactory(componentName);\r\n        if (factory !== undefined) {\r\n            const parentFactory = this.getComponentFactory('WidgetContainerComponent');\r\n            const componentRef = this.container.createComponent(parentFactory);\r\n            if (!componentRef.instance.embeddedContainer) {\r\n                const cmpName = componentRef.instance.constructor.name;\r\n                throw new TypeError(`Trying to render embedded content. ${cmpName} must have @ViewChild() embeddedContainer defined`);\r\n            }\r\n            console.log('Created component', componentRef);\r\n            const instanceRef = componentRef.instance.embeddedContainer.createComponent(factory);\r\n            this.renderer2.addClass(componentRef.location.nativeElement, 'col-md-6');\r\n            componentRef.instance.icon = icon;\r\n            componentRef.instance.title = title;\r\n            try {\r\n                instanceRef.instance.patientId = this.entity.id;\r\n                instanceRef.instance.patientUuid = this.entity.uuid;\r\n            } catch (e) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    age(dob: Moment) {\r\n        let age = moment().diff(dob, 'years');\r\n        if (age > 0) {\r\n            return age + ' year(s)'\r\n        }\r\n\r\n        age = moment().diff(dob, 'months');\r\n        if (age > 0) {\r\n            return age + ' month(s)';\r\n        }\r\n        return moment().diff(dob, 'weeks') + ' week(s)';\r\n    }\r\n}\r\n",
        "import { Component, OnInit } from '@angular/core';\r\nimport { Patient } from '../model/patient.model';\r\nimport { PatientService } from '../services/patient.service';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment_ from 'moment';\r\nimport { DurationInputArg2, Moment } from 'moment';\r\nimport { AppLoaderService, entityCompare } from '@lamis/web-core';\r\nimport { FormBuilder } from '@angular/forms';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-patient-edit',\r\n    templateUrl: './patient-edit.component.html'\r\n})\r\nexport class PatientEditComponent implements OnInit {\r\n    template = 'patient-edit';\r\n    entity: Patient;\r\n    patient: Patient;\r\n    isSaving: boolean;\r\n    error = false;\r\n    today = moment();\r\n    minDob = moment().subtract(75, 'years');\r\n    minDateRegistration: Moment = moment('2008', 'YYYY');\r\n    maxDateBirth: Moment = moment().subtract(2, 'months');\r\n    maxDateConfirmed = moment();\r\n    minDateConfirmed = moment('2008', 'YYYY');\r\n    age: number;\r\n    ageUnit: DurationInputArg2;\r\n    state: any;\r\n    states: any[];\r\n    lgas: any[];\r\n\r\n    constructor(private patientService: PatientService,\r\n                protected notification: NotificationService,\r\n                private loaderService: AppLoaderService,\r\n                protected activatedRoute: ActivatedRoute,\r\n                private formBuilder: FormBuilder) {\r\n    }\r\n\r\n    createEntity(): Patient {\r\n        return <Patient>{};\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.patientService.getActiveFacility().subscribe((res: any) => {\r\n            this.entity.facility = res;\r\n        });\r\n        this.isSaving = false;\r\n        this.activatedRoute.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            if (this.entity === undefined) {\r\n                this.entity = this.createEntity();\r\n            }\r\n            if (this.entity.id && this.entity.lga) {\r\n                this.minDateRegistration = this.entity.dateBirth.clone().add(2, 'month');\r\n                this.minDateConfirmed = this.entity.dateBirth.clone().add(1, 'month');\r\n                this.patientService.getStateByLga(this.entity.lga.id).subscribe(res => {\r\n                    this.state = res;\r\n                    this.stateChange(this.state.id);\r\n                })\r\n            }\r\n        });\r\n\r\n        this.patientService.getStates().subscribe(res => this.states = res);\r\n    }\r\n\r\n    entityCompare(e1, e2) {\r\n        return entityCompare(e1, e2);\r\n    }\r\n\r\n    estimateDob() {\r\n        if (this.age && this.ageUnit && this.entity.dateRegistration) {\r\n            const dateRegistration = this.entity.dateRegistration;\r\n            this.entity.dateBirth = dateRegistration.clone().subtract(this.age, this.ageUnit);\r\n            this.minDateConfirmed = this.entity.dateBirth.clone().add(1, 'months');\r\n        }\r\n    }\r\n\r\n    stateChange(id) {\r\n        this.patientService.getLgasByState(id).subscribe(res => this.lgas = res)\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    dateBirthChanged(date: Moment) {\r\n        this.minDateRegistration = date.clone().add(2, 'months');\r\n        this.minDateConfirmed = date.clone().add(1, 'months');\r\n        if (this.minDateRegistration.isBefore(moment('2008', 'YYYY'), 'day')) {\r\n            this.minDateRegistration = moment('2008', 'YYYY');\r\n            this.minDateConfirmed = moment('2008', 'YYYY');\r\n        }\r\n    }\r\n\r\n    dateRegistrationChanged(date: Moment) {\r\n        this.maxDateBirth = date.clone().subtract(2, 'months');\r\n        this.maxDateConfirmed = date.clone();\r\n    }\r\n\r\n    save() {\r\n        //this.progressBar.mode = 'indeterminate';\r\n        this.loaderService.open('Saving patient...');\r\n        this.isSaving = true;\r\n        if (!this.entity.id) {\r\n            if (this.entity.dobEstimated) {\r\n                this.entity.dateBirth = this.entity.dateRegistration.clone().subtract(this.age, this.ageUnit);\r\n            }\r\n            this.subscribeToSaveResponse(this.patientService.create(this.entity));\r\n        } else {\r\n            this.subscribeToSaveResponse(this.patientService.update(this.entity));\r\n        }\r\n    }\r\n\r\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\r\n        this.loaderService.close();\r\n        result.subscribe(\r\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\r\n            (res: HttpErrorResponse) => {\r\n                this.onSaveError();\r\n                this.onError(res.message)\r\n            });\r\n    }\r\n\r\n    private onSaveSuccess(result: any) {\r\n        this.isSaving = false;\r\n        this.notification.openSnackMessage('Patient successfully saved');\r\n        this.previousState();\r\n    }\r\n\r\n    private onSaveError() {\r\n        this.isSaving = false;\r\n        this.error = true;\r\n        //this.progressBar.mode = 'determinate';\r\n    }\r\n\r\n    protected onError(errorMessage: string) {\r\n        this.notification.showError(errorMessage);\r\n    }\r\n}\r\n",
        "import { Component, OnInit } from \"@angular/core\";\nimport { PatientService } from \"../services/patient.service\";\nimport { ActivatedRoute } from \"@angular/router\";\n\n@Component({\n    selector: 'detailed-timeline',\n    templateUrl: './detailed.timeline.component.html'\n})\nexport class DetailedTimelineComponent implements OnInit {\n    id: number;\n    uuid: string;\n\n    constructor(private patientService: PatientService, private route: ActivatedRoute) {\n    }\n\n    ngOnInit(): void {\n        this.route.data.subscribe(({entity}) => {\n            const patient = !!entity && entity.body ? entity.body : entity;\n            this.id = patient.id;\n            this.uuid = patient.uuid;\n        });\n    }\n\n    previousState() {\n        window.history.back();\n    }\n}\n",
        "import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { PagingParamsResolve, UserRouteAccessService } from '@lamis/web-core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PatientService } from './patient.service';\nimport { Patient } from '../model/patient.model';\nimport { PatientDetailsComponent } from '../components/patient-details.component';\nimport { PatientEditComponent } from '../components/patient-edit.component';\nimport { PatientListComponent } from '../components/patient-list.component';\nimport { DetailedTimelineComponent } from '../components/detailed.timeline.component';\n\n@Injectable()\nexport class PatientResolve implements Resolve<Patient> {\n    constructor(private service: PatientService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Patient> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Patient>) => response.ok),\n                map((patient: HttpResponse<Patient>) => patient.body)\n            );\n        }\n        return of(<Patient>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Patients',\n            breadcrumb: 'PATIENTS'\n        },\n        children: [\n            {\n                path: '',\n                component: PatientListComponent,\n                resolve: {\n                    pagingParams: PagingParamsResolve\n                },\n                data: {},\n            },\n            {\n                path: ':id/view',\n                component: PatientDetailsComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Patient Details',\n                    breadcrumb: 'PATIENT DETAILS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'new',\n                component: PatientEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Add Patient',\n                    breadcrumb: 'ADD PATIENT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/edit',\n                component: PatientEditComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Patient Edit',\n                    breadcrumb: 'PATIENT EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/timeline',\n                component: DetailedTimelineComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Patient Timeline',\n                    breadcrumb: 'PATIENT TIMELINE'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n",
        "import { Component, HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n@Component({\n    selector:'widget-container',\n    templateUrl: './widget-container.component.html',\n    styleUrls: ['./widget-container.component.scss']\n})\nexport class WidgetContainerComponent {\n    @Input()\n    title: string;\n    @Input()\n    icon: string;\n\n    @ViewChild('container', { read: ViewContainerRef,  static: true })\n    embeddedContainer: ViewContainerRef;\n}\n",
        "import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\n\n@Injectable({providedIn:'root'})\nexport class ObservationService {\n    resourceUrl: string = '';\n\n    constructor(private http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api';\n    }\n\n    deleteObservation(path: string, id: string) {\n        return this.http.delete(`${this.resourceUrl}/${path}/${id}`, {observe: 'response'})\n    }\n\n    getObservation(path: string, id: string) {\n        return this.http.get<any>(`${this.resourceUrl}/${path}/by-uuid/${id}`,{observe: 'response'})\n    }\n}\n",
        "import { Component, Input, OnInit } from '@angular/core';\nimport { PatientService, PatientTimeline } from '../services/patient.service';\nimport { Router } from '@angular/router';\nimport { TdDialogService } from '@covalent/core';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { ObservationService } from '../services/observation.service';\n\n@Component({\n    selector: 'patient-timeline',\n    templateUrl: './timeline.component.html'\n})\nexport class TimelineComponent implements OnInit {\n    @Input()\n    patientId: number;\n    @Input()\n    patientUuid: string;\n    @Input()\n    detailed: boolean = false;\n    timeLine: PatientTimeline[];\n\n    constructor(private patientService: PatientService, private router: Router, private observationService: ObservationService,\n                private _dialogService: TdDialogService, private notificationService: NotificationService) {\n    }\n\n    ngOnInit(): void {\n        this.loadActivities()\n    }\n\n    view(path: string, id: string) {\n        this.router.navigate(['/', path, id, 'patient', this.patientUuid, 'view'])\n    }\n\n    edit(path: string, id: string) {\n        this.router.navigate(['/', path, id, 'patient', this.patientUuid, 'edit'])\n    }\n\n    delete(path: string, id: string) {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this event, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.observationService.getObservation(path, id).subscribe(obj => {\n                    if (obj.body) {\n                        this.observationService.deleteObservation(path, obj.body.id).subscribe((res) => {\n                            if (res.ok) {\n                                this.patientService.activities(this.patientId, this.detailed).subscribe((res) => this.timeLine = res)\n                            } else {\n                                this.notificationService.showError('Error deleting event, please try again')\n                            }\n                        })\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    loadActivities() {\n        this.patientService.activities(this.patientId, this.detailed).subscribe((res) => this.timeLine = res)\n    }\n}\n",
        "import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: 'timeline',\n    templateUrl: './timeline.widget.html'\n})\nexport class TimelineWidget implements OnInit{\n    ngOnInit(): void {\n    }\n\n}\n",
        "import { Component, Input, OnInit } from '@angular/core';\nimport { TimelineWidget } from './timeline.widget';\n\n@Component({\n    selector: 'timeline-event',\n    templateUrl: './timeline.event.html'\n})\nexport class TimelineEvent implements OnInit {\n\n    oddClass;\n    evenClass;\n    _side: string = 'left';\n    @Input()\n    set side(side: string) {\n        this._side = side;\n        this.updateRowClasses(this._side);\n    }\n    \n    constructor(private parent: TimelineWidget) {\n    }\n\n    ngOnInit(): void {\n        this.updateRowClasses(this._side);\n    }\n\n    checkClass(side, leftSide) {\n        let leftClass = '';\n        let rightClass = 'timeline-inverted';\n\n        if (side === 'left' || (!side && leftSide === true)) {\n            return leftClass;\n        } else if ((side === 'alternate' || !side) && leftSide === false) {\n            return rightClass;\n        } else if (side === 'right') {\n            return rightClass;\n        } else {\n            return leftClass;\n        }\n    }\n\n    updateRowClasses(value) {\n        this.oddClass = this.checkClass(value, true);\n        this.evenClass = this.checkClass(value, false);\n    }\n}\n",
        "import { Component } from '@angular/core';\nimport { TimelineEvent } from './timeline.event';\n\n@Component({\n    selector: 'timeline-badge',\n    template: `\n        <div class='timeline-badge'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineBadge {\n    constructor(private event: TimelineEvent) {\n    }\n}\n",
        "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'timeline-footer',\n    template: `\n        <div class='timeline-footer'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineFooter {\n    \n}\n",
        "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'timeline-header',\n    template: `\n        <div class='timeline-header'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineHeader {\n\n}\n",
        "import { Component } from '@angular/core';\nimport { TimelineEvent } from './timeline.event';\n\n@Component({\n    selector: 'timeline-panel',\n    template:\n            `\n        <div class='timeline-panel'>\n            <ng-content></ng-content>\n        </div>`\n})\nexport class TimelinePanel {\n    constructor(private event: TimelineEvent) {\n    }\n}\n",
        "import { NgModule } from '@angular/core';\nimport { TimelineWidget } from './timeline.widget';\nimport { TimelineEvent } from './timeline.event';\nimport { TimelineBadge } from './timeline.badge';\nimport { TimelineFooter } from './timeline.footer';\nimport { TimelineHeader } from './timeline.header';\nimport { TimelinePanel } from './timeline.panel';\n\nconst COMPONENTS = [TimelineBadge, TimelineEvent, TimelineFooter, TimelineHeader, TimelinePanel, TimelineWidget];\n\n@NgModule({\n    declarations: [\n        ...COMPONENTS\n    ],\n    exports: [\n        ...COMPONENTS\n    ]\n})\nexport class TimelineWidgetModule {\n\n}\n",
        "import { AbstractControl, AsyncValidator, NG_ASYNC_VALIDATORS, ValidationErrors } from '@angular/forms';\nimport { Directive } from '@angular/core';\nimport { PatientService } from '../services/patient.service';\nimport { Observable, of } from 'rxjs';\nimport { debounceTime, switchMap, take } from 'rxjs/operators';\n\n@Directive({\n    selector: '[uniqueHospitalNum]',\n    providers: [{\n        provide: NG_ASYNC_VALIDATORS,\n        useExisting: UniqueHospitalNumValidator,\n        multi: true\n    }]\n})\nexport class UniqueHospitalNumValidator implements AsyncValidator {\n    constructor(private patientService: PatientService) {\n    }\n\n    validate(control: AbstractControl): Observable<ValidationErrors | null> {\n        return control.valueChanges\n            .pipe(\n                debounceTime(300),\n                take(1),\n                switchMap(value => this.patientService.existsByHospitalNumber(value))\n            );\n    }\n}\n",
        "import { Component, Input, OnInit } from '@angular/core';\nimport {\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewDatetimeItemModel,\n    CardViewFloatItemModel,\n    CardViewIntItemModel,\n    CardViewItem,\n    CardViewTextItemModel\n} from '@alfresco/adf-core';\nimport { FieldType } from '@lamis/web-core';\nimport { PatientService } from '../services/patient.service';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\nexport interface Summary {\n    header?: string;\n    headerClass?: string;\n    fields: Field[];\n}\n\nexport interface Field {\n    type: FieldType;\n    label: string;\n    value: any;\n}\n\n@Component({\n    selector: 'patient-summary-widget',\n    templateUrl: './summary.widget.component.html'\n})\nexport class SummaryWidgetComponent implements OnInit {\n    @Input()\n    patientId: number;\n    @Input()\n    patientUuid: string;\n    @Input()\n\n    summaries: Summary[];\n\n    constructor(private patientService: PatientService) {\n    }\n\n    ngOnInit(): void {\n        this.patientService.getSummaryForPatient(this.patientId).subscribe(res => this.summaries = res)\n    }\n\n    public propertiesForSummary(summary: Summary): Array<CardViewItem> {\n        const properties = [];\n        for (const field of summary.fields) {\n            const dataType = field.type.toLowerCase();\n            let item: CardViewItem;\n            switch (dataType) {\n                case FieldType.boolean:\n                    item = new CardViewBoolItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label\n                    });\n                    break;\n                case FieldType.int:\n                    item = new CardViewIntItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n                    break;\n                case FieldType.float:\n                    item = new CardViewFloatItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n                    break;\n                case FieldType.date:\n                    item = new CardViewDateItemModel({\n                        value: field.value ? moment(field.value) : null,\n                        key: '',\n                        label: field.label,\n                        format: 'dd MMM, yyyy'\n                    });\n                    break;\n                case FieldType.datetime:\n                    item = new CardViewDatetimeItemModel({\n                        value: field.value ? moment(field.value) : null,\n                        key: '',\n                        label: field.label,\n                        format: 'dd MMM, yyyy HH:mm'\n                    });\n                    break;\n                default:\n                    item = new CardViewTextItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n            }\n            properties.push(item);\n        }\n        return properties;\n    }\n}\n",
        "import { CoreModule } from '@alfresco/adf-core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDividerModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatProgressBarModule,\r\n    MatSelectModule,\r\n    MatTabsModule\r\n} from '@angular/material';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CovalentDialogsModule, CovalentMessageModule, CovalentSearchModule } from '@covalent/core';\r\nimport { JsonFormModule, LamisSharedModule, MatDateFormatModule } from '@lamis/web-core';\r\nimport { NgbPaginationModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgJhipsterModule } from 'ng-jhipster';\r\nimport { PatientDetailsComponent } from './components/patient-details.component';\r\nimport { PatientEditComponent } from './components/patient-edit.component';\r\nimport { PatientListComponent } from './components/patient-list.component';\r\nimport { PatientResolve, ROUTES } from './services/patient.route';\r\nimport { WidgetContainerComponent } from './components/widget-container.component';\r\nimport { TimelineComponent } from './components/timeline.component';\r\nimport { TimelineWidgetModule } from './widget/timeline.widget.module';\r\nimport { ObservationService } from './services/observation.service';\r\nimport { MatFormioModule } from 'angular-material-formio';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { UniqueHospitalNumValidator } from './components/unique-hospital-num.validator';\r\nimport { CustomFormsModule } from 'ng2-validation';\r\nimport { DetailedTimelineComponent } from './components/detailed.timeline.component';\r\nimport { SummaryWidgetComponent } from './components/summary.widget.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PatientListComponent,\r\n        PatientDetailsComponent,\r\n        PatientEditComponent,\r\n        WidgetContainerComponent,\r\n        TimelineComponent,\r\n        DetailedTimelineComponent,\r\n        SummaryWidgetComponent,\r\n        UniqueHospitalNumValidator\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        NgJhipsterModule,\r\n        LamisSharedModule,\r\n        JsonFormModule,\r\n        MatFormioModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatDividerModule,\r\n        MatCardModule,\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        MatCheckboxModule,\r\n        MatTabsModule,\r\n        RouterModule.forChild(ROUTES),\r\n        MatProgressBarModule,\r\n        CovalentMessageModule,\r\n        MatListModule,\r\n        MatChipsModule,\r\n        CoreModule,\r\n        CovalentDialogsModule,\r\n        CovalentSearchModule,\r\n        NgbPaginationModule,\r\n        TimelineWidgetModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatDateFormatModule,\r\n        CustomFormsModule,\r\n    ],\r\n    exports: [\r\n        PatientListComponent,\r\n        PatientDetailsComponent,\r\n        PatientEditComponent\r\n    ],\r\n    entryComponents: [\r\n        WidgetContainerComponent,\r\n        TimelineComponent,\r\n        SummaryWidgetComponent\r\n    ],\r\n    providers: [\r\n        //PatientService,\r\n        //ObservationService,\r\n        PatientResolve\r\n    ]\r\n})\r\nexport class PatientModule {\r\n}\r\n",
        "import { Component, OnInit } from '@angular/core';\nimport { PatientService } from '../services/patient.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { AppLoaderService } from '@lamis/web-core';\nimport { Patient, StatusHistory } from '../model/patient.model';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'client-status',\n    templateUrl: './client-status.component.html'\n})\nexport class ClientStatusComponent implements OnInit {\n    isSaving: boolean;\n    entity: StatusHistory;\n    patient: Patient;\n    status: string;\n    statusDates: Moment[] = [];\n    today = moment();\n    statuses = ['TRACED_UNABLE_TO_LOCATE', 'TRACED_AGREED_TO_RETURN_TO_CARE', 'DID_NOT_ATTEMPT_TO_TRACE'];\n\n    constructor(private patientService: PatientService, private activatedRoute: ActivatedRoute, private router: Router,\n                private notification: NotificationService, private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): StatusHistory {\n        return <StatusHistory>{};\n    }\n\n    ngOnInit(): void {\n        this.isSaving = false;\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.patientService.findByUuid(patientId).subscribe((res) => {\n                this.entity.patient = res.body;\n                this.patient = res.body;\n                this.entity.facility = res.body.facility;\n                this.patientService.getStatusDatesByPatient(res.body.id).subscribe((res) => {\n                    this.statusDates = res;\n                });\n            });\n\n            if (this.entity.id) {\n                this.patientService.getStatusName(this.entity.id).subscribe(res => this.status = res)\n            }\n        });\n    }\n\n    filterDates(date: Moment): boolean {\n        let exists = false;\n\n        this.statusDates.forEach(d => {\n            if (date.diff(d, 'days') === 0) {\n                exists = true;\n            }\n        });\n        return (this.entity.id && date.diff(this.entity.dateStatus, 'days') === 0) || !exists;\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    save() {\n        this.appLoaderService.open('Saving Client status update...');\n        this.isSaving = true;\n        if (this.statuses.includes(this.entity.status)) {\n            this.entity.outcome = this.entity.status;\n            this.entity.status = null;\n\n            console.log('Clearing status')\n        }\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.patientService.updateClientStatus(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.patientService.saveClientStatus(this.entity));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.appLoaderService.close();\n                this.onSaveError();\n                this.onError(res.message)\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.openSnackMessage('Client status update successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.notification.openSnackMessage('Error saving status update');\n    }\n\n    protected onError(errorMessage: string) {\n        this.isSaving = false;\n        this.notification.showError(errorMessage);\n    }\n}\n",
        "import { ClientStatusComponent } from '../components/client-status.component';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { StatusHistory } from '../model/patient.model';\nimport { PatientService } from './patient.service';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter, map } from 'rxjs/operators';\nimport { HttpResponse } from '@angular/common/http';\n\n@Injectable()\nexport class StatusResolve implements Resolve<StatusHistory> {\n    constructor(private service: PatientService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<StatusHistory> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findClientStatus(id).pipe(\n                filter((response: HttpResponse<StatusHistory>) => response.ok),\n                map((patient: HttpResponse<StatusHistory>) => patient.body)\n            );\n        }\n        return of(<StatusHistory>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Clinic Visit',\n            breadcrumb: 'CLINIC VISIT'\n        },\n        children: [\n            {\n                path: 'patient/:patientId/new',\n                component: ClientStatusComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Update Client Status',\n                    breadcrumb: 'UPDATE CLIENT STATUS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: ClientStatusComponent,\n                resolve: {\n                    entity: StatusResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Client Status Edit',\n                    breadcrumb: 'CLIENT STATUS EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n",
        "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CovalentDialogsModule } from '@covalent/core';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { JsonFormModule, LamisSharedModule, MatDateFormatModule } from '@lamis/web-core';\nimport { MatFormioModule } from 'angular-material-formio';\nimport { RouterModule } from '@angular/router';\nimport { ROUTES, StatusResolve } from './services/status.route';\nimport {\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatDividerModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressBarModule,\n    MatSelectModule,\n    MatTabsModule\n} from '@angular/material';\nimport { ClientStatusComponent } from './components/client-status.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CovalentDialogsModule,\n        LamisSharedModule,\n        JsonFormModule,\n        MatFormioModule,\n        MatInputModule,\n        MatIconModule,\n        MatDividerModule,\n        MatCardModule,\n        MatSelectModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatTabsModule,\n        RouterModule.forChild(ROUTES),\n        MatProgressBarModule,\n        CoreModule,\n        MatDateFormatModule\n    ],\n    declarations: [\n        ClientStatusComponent\n    ],\n    exports: [\n        ClientStatusComponent\n    ],\n    providers: [\n        StatusResolve\n    ]\n})\nexport class ClientStatusModule {\n\n}\n"
    ]
}
