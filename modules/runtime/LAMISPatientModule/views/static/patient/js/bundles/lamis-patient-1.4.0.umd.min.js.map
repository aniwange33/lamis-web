{
  "version": 3,
  "sources": [
    "../../../../../../../../node_modules/tslib/tslib.es6.js",
    "ng://lamis-patient-1.4.0/lib/services/patient.service.ts",
    "ng://lamis-patient-1.4.0/lib/components/patient-list.component.ts",
    "ng://lamis-patient-1.4.0/lib/components/patient-details.component.ts",
    "ng://lamis-patient-1.4.0/lib/components/patient-edit.component.ts",
    "ng://lamis-patient-1.4.0/lib/components/detailed.timeline.component.ts",
    "ng://lamis-patient-1.4.0/lib/services/patient.route.ts",
    "ng://lamis-patient-1.4.0/lib/components/widget-container.component.ts",
    "ng://lamis-patient-1.4.0/lib/services/observation.service.ts",
    "ng://lamis-patient-1.4.0/lib/components/timeline.component.ts",
    "ng://lamis-patient-1.4.0/lib/widget/timeline.widget.ts",
    "ng://lamis-patient-1.4.0/lib/widget/timeline.event.ts",
    "ng://lamis-patient-1.4.0/lib/widget/timeline.badge.ts",
    "ng://lamis-patient-1.4.0/lib/widget/timeline.footer.ts",
    "ng://lamis-patient-1.4.0/lib/widget/timeline.header.ts",
    "ng://lamis-patient-1.4.0/lib/widget/timeline.panel.ts",
    "ng://lamis-patient-1.4.0/lib/widget/timeline.widget.module.ts",
    "ng://lamis-patient-1.4.0/lib/components/unique-hospital-num.validator.ts",
    "ng://lamis-patient-1.4.0/lib/components/summary.widget.component.ts",
    "ng://lamis-patient-1.4.0/lib/patient.module.ts",
    "ng://lamis-patient-1.4.0/lib/components/client-status.component.ts",
    "ng://lamis-patient-1.4.0/lib/services/status.route.ts",
    "ng://lamis-patient-1.4.0/lib/client-status.module.ts"
  ],
  "names": [
    "__decorate",
    "decorators",
    "target",
    "key",
    "desc",
    "d",
    "c",
    "arguments",
    "length",
    "r",
    "Object",
    "getOwnPropertyDescriptor",
    "Reflect",
    "decorate",
    "i",
    "defineProperty",
    "__param",
    "paramIndex",
    "decorator",
    "__metadata",
    "metadataKey",
    "metadataValue",
    "metadata",
    "__values",
    "o",
    "m",
    "Symbol",
    "iterator",
    "call",
    "next",
    "value",
    "done",
    "__read",
    "n",
    "e",
    "ar",
    "push",
    "error",
    "__spread",
    "concat",
    "moment",
    "moment_",
    "PatientService",
    "http",
    "serverUrl",
    "authServerProvider",
    "this",
    "resourceUrl",
    "resourceSearchUrl",
    "ovcResourceUrl",
    "SERVER_API_URL",
    "prototype",
    "create",
    "data",
    "_this",
    "patient",
    "convertDateFromClient",
    "post",
    "observe",
    "pipe",
    "map",
    "res",
    "convertDateFromServer",
    "update",
    "put",
    "share",
    "find",
    "id",
    "get",
    "findByUuid",
    "query",
    "req",
    "options",
    "createRequestOption",
    "params",
    "convertDateArrayFromServer",
    "delete",
    "getOVCByPatient",
    "widgets",
    "patientId",
    "observations",
    "activities",
    "detailed",
    "sort",
    "t1",
    "t2",
    "d1",
    "date",
    "diff",
    "getActiveFacility",
    "getAllFacility",
    "getStates",
    "getLgasByState",
    "getStateByLga",
    "getFacility",
    "existsByHospitalNumber",
    "hospitalNum",
    "number",
    "numberExists",
    "getStatusDatesByPatient",
    "forEach",
    "getSummaryForPatient",
    "saveClientStatus",
    "status",
    "console",
    "log",
    "copy",
    "PatientService_1",
    "convertStatusFromClient",
    "updateClientStatus",
    "findClientStatus",
    "body",
    "dateTracked",
    "dateStatus",
    "agreedDate",
    "currentClientStatus",
    "responseType",
    "getStatusName",
    "assign",
    "isValid",
    "format",
    "DATE_FORMAT",
    "dateBirth",
    "dateRegistration",
    "dateStarted",
    "dateConfirmedHiv",
    "dateEnrolledPMTCT",
    "pregnant",
    "pregnancyStatus",
    "breastfeeding",
    "name",
    "surname",
    "otherNames",
    "gender",
    "HttpClient",
    "Inject",
    "args",
    "SERVER_API_URL_CONFIG",
    "AuthServerProvider",
    "Injectable",
    "providedIn",
    "tslib_1.__param",
    "PatientListComponent",
    "patientService",
    "notification",
    "router",
    "activatedRoute",
    "page",
    "loading",
    "itemsPerPage",
    "currentSearch",
    "totalItems",
    "display",
    "facility",
    "ngOnDestroy",
    "ngOnInit",
    "subscribe",
    "onPageChange",
    "searchPatient",
    "search",
    "loadAll",
    "select",
    "path",
    "navigateByUrl",
    "obj",
    "uuid",
    "navigate",
    "relativeTo",
    "pageInfo",
    "loadPage",
    "keyword",
    "facilityId",
    "size",
    "onSuccess",
    "headers",
    "onError",
    "patients",
    "openSnackMessage",
    "message",
    "NotificationService",
    "Router",
    "ActivatedRoute",
    "tslib_1.__decorate",
    "Input",
    "Component",
    "selector",
    "template",
    "PatientDetailsComponent",
    "route",
    "cfr",
    "_dialogService",
    "notificationService",
    "_viewContainerRef",
    "renderer2",
    "properties",
    "_a",
    "entity",
    "attacheWidgets",
    "getObservations",
    "edit",
    "updateStatus",
    "openConfirm",
    "title",
    "cancelButton",
    "acceptButton",
    "width",
    "afterClosed",
    "accept",
    "ok",
    "showError",
    "previousState",
    "window",
    "history",
    "back",
    "getComponentFactory",
    "Array",
    "from",
    "values",
    "x",
    "componentType",
    "addObservation",
    "action",
    "split",
    "parts",
    "apply",
    "buildWidget",
    "componentName",
    "icon",
    "factory",
    "undefined",
    "parentFactory",
    "componentRef",
    "container",
    "createComponent",
    "instance",
    "embeddedContainer",
    "cmpName",
    "constructor",
    "TypeError",
    "instanceRef",
    "addClass",
    "location",
    "nativeElement",
    "patientUuid",
    "age",
    "dob",
    "ComponentFactoryResolver",
    "TdDialogService",
    "ViewContainerRef",
    "Renderer2",
    "ViewChild",
    "read",
    "static",
    "PatientEditComponent",
    "loaderService",
    "ovc",
    "today",
    "minDob",
    "subtract",
    "minDateRegistration",
    "maxDateBirth",
    "maxDateConfirmed",
    "minDateConfirmed",
    "ovcApplicable",
    "prep",
    "createEntity",
    "isSaving",
    "extra",
    "art",
    "ovcMin",
    "clone",
    "lga",
    "add",
    "state",
    "stateChange",
    "indicationForPrep",
    "prepId",
    "onDemandIndication",
    "householdUniqueNo",
    "referredTo",
    "referredFrom",
    "dateReferredTo",
    "dateReferredFrom",
    "servicesProvided",
    "isAfter",
    "patientForm",
    "form",
    "setErrors",
    "invalid",
    "markAllAsTouched",
    "states",
    "entityCompare",
    "e1",
    "e2",
    "estimateDob",
    "ageUnit",
    "lgas",
    "statusChanged",
    "statusAtRegistration",
    "registered",
    "dateBirthChanged",
    "isBefore",
    "dateRegistrationChanged",
    "save",
    "openAlert",
    "disableClose",
    "open",
    "subscribeToSaveResponse",
    "dobEstimated",
    "result",
    "close",
    "onSaveSuccess",
    "onSaveError",
    "showInfo",
    "errorMessage",
    "isOVCAge",
    "AppLoaderService",
    "NgForm",
    "DetailedTimelineComponent",
    "PatientResolve",
    "service",
    "resolve",
    "filter",
    "response",
    "of",
    "ROUTES",
    "breadcrumb",
    "children",
    "component",
    "pagingParams",
    "PagingParamsResolve",
    "authorities",
    "WidgetContainerComponent",
    "ObservationService",
    "deleteObservation",
    "getObservation",
    "TimelineComponent",
    "observationService",
    "loadActivities",
    "view",
    "timeLine",
    "TimelineWidget",
    "TimelineEvent",
    "parent",
    "_side",
    "side",
    "updateRowClasses",
    "checkClass",
    "leftSide",
    "oddClass",
    "evenClass",
    "TimelineBadge",
    "event",
    "TimelineFooter",
    "TimelineHeader",
    "TimelinePanel",
    "COMPONENTS",
    "TimelineWidgetModule",
    "NgModule",
    "declarations",
    "exports",
    "UniqueHospitalNumValidator",
    "validate",
    "control",
    "valueChanges",
    "debounceTime",
    "take",
    "switchMap",
    "UniqueHospitalNumValidator_1",
    "Directive",
    "providers",
    "provide",
    "NG_ASYNC_VALIDATORS",
    "useExisting",
    "multi",
    "SummaryWidgetComponent",
    "summaries",
    "propertiesForSummary",
    "summary",
    "_b",
    "tslib_1.__values",
    "fields",
    "_c",
    "field",
    "dataType",
    "type",
    "toLowerCase",
    "item",
    "FieldType",
    "boolean",
    "CardViewBoolItemModel",
    "label",
    "int",
    "CardViewIntItemModel",
    "float",
    "CardViewFloatItemModel",
    "CardViewDateItemModel",
    "datetime",
    "CardViewDatetimeItemModel",
    "CardViewTextItemModel",
    "PatientModule",
    "imports",
    "CommonModule",
    "NgJhipsterModule",
    "LamisSharedModule",
    "JsonFormModule",
    "MatFormioModule",
    "MatInputModule",
    "MatIconModule",
    "MatDividerModule",
    "MatCardModule",
    "MatSelectModule",
    "MatButtonModule",
    "MatCheckboxModule",
    "MatTabsModule",
    "RouterModule",
    "forChild",
    "MatProgressBarModule",
    "CovalentMessageModule",
    "MatListModule",
    "MatChipsModule",
    "CoreModule",
    "CovalentDialogsModule",
    "CovalentSearchModule",
    "NgbPaginationModule",
    "FormsModule",
    "ReactiveFormsModule",
    "MatDateFormatModule",
    "CustomFormsModule",
    "MatAutocompleteModule",
    "entryComponents",
    "ClientStatusComponent",
    "appLoaderService",
    "facilities",
    "statusDates",
    "statuses",
    "fac",
    "f",
    "snapshot",
    "paramMap",
    "facilityTransferredTo",
    "change",
    "input",
    "includes",
    "filterDates",
    "exists",
    "outcome",
    "StatusResolve",
    "ClientStatusModule"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {\n    AuthServerProvider,\n    createRequestOption,\n    DATE_FORMAT,\n    SERVER_API_URL_CONFIG,\n    ServerApiUrlConfig\n} from '@lamis/web-core';\nimport { map, share } from 'rxjs/operators';\nimport { OVC, Patient, StatusHistory } from '../model/patient.model';\n\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Facility } from '../model/facility.model';\nimport { ValidationErrors } from '@angular/forms';\nimport { Summary } from '../components/summary.widget.component';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Patient>;\ntype EntityArrayResponseType = HttpResponse<Patient[]>;\n\nexport interface PatientActivity {\n    uuid?: string;\n    id?: any;\n    name?: string;\n    icon?: string;\n    path?: string;\n    editable?: boolean;\n    viewable?: boolean;\n    deletable?: boolean;\n}\n\nexport interface PatientTimeline {\n    date?: string;\n    activities?: PatientActivity[];\n}\n\nexport interface PatientWidget {\n    title: string;\n    componentName: string;\n    index: number;\n    icon?: string;\n}\n\nexport interface PatientObservation {\n    name?: string;\n    path?: string;\n    icon?: string;\n    tooltip?: string;\n}\n\n@Injectable({providedIn: 'root'})\nexport class PatientService {\n    public resourceUrl = '';\n    public resourceSearchUrl = '';\n    private ovcResourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig,\n                private authServerProvider: AuthServerProvider) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/patients';\n        this.resourceSearchUrl = serverUrl.SERVER_API_URL + '/api/_search/patients';\n        this.ovcResourceUrl = serverUrl.SERVER_API_URL + '/api/ovcs';\n    }\n\n    create(data: Patient): Observable<EntityResponseType> {\n        const patient = this.convertDateFromClient(data);\n        return this.http\n            .post<Patient>(this.resourceUrl, patient, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(data: Patient): Observable<EntityResponseType> {\n        const patient = this.convertDateFromClient(data);\n        return this.http\n            .put<Patient>(this.resourceUrl, patient, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)),\n                share());\n    }\n\n    find(id: any): Observable<EntityResponseType> {\n        return this.http\n            .get<Patient>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: any): Observable<EntityResponseType> {\n        return this.http\n            .get<Patient>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<Patient[]>(this.resourceUrl, {params: options, observe: 'response'})\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getOVCByPatient(id: number) {\n        return this.http.get<OVC>(`${this.ovcResourceUrl}/patient/${id}`)\n    }\n\n    widgets(patientId: number): Observable<PatientWidget[]> {\n        return this.http.get<PatientWidget[]>(`${this.resourceUrl}/${patientId}/widgets`, {observe: 'body'})\n    }\n\n    observations(patientId: number): Observable<PatientObservation[]> {\n        return this.http.get<PatientObservation[]>(`${this.resourceUrl}/${patientId}/observations`, {\n            observe: 'body'\n        })\n    }\n\n    activities(patientId: number, detailed: boolean): Observable<PatientTimeline[]> {\n        return this.http.get<PatientTimeline[]>(`${this.resourceUrl}/${patientId}/activities?full=${detailed}`, {observe: 'body'})\n            .pipe(map(res => {\n                res.sort((t1, t2) => {\n                    const d1 = moment(t1.date, 'DD MMM, YYYY');\n                    const d2 = moment(t2.date, 'DD MMM, YYYY');\n                    return d2.diff(d1);\n                });\n                return res;\n            }))\n    }\n\n    getActiveFacility() {\n        return this.http.get<Facility>('/api/facilities/active')\n    }\n\n    getAllFacility() {\n        return this.http.get<Facility[]>('/api/facilities')\n    }\n\n    getStates() {\n        return this.http.get<any[]>('/api/states')\n    }\n\n    getLgasByState(id) {\n        return this.http.get<any[]>(`/api/provinces/state/${id}`)\n    }\n\n    getStateByLga(id) {\n        return this.http.get(`/api/provinces/${id}/state`)\n    }\n\n    getFacility(id) {\n        return this.http.get(`/api/facilities/${id}`)\n    }\n\n    existsByHospitalNumber(hospitalNum: string): Observable<ValidationErrors | null> {\n        return this.http.post<boolean>(`${this.resourceUrl}/exists/hospital-number`, {number: hospitalNum})\n            .pipe(map((res => res ? {'numberExists': true} : null)));\n    }\n\n    getStatusDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`/api/client-statuses/patient/${patientId}/status-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            )\n    }\n\n    getSummaryForPatient(id: number) {\n        return this.http.get<Summary[]>(`${this.resourceUrl}/${id}/summary`)\n    }\n\n    saveClientStatus(status: StatusHistory) {\n        console.log('Status', status);\n        const copy = PatientService.convertStatusFromClient(status);\n        console.log('Copy', copy);\n        return this.http.post<StatusHistory>('/api/client-statuses', copy, {observe: 'response'})\n    }\n\n    updateClientStatus(status: StatusHistory) {\n        const copy = PatientService.convertStatusFromClient(status);\n        return this.http.put<StatusHistory>('/api/client-statuses', copy, {observe: 'response'})\n    }\n\n    findClientStatus(id) {\n        return this.http.get<StatusHistory>(`/api/client-statuses/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<StatusHistory>) => {\n                res.body.dateTracked = res.body.dateTracked != null ? moment(res.body.dateTracked) : null;\n                res.body.dateStatus = res.body.dateStatus != null ? moment(res.body.dateStatus) : null;\n                res.body.agreedDate = res.body.agreedDate != null ? moment(res.body.agreedDate) : null;\n                return res;\n            }))\n    }\n\n    currentClientStatus(patientId: string) {\n        return this.http.get(`/api/client-statuses/patient/${patientId}/current`, {responseType: 'text'})\n    }\n\n    getStatusName(id: number) {\n        return this.http.get(`/api/client-statuses/${id}/name`, {responseType: 'text'})\n    }\n\n    private static convertStatusFromClient(status: StatusHistory): StatusHistory {\n        const copy: StatusHistory = Object.assign({}, status, {\n                dateStatus: status.dateStatus != null && status.dateStatus.isValid() ? status.dateStatus.format(DATE_FORMAT) : null,\n                agreedDate: status.agreedDate != null && status.agreedDate.isValid() ? status.agreedDate.format(DATE_FORMAT) : null,\n                dateTracked: status.dateTracked != null && status.dateTracked.isValid() ? status.dateTracked.format(DATE_FORMAT) : null,\n            }\n        );\n        return copy;\n    }\n\n    protected convertDateFromClient(patient: Patient): Patient {\n        const copy: Patient = Object.assign({}, patient, {\n            dateBirth: patient.dateBirth != null && patient.dateBirth.isValid() ? patient.dateBirth.format(DATE_FORMAT) : null,\n            dateRegistration: patient.dateRegistration != null && patient.dateRegistration.isValid() ? patient.dateRegistration.format(DATE_FORMAT) : null,\n            dateStarted: patient.dateStarted != null && patient.dateStarted.isValid() ? patient.dateStarted.format(DATE_FORMAT) : null,\n            dateConfirmedHiv: patient.dateConfirmedHiv != null && patient.dateConfirmedHiv.isValid() ? patient.dateConfirmedHiv.format(DATE_FORMAT) : null,\n            dateEnrolledPMTCT: patient.dateEnrolledPMTCT != null && patient.dateEnrolledPMTCT.isValid() ? patient.dateEnrolledPMTCT.format(DATE_FORMAT) : null,\n            pregnant: patient.pregnancyStatus === 2,\n            breastfeeding: patient.pregnancyStatus === 3\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.name = res.body.surname + ', ' + res.body.otherNames;\n            res.body.dateBirth = res.body.dateBirth != null ? moment(res.body.dateBirth) : null;\n            res.body.dateRegistration = res.body.dateRegistration != null ? moment(res.body.dateRegistration) : null;\n            res.body.dateConfirmedHiv = res.body.dateConfirmedHiv != null ? moment(res.body.dateConfirmedHiv) : null;\n            res.body.dateEnrolledPMTCT = res.body.dateEnrolledPMTCT != null ? moment(res.body.dateEnrolledPMTCT) : null;\n            res.body.dateStarted = res.body.dateStarted != null ? moment(res.body.dateStarted) : null;\n            res.body.pregnancyStatus = res.body.pregnant != null && res.body.pregnant ? 2 : res.body.gender === 'FEMALE' ? 1 : null;\n            res.body.pregnancyStatus = res.body.breastfeeding != null && res.body.breastfeeding ? 3 : res.body.gender === 'FEMALE' ? 1 : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((patient: Patient) => {\n                patient.name = patient.surname + ', ' + patient.otherNames;\n                patient.dateBirth = patient.dateBirth != null ? moment(patient.dateBirth) : null;\n                patient.dateRegistration = patient.dateRegistration != null ? moment(patient.dateRegistration) : null;\n                patient.dateStarted = patient.dateStarted != null ? moment(patient.dateStarted) : null;\n            });\n        }\n        return res;\n    }\n}\n",
    "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { PatientService } from '../services/patient.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { Patient } from '../model/patient.model';\r\nimport { Facility } from '../model/facility.model';\r\n\r\n@Component({\r\n    selector: 'lamis-patients',\r\n    templateUrl: './patient-list.component.html'\r\n})\r\nexport class PatientListComponent implements OnInit, OnDestroy {\r\n    @Input()\r\n    path: string;\r\n    page = 0;\r\n    patients: Patient[];\r\n    loading = false;\r\n    public itemsPerPage: number = 10;\r\n    public currentSearch: string = '';\r\n    totalItems = 0;\r\n    display = 'list';\r\n    facility: Facility = {};\r\n\r\n    constructor(private patientService: PatientService,\r\n                protected notification: NotificationService,\r\n                protected router: Router,\r\n                protected activatedRoute: ActivatedRoute) {\r\n        this.currentSearch = '';\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.patientService.getActiveFacility().subscribe(res => {\r\n            this.facility = res;\r\n            this.onPageChange(0);\r\n        })\r\n    }\r\n\r\n    searchPatient(search: any) {\r\n        this.currentSearch = search;\r\n        this.page = 0;\r\n        this.loadAll();\r\n    }\r\n\r\n\r\n    public select(data: any): any {\r\n        if (!!this.path) {\r\n            this.router.navigateByUrl(`${this.path}/${data.obj.uuid}`)\r\n        } else {\r\n            this.router.navigate(['..', 'patients', data.obj.uuid, 'view'], {relativeTo: this.activatedRoute});\r\n        }\r\n    }\r\n\r\n    onPageChange(pageInfo) {\r\n        this.page = pageInfo;\r\n        this.loadAll();\r\n    }\r\n\r\n    loadPage(page: number) {\r\n        this.loadAll();\r\n    }\r\n\r\n    loadAll() {\r\n        this.loading = true;\r\n        this.patientService.query({\r\n            keyword: this.currentSearch,\r\n            page: this.page > 0 ? this.page - 1 : 0,\r\n            facilityId: this.facility.id || 0,\r\n            size: this.itemsPerPage,\r\n            sort: ['id', 'asc']\r\n        }).subscribe(\r\n            (res: any) => {\r\n                this.onSuccess(res.body, res.headers)\r\n            },\r\n            (res: any) => this.onError(res)\r\n        );\r\n    }\r\n\r\n    protected onSuccess(data: any, headers: any) {\r\n        this.patients = data;\r\n        this.totalItems = headers.get('X-Total-Count');\r\n        this.loading = false;\r\n    }\r\n\r\n    private onError(error: any) {\r\n        this.notification.openSnackMessage(error.message);\r\n        this.loading = false;\r\n    }\r\n}\r\n\r\n",
    "import {\r\n    Component,\r\n    ComponentFactory,\r\n    ComponentFactoryResolver,\r\n    OnDestroy,\r\n    OnInit,\r\n    Renderer2,\r\n    ViewChild,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\nimport { Patient } from '../model/patient.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PatientObservation, PatientService, PatientWidget } from '../services/patient.service';\r\nimport { TdDialogService } from '@covalent/core';\r\nimport { CardViewItem, NotificationService } from '@alfresco/adf-core';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-patient',\r\n    templateUrl: './patient-details.component.html',\r\n    styleUrls: ['./patient-details.component.scss']\r\n})\r\nexport class PatientDetailsComponent implements OnInit, OnDestroy {\r\n    template = 'patient-details';\r\n    entity: Patient;\r\n    observations: PatientObservation[];\r\n    @ViewChild('container', {read: ViewContainerRef, static: true}) container: ViewContainerRef;\r\n    properties: CardViewItem[] = [];\r\n    status: string;\r\n\r\n    constructor(private router: Router, private route: ActivatedRoute, private patientService: PatientService,\r\n                private cfr: ComponentFactoryResolver, private _dialogService: TdDialogService,\r\n                private notificationService: NotificationService, private _viewContainerRef: ViewContainerRef,\r\n                private renderer2: Renderer2) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            this.patientService.currentClientStatus(entity.uuid).subscribe(res => {\r\n                this.status = res;\r\n            });\r\n            this.attacheWidgets();\r\n            this.getObservations();\r\n        });\r\n    }\r\n\r\n    edit() {\r\n        this.router.navigate(['..', 'edit'], {relativeTo: this.route});\r\n    }\r\n\r\n    updateStatus() {\r\n        this.router.navigate(['/', 'client-statuses', 'patient', this.entity.uuid, 'new']);\r\n    }\r\n\r\n    delete() {\r\n        this._dialogService.openConfirm({\r\n            title: 'Confirm',\r\n            message: 'Do you want to delete this patient, action cannot be reversed?',\r\n            cancelButton: 'No',\r\n            acceptButton: 'Yes',\r\n            width: '500px',\r\n        }).afterClosed().subscribe((accept: boolean) => {\r\n            if (accept) {\r\n                this.patientService.delete(this.entity.id).subscribe((res) => {\r\n                    if (res.ok) {\r\n                        this.router.navigate(['patients'])\r\n                    } else {\r\n                        this.notificationService.showError('Error deleting patient, please try again')\r\n                    }\r\n                })\r\n            } else {\r\n                // DO SOMETHING ELSE\r\n            }\r\n        });\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    private getComponentFactory(name: string) {\r\n        const factories = Array.from(this.cfr['_factories'].values());\r\n        return <ComponentFactory<any>>factories.find((x: any) => x.componentType.name === name);\r\n    }\r\n\r\n    getObservations() {\r\n        this.patientService.observations(this.entity.id).subscribe((res: PatientObservation[]) => this.observations = res)\r\n    }\r\n\r\n    addObservation(action: PatientObservation) {\r\n        const path = action.path.split('/');\r\n        const parts = ['/'];\r\n        parts.push(...path);\r\n        parts.push('patient', this.entity.uuid, 'new');\r\n        this.router.navigate([...parts]);\r\n    }\r\n\r\n    private attacheWidgets() {\r\n        this.buildWidget('TimelineComponent', 'Recent Activities', 'timeline');\r\n        this.buildWidget('SummaryWidgetComponent', 'Patient Summary', 'account_balance_wallet');\r\n        /*this.patientService.widgets(this.entity.id).subscribe((res: PatientWidget[]) => {\r\n            res.forEach((widget: PatientWidget) => {\r\n                this.buildWidget(widget.componentName, widget.title, widget.icon);\r\n            })\r\n        });*/\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n    }\r\n\r\n    private buildWidget(componentName: string, title: string, icon: string) {\r\n        const factory = this.getComponentFactory(componentName);\r\n        if (factory !== undefined) {\r\n            const parentFactory = this.getComponentFactory('WidgetContainerComponent');\r\n            const componentRef = this.container.createComponent(parentFactory);\r\n            if (!componentRef.instance.embeddedContainer) {\r\n                const cmpName = componentRef.instance.constructor.name;\r\n                throw new TypeError(`Trying to render embedded content. ${cmpName} must have @ViewChild() embeddedContainer defined`);\r\n            }\r\n            console.log('Created component', componentRef);\r\n            const instanceRef = componentRef.instance.embeddedContainer.createComponent(factory);\r\n            this.renderer2.addClass(componentRef.location.nativeElement, 'col-md-6');\r\n            componentRef.instance.icon = icon;\r\n            componentRef.instance.title = title;\r\n            try {\r\n                instanceRef.instance.patientId = this.entity.id;\r\n                instanceRef.instance.patientUuid = this.entity.uuid;\r\n            } catch (e) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    age(dob: Moment) {\r\n        let age = moment().diff(dob, 'years');\r\n        if (age > 0) {\r\n            return age + ' year(s)'\r\n        }\r\n\r\n        age = moment().diff(dob, 'months');\r\n        if (age > 0) {\r\n            return age + ' month(s)';\r\n        }\r\n        return moment().diff(dob, 'weeks') + ' week(s)';\r\n    }\r\n}\r\n",
    "import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {OVC, Patient} from '../model/patient.model';\r\nimport {PatientService} from '../services/patient.service';\r\nimport {NotificationService} from '@alfresco/adf-core';\r\nimport {ActivatedRoute} from '@angular/router';\r\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport * as moment_ from 'moment';\r\nimport {DurationInputArg2, Moment} from 'moment';\r\nimport {AppLoaderService, DATE_FORMAT, entityCompare} from '@lamis/web-core';\r\nimport {TdDialogService} from '@covalent/core';\r\nimport {NgForm} from '@angular/forms';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-patient-edit',\r\n    templateUrl: './patient-edit.component.html'\r\n})\r\nexport class PatientEditComponent implements OnInit {\r\n    @ViewChild('patientForm', {static: true}) public patientForm: NgForm;\r\n    template = 'patient-edit';\r\n    entity: Patient;\r\n    ovc: OVC = {};\r\n    patient: Patient;\r\n    isSaving: boolean;\r\n    error = false;\r\n    today = moment();\r\n    minDob = moment().subtract(75, 'years');\r\n    ovcMin: Moment;\r\n    minDateRegistration: Moment = moment('1998', 'YYYY');\r\n    maxDateBirth: Moment = moment().subtract(2, 'months');\r\n    maxDateConfirmed = moment();\r\n    minDateConfirmed = moment('1998', 'YYYY');\r\n    age: number;\r\n    ageUnit: DurationInputArg2;\r\n    state: any;\r\n    states: any[];\r\n    lgas: any[];\r\n    ovcApplicable = false;\r\n    householdUniqueNo: string;\r\n    referredTo: string;\r\n    dateReferredTo: Moment;\r\n    referredFrom: string;\r\n    dateReferredFrom: Moment;\r\n    prep: boolean = false;\r\n    prepId: string;\r\n    indicationForPrep: string;\r\n    onDemandIndication: string;\r\n\r\n    constructor(private patientService: PatientService,\r\n                protected notification: NotificationService,\r\n                private loaderService: AppLoaderService,\r\n                private _dialogService: TdDialogService,\r\n                protected activatedRoute: ActivatedRoute) {\r\n    }\r\n\r\n    createEntity(): Patient {\r\n        return <Patient>{};\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.patientService.getActiveFacility().subscribe((res: any) => {\r\n            this.entity.facility = res;\r\n        });\r\n        this.isSaving = false;\r\n        this.activatedRoute.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            if (this.entity === undefined) {\r\n                this.entity = this.createEntity();\r\n\r\n                this.entity.extra = {\r\n                    art: true\r\n                }\r\n            }\r\n            if (this.entity.id) {\r\n                this.ovcMin = this.entity.dateBirth.clone();\r\n            }\r\n            if (this.entity.id && this.entity.lga) {\r\n                this.minDateRegistration = this.entity.dateBirth.clone().add(2, 'month');\r\n                this.minDateConfirmed = this.entity.dateBirth.clone().add(1, 'month');\r\n                this.patientService.getStateByLga(this.entity.lga.id).subscribe(res => {\r\n                    this.state = res;\r\n                    this.stateChange(this.state.id);\r\n                })\r\n            }\r\n            if (this.entity.extra && this.entity.extra.prep) {\r\n                this.prep = true;\r\n                this.indicationForPrep = this.entity.extra.prep.indicationForPrep;\r\n                this.prepId = this.entity.extra.prep.prepId;\r\n                this.onDemandIndication = this.entity.extra.prep.onDemandIndication;\r\n            }\r\n            if (this.entity.extra && this.entity.extra.ovc) {\r\n                this.ovc.householdUniqueNo = this.entity.extra.ovc.householdUniqueNo;\r\n                this.ovc.referredTo = this.entity.extra.ovc.referredTo;\r\n                this.ovc.referredFrom = this.entity.extra.ovc.referredFrom;\r\n                if (!!this.entity.extra.ovc.dateReferredTo) {\r\n                    this.ovc.dateReferredTo = moment(this.entity.extra.ovc.dateReferredTo);\r\n                }\r\n\r\n                if (!!this.entity.extra.ovc.dateReferredFrom) {\r\n                    this.ovc.dateReferredFrom = moment(this.entity.extra.ovc.dateReferredFrom);\r\n                }\r\n                if (!this.entity.extra.ovc.servicesProvided) {\r\n                    this.ovc.servicesProvided = [];\r\n                }\r\n            }\r\n            const date = this.entity.dateBirth && this.entity.dateBirth.clone() || moment('1998-01-01', 'YYYY-MM-DD');\r\n            if (!moment().subtract(17, 'years').isAfter(date)) {\r\n                this.ovcApplicable = true;\r\n            }\r\n\r\n            this.patientForm.form.setErrors({'invalid': true});\r\n            this.patientForm.form.markAllAsTouched();\r\n        });\r\n\r\n        this.patientService.getStates().subscribe(res => this.states = res);\r\n    }\r\n\r\n    entityCompare(e1, e2) {\r\n        return entityCompare(e1, e2);\r\n    }\r\n\r\n    estimateDob() {\r\n        if (this.age && this.ageUnit && this.entity.dateRegistration) {\r\n            const dateRegistration = this.entity.dateRegistration;\r\n            this.entity.dateBirth = dateRegistration.clone().subtract(this.age, this.ageUnit);\r\n            this.ovcMin = this.entity.dateBirth.clone();\r\n            this.minDateConfirmed = this.entity.dateBirth.clone().add(1, 'months');\r\n            this.ovcApplicable = !this.entity.dateRegistration.clone().subtract(17, 'years').isAfter(this.entity.dateBirth);\r\n        }\r\n    }\r\n\r\n    stateChange(id) {\r\n        this.patientService.getLgasByState(id).subscribe(res => this.lgas = res)\r\n    }\r\n\r\n    statusChanged() {\r\n        this.prep = this.entity.statusAtRegistration === 'HIV_NEGATIVE';\r\n        if (this.prep) {\r\n            this.entity.extra['art'] = false;\r\n            this.entity.extra.prep = {\r\n                registered: true\r\n            };\r\n        } else {\r\n            this.entity.extra['art'] = true;\r\n            this.entity.extra.prep = {\r\n                registered: false\r\n            };\r\n        }\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    dateBirthChanged(date: Moment) {\r\n        this.minDateRegistration = date.clone().add(2, 'months');\r\n        this.minDateConfirmed = date.clone().add(1, 'months');\r\n        if (this.minDateRegistration.isBefore(moment('1998', 'YYYY'), 'day')) {\r\n            this.minDateRegistration = moment('1998', 'YYYY');\r\n            this.minDateConfirmed = moment('1998', 'YYYY');\r\n        }\r\n        this.ovcMin = date.clone();\r\n        if (!!this.entity.dateRegistration) {\r\n            this.ovcApplicable = !this.entity.dateRegistration.clone().subtract(17, 'years').isAfter(this.entity.dateBirth);\r\n        }\r\n    }\r\n\r\n    dateRegistrationChanged(date: Moment) {\r\n        this.maxDateBirth = date.clone().subtract(2, 'months');\r\n        this.maxDateConfirmed = date.clone();\r\n\r\n        if (!!this.entity.dateBirth) {\r\n            this.ovcApplicable = !this.entity.dateRegistration.clone().subtract(17, 'years').isAfter(this.entity.dateBirth);\r\n        }\r\n    }\r\n\r\n    save() {\r\n        //this.progressBar.mode = 'indeterminate';\r\n        this.isSaving = true;\r\n        if (this.prep) {\r\n            if (!this.entity.extra) {\r\n                this.entity.extra = {};\r\n            }\r\n            this.entity.extra.prep = {\r\n                registered: true,\r\n                prepId: this.prepId,\r\n                indicationForPrep: this.indicationForPrep,\r\n                onDemandIndication: this.onDemandIndication\r\n            };\r\n        } else {\r\n            this.entity.extra.prep = {\r\n                registered: false\r\n            };\r\n        }\r\n        if (this.ovcApplicable) {\r\n            if (!this.entity.extra) {\r\n                this.entity.extra = {};\r\n            }\r\n            this.entity.extra.ovc = {};\r\n            this.entity.extra.ovc = this.ovc;\r\n            this.entity.extra.ovc.dateReferredFrom = this.ovc.dateReferredFrom != null && this.ovc.dateReferredFrom.isValid() ?\r\n                this.ovc.dateReferredFrom.format(DATE_FORMAT) : null;\r\n            this.entity.extra.ovc.dateReferredTo = this.ovc.dateReferredTo != null && this.ovc.dateReferredTo.isValid() ?\r\n                this.ovc.dateReferredTo.format(DATE_FORMAT) : null;\r\n\r\n            if (!!this.ovc.householdUniqueNo && !(!!this.ovc.referredFrom || !!this.ovc.referredTo)) {\r\n                this._dialogService.openAlert({\r\n                    title: 'OVC Partner is required',\r\n                    message: 'Please indicate either OVC Partner transferred to or from',\r\n                    disableClose: true\r\n                });\r\n\r\n                return\r\n            }\r\n\r\n            if ((!!this.ovc.referredTo || !!this.ovc.referredFrom) && !this.ovc.householdUniqueNo) {\r\n                this._dialogService.openAlert({\r\n                    title: 'Household number is required',\r\n                    message: 'Please indicate Household Unique No',\r\n                    disableClose: true\r\n                });\r\n\r\n                return\r\n            }\r\n\r\n            if (!!this.ovc.referredFrom && !!this.ovc.referredTo) {\r\n                this._dialogService.openAlert({\r\n                    title: 'OVC Partner mismatch',\r\n                    message: 'Please provide either OVC Partner transfer to or from, not both',\r\n                    disableClose: true\r\n                });\r\n\r\n                return\r\n            }\r\n        }\r\n        this.loaderService.open('Saving patient...');\r\n        if (!this.entity.id) {\r\n            if (this.entity.dobEstimated) {\r\n                this.entity.dateBirth = this.entity.dateRegistration.clone().subtract(this.age, this.ageUnit);\r\n            }\r\n            this.subscribeToSaveResponse(this.patientService.create(this.entity));\r\n        } else {\r\n            this.subscribeToSaveResponse(this.patientService.update(this.entity));\r\n        }\r\n    }\r\n\r\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\r\n        this.loaderService.close();\r\n        result.subscribe(\r\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\r\n            (res: HttpErrorResponse) => {\r\n                this.onSaveError();\r\n                this.onError(res.message)\r\n            });\r\n    }\r\n\r\n    private onSaveSuccess(result: any) {\r\n        this.isSaving = false;\r\n        this.notification.showInfo('Patient successfully saved');\r\n        this.previousState();\r\n    }\r\n\r\n    private onSaveError() {\r\n        this.isSaving = false;\r\n        this.error = true;\r\n        //this.progressBar.mode = 'determinate';\r\n    }\r\n\r\n    protected onError(errorMessage: string) {\r\n        this.notification.showError(errorMessage);\r\n    }\r\n\r\n\r\n    isOVCAge() {\r\n        if (this.age && this.ageUnit === 'years') {\r\n            if (this.age >= 10 && this.age <= 24) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const dob = this.entity.dateBirth.clone();\r\n        const diff = this.entity.dateRegistration.clone().diff(dob);\r\n\r\n        return diff >= 10 && diff <= 24;\r\n    }\r\n}\r\n",
    "import { Component, OnInit } from \"@angular/core\";\nimport { PatientService } from \"../services/patient.service\";\nimport { ActivatedRoute } from \"@angular/router\";\n\n@Component({\n    selector: 'detailed-timeline',\n    templateUrl: './detailed.timeline.component.html'\n})\nexport class DetailedTimelineComponent implements OnInit {\n    id: number;\n    uuid: string;\n\n    constructor(private patientService: PatientService, private route: ActivatedRoute) {\n    }\n\n    ngOnInit(): void {\n        this.route.data.subscribe(({entity}) => {\n            const patient = !!entity && entity.body ? entity.body : entity;\n            this.id = patient.id;\n            this.uuid = patient.uuid;\n        });\n    }\n\n    previousState() {\n        window.history.back();\n    }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { PagingParamsResolve, UserRouteAccessService } from '@lamis/web-core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PatientService } from './patient.service';\nimport { Patient } from '../model/patient.model';\nimport { PatientDetailsComponent } from '../components/patient-details.component';\nimport { PatientEditComponent } from '../components/patient-edit.component';\nimport { PatientListComponent } from '../components/patient-list.component';\nimport { DetailedTimelineComponent } from '../components/detailed.timeline.component';\n\n@Injectable()\nexport class PatientResolve implements Resolve<Patient> {\n    constructor(private service: PatientService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Patient> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Patient>) => response.ok),\n                map((patient: HttpResponse<Patient>) => patient.body)\n            );\n        }\n        return of(<Patient>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Patients',\n            breadcrumb: 'PATIENTS'\n        },\n        children: [\n            {\n                path: '',\n                component: PatientListComponent,\n                resolve: {\n                    pagingParams: PagingParamsResolve\n                },\n                data: {},\n            },\n            {\n                path: ':id/view',\n                component: PatientDetailsComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Patient Details',\n                    breadcrumb: 'PATIENT DETAILS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'new',\n                component: PatientEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Add Patient',\n                    breadcrumb: 'ADD PATIENT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/edit',\n                component: PatientEditComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Patient Edit',\n                    breadcrumb: 'PATIENT EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/timeline',\n                component: DetailedTimelineComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Patient Timeline',\n                    breadcrumb: 'PATIENT TIMELINE'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n",
    "import { Component, HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n@Component({\n    selector:'widget-container',\n    templateUrl: './widget-container.component.html',\n    styleUrls: ['./widget-container.component.scss']\n})\nexport class WidgetContainerComponent {\n    @Input()\n    title: string;\n    @Input()\n    icon: string;\n\n    @ViewChild('container', { read: ViewContainerRef,  static: true })\n    embeddedContainer: ViewContainerRef;\n}\n",
    "import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\n\n@Injectable({providedIn:'root'})\nexport class ObservationService {\n    resourceUrl: string = '';\n\n    constructor(private http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api';\n    }\n\n    deleteObservation(path: string, id: string) {\n        return this.http.delete(`${this.resourceUrl}/${path}/${id}`, {observe: 'response'})\n    }\n\n    getObservation(path: string, id: string) {\n        return this.http.get<any>(`${this.resourceUrl}/${path}/by-uuid/${id}`,{observe: 'response'})\n    }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { PatientService, PatientTimeline } from '../services/patient.service';\nimport { Router } from '@angular/router';\nimport { TdDialogService } from '@covalent/core';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { ObservationService } from '../services/observation.service';\n\n@Component({\n    selector: 'patient-timeline',\n    templateUrl: './timeline.component.html'\n})\nexport class TimelineComponent implements OnInit {\n    @Input()\n    patientId: number;\n    @Input()\n    patientUuid: string;\n    @Input()\n    detailed: boolean = false;\n    timeLine: PatientTimeline[];\n\n    constructor(private patientService: PatientService, private router: Router, private observationService: ObservationService,\n                private _dialogService: TdDialogService, private notificationService: NotificationService) {\n    }\n\n    ngOnInit(): void {\n        this.loadActivities()\n    }\n\n    view(path: string, id: string) {\n        this.router.navigate(['/', path, id, 'patient', this.patientUuid, 'view'])\n    }\n\n    edit(path: string, id: string) {\n        this.router.navigate(['/', path, id, 'patient', this.patientUuid, 'edit'])\n    }\n\n    delete(path: string, id: string) {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this event, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.observationService.getObservation(path, id).subscribe(obj => {\n                    if (obj.body) {\n                        this.observationService.deleteObservation(path, obj.body.id).subscribe((res) => {\n                            if (res.ok) {\n                                this.patientService.activities(this.patientId, this.detailed).subscribe((res) => this.timeLine = res)\n                            } else {\n                                this.notificationService.showError('Error deleting event, please try again')\n                            }\n                        })\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    loadActivities() {\n        this.patientService.activities(this.patientId, this.detailed).subscribe((res) => this.timeLine = res)\n    }\n}\n",
    "import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: 'timeline',\n    templateUrl: './timeline.widget.html'\n})\nexport class TimelineWidget implements OnInit{\n    ngOnInit(): void {\n    }\n\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { TimelineWidget } from './timeline.widget';\n\n@Component({\n    selector: 'timeline-event',\n    templateUrl: './timeline.event.html'\n})\nexport class TimelineEvent implements OnInit {\n\n    oddClass;\n    evenClass;\n    _side: string = 'left';\n    @Input()\n    set side(side: string) {\n        this._side = side;\n        this.updateRowClasses(this._side);\n    }\n    \n    constructor(private parent: TimelineWidget) {\n    }\n\n    ngOnInit(): void {\n        this.updateRowClasses(this._side);\n    }\n\n    checkClass(side, leftSide) {\n        let leftClass = '';\n        let rightClass = 'timeline-inverted';\n\n        if (side === 'left' || (!side && leftSide === true)) {\n            return leftClass;\n        } else if ((side === 'alternate' || !side) && leftSide === false) {\n            return rightClass;\n        } else if (side === 'right') {\n            return rightClass;\n        } else {\n            return leftClass;\n        }\n    }\n\n    updateRowClasses(value) {\n        this.oddClass = this.checkClass(value, true);\n        this.evenClass = this.checkClass(value, false);\n    }\n}\n",
    "import { Component } from '@angular/core';\nimport { TimelineEvent } from './timeline.event';\n\n@Component({\n    selector: 'timeline-badge',\n    template: `\n        <div class='timeline-badge'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineBadge {\n    constructor(private event: TimelineEvent) {\n    }\n}\n",
    "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'timeline-footer',\n    template: `\n        <div class='timeline-footer'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineFooter {\n    \n}\n",
    "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'timeline-header',\n    template: `\n        <div class='timeline-header'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineHeader {\n\n}\n",
    "import { Component } from '@angular/core';\nimport { TimelineEvent } from './timeline.event';\n\n@Component({\n    selector: 'timeline-panel',\n    template:\n            `\n        <div class='timeline-panel'>\n            <ng-content></ng-content>\n        </div>`\n})\nexport class TimelinePanel {\n    constructor(private event: TimelineEvent) {\n    }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { TimelineWidget } from './timeline.widget';\nimport { TimelineEvent } from './timeline.event';\nimport { TimelineBadge } from './timeline.badge';\nimport { TimelineFooter } from './timeline.footer';\nimport { TimelineHeader } from './timeline.header';\nimport { TimelinePanel } from './timeline.panel';\n\nconst COMPONENTS = [TimelineBadge, TimelineEvent, TimelineFooter, TimelineHeader, TimelinePanel, TimelineWidget];\n\n@NgModule({\n    declarations: [\n        ...COMPONENTS\n    ],\n    exports: [\n        ...COMPONENTS\n    ]\n})\nexport class TimelineWidgetModule {\n\n}\n",
    "import { AbstractControl, AsyncValidator, NG_ASYNC_VALIDATORS, ValidationErrors } from '@angular/forms';\nimport { Directive } from '@angular/core';\nimport { PatientService } from '../services/patient.service';\nimport { Observable, of } from 'rxjs';\nimport { debounceTime, switchMap, take } from 'rxjs/operators';\n\n@Directive({\n    selector: '[uniqueHospitalNum]',\n    providers: [{\n        provide: NG_ASYNC_VALIDATORS,\n        useExisting: UniqueHospitalNumValidator,\n        multi: true\n    }]\n})\nexport class UniqueHospitalNumValidator implements AsyncValidator {\n    constructor(private patientService: PatientService) {\n    }\n\n    validate(control: AbstractControl): Observable<ValidationErrors | null> {\n        return control.valueChanges\n            .pipe(\n                debounceTime(300),\n                take(1),\n                switchMap(value => this.patientService.existsByHospitalNumber(value))\n            );\n    }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport {\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewDatetimeItemModel,\n    CardViewFloatItemModel,\n    CardViewIntItemModel,\n    CardViewItem,\n    CardViewTextItemModel\n} from '@alfresco/adf-core';\nimport { FieldType } from '@lamis/web-core';\nimport { PatientService } from '../services/patient.service';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\nexport interface Summary {\n    header?: string;\n    headerClass?: string;\n    fields: Field[];\n}\n\nexport interface Field {\n    type: FieldType;\n    label: string;\n    value: any;\n}\n\n@Component({\n    selector: 'patient-summary-widget',\n    templateUrl: './summary.widget.component.html'\n})\nexport class SummaryWidgetComponent implements OnInit {\n    @Input()\n    patientId: number;\n    @Input()\n    patientUuid: string;\n    @Input()\n\n    summaries: Summary[];\n\n    constructor(private patientService: PatientService) {\n    }\n\n    ngOnInit(): void {\n        this.patientService.getSummaryForPatient(this.patientId).subscribe(res => this.summaries = res)\n    }\n\n    public propertiesForSummary(summary: Summary): Array<CardViewItem> {\n        const properties = [];\n        for (const field of summary.fields) {\n            const dataType = field.type.toLowerCase();\n            let item: CardViewItem;\n            switch (dataType) {\n                case FieldType.boolean:\n                    item = new CardViewBoolItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label\n                    });\n                    break;\n                case FieldType.int:\n                    item = new CardViewIntItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n                    break;\n                case FieldType.float:\n                    item = new CardViewFloatItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n                    break;\n                case FieldType.date:\n                    item = new CardViewDateItemModel({\n                        value: field.value ? moment(field.value) : null,\n                        key: '',\n                        label: field.label,\n                        format: 'dd MMM, yyyy'\n                    });\n                    break;\n                case FieldType.datetime:\n                    item = new CardViewDatetimeItemModel({\n                        value: field.value ? moment(field.value) : null,\n                        key: '',\n                        label: field.label,\n                        format: 'dd MMM, yyyy HH:mm'\n                    });\n                    break;\n                default:\n                    item = new CardViewTextItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n            }\n            properties.push(item);\n        }\n        return properties;\n    }\n}\n",
    "import { CoreModule } from '@alfresco/adf-core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDividerModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatProgressBarModule,\r\n    MatSelectModule,\r\n    MatTabsModule\r\n} from '@angular/material';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CovalentDialogsModule, CovalentMessageModule, CovalentSearchModule } from '@covalent/core';\r\nimport { JsonFormModule, LamisSharedModule, MatDateFormatModule } from '@lamis/web-core';\r\nimport { NgbPaginationModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgJhipsterModule } from 'ng-jhipster';\r\nimport { PatientDetailsComponent } from './components/patient-details.component';\r\nimport { PatientEditComponent } from './components/patient-edit.component';\r\nimport { PatientListComponent } from './components/patient-list.component';\r\nimport { PatientResolve, ROUTES } from './services/patient.route';\r\nimport { WidgetContainerComponent } from './components/widget-container.component';\r\nimport { TimelineComponent } from './components/timeline.component';\r\nimport { TimelineWidgetModule } from './widget/timeline.widget.module';\r\nimport { MatFormioModule } from 'angular-material-formio';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { UniqueHospitalNumValidator } from './components/unique-hospital-num.validator';\r\nimport { CustomFormsModule } from 'ng2-validation';\r\nimport { DetailedTimelineComponent } from './components/detailed.timeline.component';\r\nimport { SummaryWidgetComponent } from './components/summary.widget.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PatientListComponent,\r\n        PatientDetailsComponent,\r\n        PatientEditComponent,\r\n        WidgetContainerComponent,\r\n        TimelineComponent,\r\n        DetailedTimelineComponent,\r\n        SummaryWidgetComponent,\r\n        UniqueHospitalNumValidator\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        NgJhipsterModule,\r\n        LamisSharedModule,\r\n        JsonFormModule,\r\n        MatFormioModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatDividerModule,\r\n        MatCardModule,\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        MatCheckboxModule,\r\n        MatTabsModule,\r\n        RouterModule.forChild(ROUTES),\r\n        MatProgressBarModule,\r\n        CovalentMessageModule,\r\n        MatListModule,\r\n        MatChipsModule,\r\n        CoreModule,\r\n        CovalentDialogsModule,\r\n        CovalentSearchModule,\r\n        NgbPaginationModule,\r\n        TimelineWidgetModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatDateFormatModule,\r\n        CustomFormsModule,\r\n        MatAutocompleteModule\r\n    ],\r\n    exports: [\r\n        PatientListComponent,\r\n        PatientDetailsComponent,\r\n        PatientEditComponent\r\n    ],\r\n    entryComponents: [\r\n        WidgetContainerComponent,\r\n        TimelineComponent,\r\n        SummaryWidgetComponent\r\n    ],\r\n    providers: [\r\n        //PatientService,\r\n        //ObservationService,\r\n        PatientResolve\r\n    ]\r\n})\r\nexport class PatientModule {\r\n}\r\n",
    "import { Component, OnInit } from '@angular/core';\nimport { PatientService } from '../services/patient.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { AppLoaderService } from '@lamis/web-core';\nimport { Patient, StatusHistory } from '../model/patient.model';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'client-status',\n    templateUrl: './client-status.component.html'\n})\nexport class ClientStatusComponent implements OnInit {\n    isSaving: boolean;\n    entity: StatusHistory;\n    patient: Patient;\n    status: string;\n    facilities: string[] = [];\n    facilityTransferredTo: string;\n    statusDates: Moment[] = [];\n    today = moment();\n    statuses = ['TRACED_UNABLE_TO_LOCATE', 'TRACED_AGREED_TO_RETURN_TO_CARE', 'DID_NOT_ATTEMPT_TO_TRACE'];\n\n    constructor(private patientService: PatientService, private activatedRoute: ActivatedRoute, private router: Router,\n                private notification: NotificationService, private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): StatusHistory {\n        return <StatusHistory>{};\n    }\n\n    ngOnInit(): void {\n        this.isSaving = false;\n        this.patientService.getActiveFacility().subscribe(fac => {\n            this.patientService.getAllFacility().subscribe(res => {\n                this.facilities = res.map(f => f.name).filter(f => f != fac.name);\n            });\n        });\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.patientService.findByUuid(patientId).subscribe((res) => {\n                this.entity.patient = res.body;\n                this.patient = res.body;\n                this.entity.facility = res.body.facility;\n                this.patientService.getStatusDatesByPatient(res.body.id).subscribe((res) => {\n                    this.statusDates = res;\n                });\n            });\n\n            if (this.entity.id) {\n                this.patientService.getStatusName(this.entity.id).subscribe(res => this.status = res);\n\n                if (this.entity && this.entity.extra) {\n                    this.facilityTransferredTo = this.entity.extra.facilityTransferredTo;\n                }\n            }\n        });\n    }\n\n    change(input: string) {\n        if (input) {\n            this.facilities = this.facilities.filter(f => f.toLowerCase().includes(input.toLowerCase()))\n        }\n    }\n\n    filterDates(date: Moment): boolean {\n        let exists = false;\n\n        this.statusDates.forEach(d => {\n            if (date.diff(d, 'days') === 0) {\n                exists = true;\n            }\n        });\n        return (this.entity.id && date.diff(this.entity.dateStatus, 'days') === 0) || !exists;\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    save() {\n        this.appLoaderService.open('Saving Client status update...');\n        this.isSaving = true;\n        if (!this.entity.extra) {\n            this.entity.extra = {}\n        }\n        this.entity.extra.facilityTransferredTo = this.facilityTransferredTo;\n\n        if (this.statuses.includes(this.entity.status)) {\n            this.entity.outcome = this.entity.status;\n            this.entity.status = null;\n        }\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.patientService.updateClientStatus(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.patientService.saveClientStatus(this.entity));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.appLoaderService.close();\n                this.onSaveError();\n                this.onError(res.message)\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Client status update successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.notification.showError('Error saving status update');\n    }\n\n    protected onError(errorMessage: string) {\n        this.isSaving = false;\n        this.notification.showError(errorMessage);\n    }\n}\n",
    "import { ClientStatusComponent } from '../components/client-status.component';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { StatusHistory } from '../model/patient.model';\nimport { PatientService } from './patient.service';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter, map } from 'rxjs/operators';\nimport { HttpResponse } from '@angular/common/http';\n\n@Injectable()\nexport class StatusResolve implements Resolve<StatusHistory> {\n    constructor(private service: PatientService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<StatusHistory> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findClientStatus(id).pipe(\n                filter((response: HttpResponse<StatusHistory>) => response.ok),\n                map((patient: HttpResponse<StatusHistory>) => patient.body)\n            );\n        }\n        return of(<StatusHistory>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Clinic Visit',\n            breadcrumb: 'CLINIC VISIT'\n        },\n        children: [\n            {\n                path: 'patient/:patientId/new',\n                component: ClientStatusComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Update Client Status',\n                    breadcrumb: 'UPDATE CLIENT STATUS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: ClientStatusComponent,\n                resolve: {\n                    entity: StatusResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Client Status Edit',\n                    breadcrumb: 'CLIENT STATUS EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CovalentDialogsModule } from '@covalent/core';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { JsonFormModule, LamisSharedModule, MatDateFormatModule } from '@lamis/web-core';\nimport { MatFormioModule } from 'angular-material-formio';\nimport { RouterModule } from '@angular/router';\nimport { ROUTES, StatusResolve } from './services/status.route';\nimport {\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatDividerModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressBarModule,\n    MatSelectModule,\n    MatTabsModule\n} from '@angular/material';\nimport { ClientStatusComponent } from './components/client-status.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CovalentDialogsModule,\n        LamisSharedModule,\n        JsonFormModule,\n        MatFormioModule,\n        MatInputModule,\n        MatIconModule,\n        MatDividerModule,\n        MatCardModule,\n        MatSelectModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatTabsModule,\n        RouterModule.forChild(ROUTES),\n        MatProgressBarModule,\n        CoreModule,\n        MatDateFormatModule\n    ],\n    declarations: [\n        ClientStatusComponent\n    ],\n    exports: [\n        ClientStatusComponent\n    ],\n    providers: [\n        StatusResolve\n    ]\n})\nexport class ClientStatusModule {\n\n}\n"
  ]
}
