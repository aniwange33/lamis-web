!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common/http"),require("@lamis/web-core"),require("rxjs/operators"),require("moment"),require("@angular/router"),require("@alfresco/adf-core"),require("@angular/common"),require("@angular/material"),require("@covalent/core"),require("@ng-bootstrap/ng-bootstrap"),require("ng-jhipster"),require("@angular/forms"),require("rxjs"),require("angular-material-formio"),require("ng2-validation")):"function"==typeof define&&define.amd?define("lamis-patient-1.4.1",["exports","@angular/core","@angular/common/http","@lamis/web-core","rxjs/operators","moment","@angular/router","@alfresco/adf-core","@angular/common","@angular/material","@covalent/core","@ng-bootstrap/ng-bootstrap","ng-jhipster","@angular/forms","rxjs","angular-material-formio","ng2-validation"],e):e(((t=t||self)["lamis-patient-1"]=t["lamis-patient-1"]||{},t["lamis-patient-1"][4]=t["lamis-patient-1"][4]||{},t["lamis-patient-1"][4][1]={}),t.ng.core,t.ng.common.http,t.webCore,t.rxjs.operators,t.moment_,t.ng.router,t.adfCore,t.ng.common,t.ng.material,t.core$1,t.ngBootstrap,t.ngJhipster,t.ng.forms,t.rxjs,t.angularMaterialFormio,t.ng2Validation)}(this,(function(t,e,n,i,a,r,o,s,d,l,m,c,u,p,f,v,h){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */function g(t,e,n,i){var a,r=arguments.length,o=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,i);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(r<3?a(o):r>3?a(e,n,o):a(e,n))||o);return r>3&&o&&Object.defineProperty(e,n,o),o}function y(t,e){return function(n,i){e(n,i,t)}}function b(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function S(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function I(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,a,r=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(i=r.next()).done;)o.push(i.value)}catch(t){a={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(a)throw a.error}}return o}function T(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(I(arguments[e]));return t}var C=r,M=function(){function t(t,e,n){this.http=t,this.serverUrl=e,this.authServerProvider=n,this.resourceUrl="",this.resourceSearchUrl="",this.ovcResourceUrl="",this.resourceUrl=e.SERVER_API_URL+"/api/patients",this.resourceSearchUrl=e.SERVER_API_URL+"/api/_search/patients",this.ovcResourceUrl=e.SERVER_API_URL+"/api/ovcs"}var r;return r=t,t.prototype.create=function(t){var e=this,n=this.convertDateFromClient(t);return this.http.post(this.resourceUrl,n,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.update=function(t){var e=this,n=this.convertDateFromClient(t);return this.http.put(this.resourceUrl,n,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})),a.share())},t.prototype.find=function(t){var e=this;return this.http.get(this.resourceUrl+"/"+t,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.findByUuid=function(t){var e=this;return this.http.get(this.resourceUrl+"/by-uuid/"+t,{observe:"response"}).pipe(a.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.query=function(t){var e=this,n=i.createRequestOption(t);return this.http.get(this.resourceUrl,{params:n,observe:"response"}).pipe(a.map((function(t){return e.convertDateArrayFromServer(t)})))},t.prototype.delete=function(t){return this.http.delete(this.resourceUrl+"/"+t,{observe:"response"})},t.prototype.getOVCByPatient=function(t){return this.http.get(this.ovcResourceUrl+"/patient/"+t)},t.prototype.widgets=function(t){return this.http.get(this.resourceUrl+"/"+t+"/widgets",{observe:"body"})},t.prototype.observations=function(t){return this.http.get(this.resourceUrl+"/"+t+"/observations",{observe:"body"})},t.prototype.activities=function(t,e){return this.http.get(this.resourceUrl+"/"+t+"/activities?full="+e,{observe:"body"}).pipe(a.map((function(t){return t.sort((function(t,e){var n=C(t.date,"DD MMM, YYYY");return C(e.date,"DD MMM, YYYY").diff(n)})),t})))},t.prototype.getActiveFacility=function(){return this.http.get("/api/facilities/active")},t.prototype.getAllFacility=function(){return this.http.get("/api/facilities")},t.prototype.getStates=function(){return this.http.get("/api/states")},t.prototype.getLgasByState=function(t){return this.http.get("/api/provinces/state/"+t)},t.prototype.getStateByLga=function(t){return this.http.get("/api/provinces/"+t+"/state")},t.prototype.getFacility=function(t){return this.http.get("/api/facilities/"+t)},t.prototype.existsByHospitalNumber=function(t){return this.http.post(this.resourceUrl+"/exists/hospital-number",{number:t}).pipe(a.map((function(t){return t?{numberExists:!0}:null})))},t.prototype.getStatusDatesByPatient=function(t){return this.http.get("/api/client-statuses/patient/"+t+"/status-dates").pipe(a.map((function(t){return t.forEach((function(t){return C(t)})),t})))},t.prototype.getSummaryForPatient=function(t){return this.http.get(this.resourceUrl+"/"+t+"/summary")},t.prototype.saveClientStatus=function(t){console.log("Status",t);var e=r.convertStatusFromClient(t);return console.log("Copy",e),this.http.post("/api/client-statuses",e,{observe:"response"})},t.prototype.updateClientStatus=function(t){var e=r.convertStatusFromClient(t);return this.http.put("/api/client-statuses",e,{observe:"response"})},t.prototype.findClientStatus=function(t){return this.http.get("/api/client-statuses/by-uuid/"+t,{observe:"response"}).pipe(a.map((function(t){return t.body.dateTracked=null!=t.body.dateTracked?C(t.body.dateTracked):null,t.body.dateStatus=null!=t.body.dateStatus?C(t.body.dateStatus):null,t.body.agreedDate=null!=t.body.agreedDate?C(t.body.agreedDate):null,t})))},t.prototype.currentClientStatus=function(t){return this.http.get("/api/client-statuses/patient/"+t+"/current",{responseType:"text"})},t.prototype.getStatusName=function(t){return this.http.get("/api/client-statuses/"+t+"/name",{responseType:"text"})},t.convertStatusFromClient=function(t){return Object.assign({},t,{dateStatus:null!=t.dateStatus&&t.dateStatus.isValid()?t.dateStatus.format(i.DATE_FORMAT):null,agreedDate:null!=t.agreedDate&&t.agreedDate.isValid()?t.agreedDate.format(i.DATE_FORMAT):null,dateTracked:null!=t.dateTracked&&t.dateTracked.isValid()?t.dateTracked.format(i.DATE_FORMAT):null})},t.prototype.convertDateFromClient=function(t){return Object.assign({},t,{dateBirth:null!=t.dateBirth&&t.dateBirth.isValid()?t.dateBirth.format(i.DATE_FORMAT):null,dateRegistration:null!=t.dateRegistration&&t.dateRegistration.isValid()?t.dateRegistration.format(i.DATE_FORMAT):null,dateStarted:null!=t.dateStarted&&t.dateStarted.isValid()?t.dateStarted.format(i.DATE_FORMAT):null,dateConfirmedHiv:null!=t.dateConfirmedHiv&&t.dateConfirmedHiv.isValid()?t.dateConfirmedHiv.format(i.DATE_FORMAT):null,dateEnrolledPMTCT:null!=t.dateEnrolledPMTCT&&t.dateEnrolledPMTCT.isValid()?t.dateEnrolledPMTCT.format(i.DATE_FORMAT):null,pregnant:2===t.pregnancyStatus,breastfeeding:3===t.pregnancyStatus})},t.prototype.convertDateFromServer=function(t){return t.body&&(t.body.name=t.body.surname+", "+t.body.otherNames,t.body.dateBirth=null!=t.body.dateBirth?C(t.body.dateBirth):null,t.body.dateRegistration=null!=t.body.dateRegistration?C(t.body.dateRegistration):null,t.body.dateConfirmedHiv=null!=t.body.dateConfirmedHiv?C(t.body.dateConfirmedHiv):null,t.body.dateEnrolledPMTCT=null!=t.body.dateEnrolledPMTCT?C(t.body.dateEnrolledPMTCT):null,t.body.dateStarted=null!=t.body.dateStarted?C(t.body.dateStarted):null,t.body.pregnancyStatus=null!=t.body.pregnant&&t.body.pregnant?2:"FEMALE"===t.body.gender?1:null,t.body.pregnancyStatus=null!=t.body.breastfeeding&&t.body.breastfeeding?3:"FEMALE"===t.body.gender?1:null),t},t.prototype.convertDateArrayFromServer=function(t){return t.body&&t.body.forEach((function(t){t.name=t.surname+", "+t.otherNames,t.dateBirth=null!=t.dateBirth?C(t.dateBirth):null,t.dateRegistration=null!=t.dateRegistration?C(t.dateRegistration):null,t.dateStarted=null!=t.dateStarted?C(t.dateStarted):null})),t},t.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[i.SERVER_API_URL_CONFIG]}]},{type:i.AuthServerProvider}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(n.HttpClient),e.ɵɵinject(i.SERVER_API_URL_CONFIG),e.ɵɵinject(i.AuthServerProvider))},token:t,providedIn:"root"}),t=r=g([e.Injectable({providedIn:"root"}),y(1,e.Inject(i.SERVER_API_URL_CONFIG)),b("design:paramtypes",[n.HttpClient,Object,i.AuthServerProvider])],t)}(),R=function(){function t(t,e,n,i){this.patientService=t,this.notification=e,this.router=n,this.activatedRoute=i,this.page=0,this.loading=!1,this.itemsPerPage=10,this.currentSearch="",this.totalItems=0,this.display="list",this.facility={},this.currentSearch=""}return t.prototype.ngOnDestroy=function(){},t.prototype.ngOnInit=function(){var t=this;this.patientService.getActiveFacility().subscribe((function(e){t.facility=e,t.onPageChange(0)}))},t.prototype.searchPatient=function(t){this.currentSearch=t,this.page=0,this.loadAll()},t.prototype.select=function(t){this.path?this.router.navigateByUrl(this.path+"/"+t.obj.uuid):this.router.navigate(["..","patients",t.obj.uuid,"view"],{relativeTo:this.activatedRoute})},t.prototype.onPageChange=function(t){this.page=t,this.loadAll()},t.prototype.loadPage=function(t){this.loadAll()},t.prototype.loadAll=function(){var t=this;this.loading=!0,this.patientService.query({keyword:this.currentSearch,page:this.page>0?this.page-1:0,facilityId:this.facility.id||0,size:this.itemsPerPage,sort:["id","asc"]}).subscribe((function(e){t.onSuccess(e.body,e.headers)}),(function(e){return t.onError(e)}))},t.prototype.onSuccess=function(t,e){this.patients=t,this.totalItems=e.get("X-Total-Count"),this.loading=!1},t.prototype.onError=function(t){this.notification.openSnackMessage(t.message),this.loading=!1},t.ctorParameters=function(){return[{type:M},{type:s.NotificationService},{type:o.Router},{type:o.ActivatedRoute}]},g([e.Input(),b("design:type",String)],t.prototype,"path",void 0),t=g([e.Component({selector:"lamis-patients",template:'<div class="layout">\n    <div class="list-container">\n        <div class="row">\n            <div class="col-md-8 col-md-offset-4">\n                <div class="adf-toolbar--spacer"></div>\n                <td-search-box backIcon="arrow_back" class="push-right-sm"\n                               placeholder="Search here" [debounce]="500"\n                               [(ngModel)]="currentSearch"\n                               (searchDebounce)="searchPatient($event)"\n                               (search)="searchPatient($event)"\n                               (clear)="currentSearch = \'\'" flex>\n                </td-search-box>\n            </div>\n        </div>\n        <br/>\n        <adf-datatable *ngIf="patients"\n                       [rows]="patients"\n                       [loading]="loading"\n                       [display]="display"\n                       (rowClick)="select($event.value)">\n            <data-columns>\n                <data-column key="name" title="Name" sortable="true"></data-column>\n                <data-column key="hospitalNum" title="Hospital Number" sortable="true"></data-column>\n                <data-column key="uniqueId" title="Unique ID" sortable="true"></data-column>\n                <data-column key="gender" title="Gender" sortable="true">\n                    <ng-template let-context="$implicit">\n                        {{context.row.getValue(\'gender\') === \'MALE\' ? \'Male\' : \'Female\'}}\n                    </ng-template>\n                </data-column>\n                <data-column key="status" title="Current Status" sortable="true"></data-column>\n                <data-column key="phone" title="Telephone Number" sortable="true"></data-column>\n                <data-column key="address" title="Address" class="full-width ellipsis-cell"></data-column>\n            </data-columns>\n            <adf-loading-content-template>\n                <ng-template>\n                    <mat-progress-spinner\n                            class="adf-document-list-loading-margin"\n                            [color]="\'primary\'"\n                            [mode]="\'indeterminate\'">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n        </adf-datatable>\n    </div>\n    <adf-empty-content\n            *ngIf="!patients"\n            icon="blur_on"\n            [title]="\'No Patients found\'"\n            [subtitle]="\'No Patients matching search criteria or no Patients available\'">\n    </adf-empty-content>\n    <ngb-pagination [collectionSize]="totalItems"\n                    [(page)]="page"\n                    [pageSize]="itemsPerPage"\n                    [maxSize]="5"\n                    size="sm"\n                    [rotate]="true"\n                    [boundaryLinks]="true"\n                    (pageChange)="loadPage(page)">\n    </ngb-pagination>\n\n</div>\n<div class="fab-container">\n    <button mat-fab\n            [matTooltip]="\'Register New Patient\'"\n            [routerLink]="[\'new\']">\n        <mat-icon>add</mat-icon>\n    </button>\n</div>\n'}),b("design:paramtypes",[M,s.NotificationService,o.Router,o.ActivatedRoute])],t)}(),P=r,D=function(){function t(t,e,n,i,a,r,o,s){this.router=t,this.route=e,this.patientService=n,this.cfr=i,this._dialogService=a,this.notificationService=r,this._viewContainerRef=o,this.renderer2=s,this.template="patient-details",this.properties=[]}return t.prototype.ngOnInit=function(){var t=this;this.route.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,t.patientService.currentClientStatus(n.uuid).subscribe((function(e){t.status=e})),t.attacheWidgets(),t.getObservations()}))},t.prototype.edit=function(){this.router.navigate(["..","edit"],{relativeTo:this.route})},t.prototype.updateStatus=function(){this.router.navigate(["/","client-statuses","patient",this.entity.uuid,"new"])},t.prototype.delete=function(){var t=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this patient, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(e){e&&t.patientService.delete(t.entity.id).subscribe((function(e){e.ok?t.router.navigate(["patients"]):t.notificationService.showError("Error deleting patient, please try again")}))}))},t.prototype.previousState=function(){window.history.back()},t.prototype.getComponentFactory=function(t){return Array.from(this.cfr._factories.values()).find((function(e){return e.componentType.name===t}))},t.prototype.getObservations=function(){var t=this;this.patientService.observations(this.entity.id).subscribe((function(e){return t.observations=e}))},t.prototype.addObservation=function(t){var e=t.path.split("/"),n=["/"];n.push.apply(n,T(e)),n.push("patient",this.entity.uuid,"new"),this.router.navigate(T(n))},t.prototype.attacheWidgets=function(){this.buildWidget("TimelineComponent","Recent Activities","timeline"),this.buildWidget("SummaryWidgetComponent","Patient Summary","account_balance_wallet")},t.prototype.ngOnDestroy=function(){},t.prototype.buildWidget=function(t,e,n){var i=this.getComponentFactory(t);if(void 0!==i){var a=this.getComponentFactory("WidgetContainerComponent"),r=this.container.createComponent(a);if(!r.instance.embeddedContainer){var o=r.instance.constructor.name;throw new TypeError("Trying to render embedded content. "+o+" must have @ViewChild() embeddedContainer defined")}console.log("Created component",r);var s=r.instance.embeddedContainer.createComponent(i);this.renderer2.addClass(r.location.nativeElement,"col-md-6"),r.instance.icon=n,r.instance.title=e;try{s.instance.patientId=this.entity.id,s.instance.patientUuid=this.entity.uuid}catch(t){}}},t.prototype.age=function(t){var e=P().diff(t,"years");return e>0?e+" year(s)":(e=P().diff(t,"months"))>0?e+" month(s)":P().diff(t,"weeks")+" week(s)"},t.ctorParameters=function(){return[{type:o.Router},{type:o.ActivatedRoute},{type:M},{type:e.ComponentFactoryResolver},{type:m.TdDialogService},{type:s.NotificationService},{type:e.ViewContainerRef},{type:e.Renderer2}]},g([e.ViewChild("container",{read:e.ViewContainerRef,static:!0}),b("design:type",e.ViewContainerRef)],t.prototype,"container",void 0),t=g([e.Component({selector:"lamis-patient",template:'<div>\n    <mat-card>\n        <mat-card class="dark-blue-100 full-width">\n            <mat-card-content>\n                <div class="row">\n                    <div class="col-md-9">\n                        <div class="row">\n                            <mat-form-field class="col-md-3">\n                                <mat-label>Surname</mat-label>\n                                <input matInput [value]="entity.surname" disabled style="font-weight: 900">\n                            </mat-form-field>\n                            <mat-form-field class="col-md-3">\n                                <mat-label>Other Names</mat-label>\n                                <input matInput [value]="entity.otherNames" disabled style="font-weight: 900">\n                            </mat-form-field>\n                            <div class="col-md-1"></div>\n                            <div class="col-md-3">\n                                <span style="font-size: 12px">\n                                    {{entity.gender === \'FEMALE\' ? \'Female\' : \'Male\'}} {{age(entity.dateBirth)}}\n                                    ({{entity.dateBirth | date: \'dd MMM, yyyy\'}})\n                                </span>\n                            </div>\n                            <mat-form-field class="col-md-2">\n                                <mat-label>Hospital Number</mat-label>\n                                <input matInput [value]="entity.hospitalNum" disabled style="font-weight: 900">\n                            </mat-form-field>\n                        </div>\n                        <div class="row">\n                            <mat-form-field class="col-md-8">\n                                <mat-label>Address</mat-label>\n                                <input matInput [value]="entity.address" disabled style="font-weight: 800">\n                            </mat-form-field>\n                            <mat-form-field class="col-md-4">\n                                <mat-label>Telephone Number</mat-label>\n                                <input matInput [value]="entity.phone || \' \'" disabled style="font-weight: 700">\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="col-md-3">\n                        <mat-form-field class="col-md-12">\n                            <mat-label>Current Status</mat-label>\n                            <input matInput [value]="status" disabled style="font-weight: 800">\n                        </mat-form-field>\n                        <a (click)="previousState()" class="dark-blue-200">BACK</a>\n                    </div>\n                </div>\n            </mat-card-content>\n        </mat-card>\n        <div class="">\n            <div class="row">\n                <div class="col-md-9">\n                    <div class="row">\n                        <div #container></div>\n                    </div>\n                </div>\n                <div class="col-md-3">\n                    <mat-card class="dark-blue-200">\n                        <mat-card-header>\n                            General Actions\n                        </mat-card-header>\n                        <mat-divider></mat-divider>\n                        <mat-card-content>\n                            <mat-nav-list>\n                                <mat-list-item *ngFor="let action of observations">\n                                    <mat-icon mat-list-icon>{{action.icon || \'dashboard\'}}</mat-icon>\n                                    <a mat-line matTooltip="{{action.tooltip || \'\'}}"\n                                       (click)="addObservation(action)">{{action.name}}</a>\n                                </mat-list-item>\n                                <mat-list-item>\n                                    <mat-icon mat-list-icon>edit</mat-icon>\n                                    <a mat-line matTooltip="Update Patient Status" (click)="updateStatus()">Update\n                                        Client Status</a>\n                                </mat-list-item>\n                                <mat-list-item>\n                                    <mat-icon mat-list-icon>edit</mat-icon>\n                                    <a mat-line matTooltip="Edit Patient registration information"\n                                       (click)="edit()">Edit Registration\n                                        Information</a>\n                                </mat-list-item>\n                                <mat-list-item>\n                                    <mat-icon mat-list-icon>delete</mat-icon>\n                                    <a mat-line matTooltip="Delete patient" (click)="delete()">Delete Patient</a>\n                                </mat-list-item>\n                            </mat-nav-list>\n                        </mat-card-content>\n                    </mat-card>\n                </div>\n            </div>\n        </div>\n    </mat-card>\n</div>\n',styles:[".bold{font-weight:700}"]}),b("design:paramtypes",[o.Router,o.ActivatedRoute,M,e.ComponentFactoryResolver,m.TdDialogService,s.NotificationService,e.ViewContainerRef,e.Renderer2])],t)}(),E=r,w=function(){function t(t,e,n,i,a){this.patientService=t,this.notification=e,this.loaderService=n,this._dialogService=i,this.activatedRoute=a,this.template="patient-edit",this.ovc={},this.error=!1,this.today=E(),this.minDob=E().subtract(75,"years"),this.minDateRegistration=E("1998","YYYY"),this.maxDateBirth=E().subtract(2,"months"),this.maxDateConfirmed=E(),this.minDateConfirmed=E("1998","YYYY"),this.ovcApplicable=!1,this.prep=!1}return t.prototype.createEntity=function(){return{}},t.prototype.ngOnInit=function(){var t=this;this.patientService.getActiveFacility().subscribe((function(e){t.entity.facility=e})),this.isSaving=!1,this.activatedRoute.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,void 0===t.entity&&(t.entity=t.createEntity(),t.entity.extra={art:!0}),t.entity.id&&(t.ovcMin=t.entity.dateBirth.clone()),t.entity.id&&t.entity.lga&&(t.minDateRegistration=t.entity.dateBirth.clone().add(2,"month"),t.minDateConfirmed=t.entity.dateBirth.clone().add(1,"month"),t.patientService.getStateByLga(t.entity.lga.id).subscribe((function(e){t.state=e,t.stateChange(t.state.id)}))),t.entity.extra&&(t.targetGroup=t.entity.extra.targetGroup),t.entity.extra&&t.entity.extra.prep&&(t.prep=!0,t.indicationForPrep=t.entity.extra.prep.indicationForPrep,t.prepId=t.entity.extra.prep.prepId,t.onDemandIndication=t.entity.extra.prep.onDemandIndication),t.entity.extra&&t.entity.extra.ovc&&(t.ovc.householdUniqueNo=t.entity.extra.ovc.householdUniqueNo,t.ovc.referredTo=t.entity.extra.ovc.referredTo,t.ovc.referredFrom=t.entity.extra.ovc.referredFrom,t.entity.extra.ovc.dateReferredTo&&(t.ovc.dateReferredTo=E(t.entity.extra.ovc.dateReferredTo)),t.entity.extra.ovc.dateReferredFrom&&(t.ovc.dateReferredFrom=E(t.entity.extra.ovc.dateReferredFrom)),t.entity.extra.ovc.servicesProvided||(t.ovc.servicesProvided=[]));var i=t.entity.dateBirth&&t.entity.dateBirth.clone()||E("1998-01-01","YYYY-MM-DD");E().subtract(17,"years").isAfter(i)||(t.ovcApplicable=!0),t.patientForm.form.setErrors({invalid:!0}),t.patientForm.form.markAllAsTouched()})),this.patientService.getStates().subscribe((function(e){return t.states=e}))},t.prototype.entityCompare=function(t,e){return i.entityCompare(t,e)},t.prototype.estimateDob=function(){if(this.age&&this.ageUnit&&this.entity.dateRegistration){var t=this.entity.dateRegistration;this.entity.dateBirth=t.clone().subtract(this.age,this.ageUnit),this.ovcMin=this.entity.dateBirth.clone(),this.minDateConfirmed=this.entity.dateBirth.clone().add(1,"months"),this.ovcApplicable=!this.entity.dateRegistration.clone().subtract(17,"years").isAfter(this.entity.dateBirth)}},t.prototype.stateChange=function(t){var e=this;this.patientService.getLgasByState(t).subscribe((function(t){return e.lgas=t}))},t.prototype.statusChanged=function(){this.prep="HIV_NEGATIVE"===this.entity.statusAtRegistration,this.prep?(this.entity.extra.art=!1,this.entity.extra.prep={registered:!0}):(this.entity.extra.art=!0,this.entity.extra.prep={registered:!1})},t.prototype.previousState=function(){window.history.back()},t.prototype.dateBirthChanged=function(t){this.minDateRegistration=t.clone().add(2,"months"),this.minDateConfirmed=t.clone().add(1,"months"),this.minDateRegistration.isBefore(E("1998","YYYY"),"day")&&(this.minDateRegistration=E("1998","YYYY"),this.minDateConfirmed=E("1998","YYYY")),this.ovcMin=t.clone(),this.entity.dateRegistration&&(this.ovcApplicable=!this.entity.dateRegistration.clone().subtract(17,"years").isAfter(this.entity.dateBirth))},t.prototype.dateRegistrationChanged=function(t){this.maxDateBirth=t.clone().subtract(2,"months"),this.maxDateConfirmed=t.clone(),this.entity.dateBirth&&(this.ovcApplicable=!this.entity.dateRegistration.clone().subtract(17,"years").isAfter(this.entity.dateBirth))},t.prototype.save=function(){if(this.isSaving=!0,this.prep?(this.entity.extra||(this.entity.extra={}),this.entity.extra.prep={registered:!0,prepId:this.prepId,indicationForPrep:this.indicationForPrep,onDemandIndication:this.onDemandIndication}):this.entity.extra.prep={registered:!1},this.ovcApplicable){if(this.entity.extra||(this.entity.extra={}),this.entity.extra.ovc={},this.entity.extra.ovc=this.ovc,this.entity.extra.ovc.dateReferredFrom=null!=this.ovc.dateReferredFrom&&this.ovc.dateReferredFrom.isValid()?this.ovc.dateReferredFrom.format(i.DATE_FORMAT):null,this.entity.extra.ovc.dateReferredTo=null!=this.ovc.dateReferredTo&&this.ovc.dateReferredTo.isValid()?this.ovc.dateReferredTo.format(i.DATE_FORMAT):null,this.ovc.householdUniqueNo&&!this.ovc.referredFrom&&!this.ovc.referredTo)return void this._dialogService.openAlert({title:"OVC Partner is required",message:"Please indicate either OVC Partner transferred to or from",disableClose:!0});if((this.ovc.referredTo||this.ovc.referredFrom)&&!this.ovc.householdUniqueNo)return void this._dialogService.openAlert({title:"Household number is required",message:"Please indicate Household Unique No",disableClose:!0});if(this.ovc.referredFrom&&this.ovc.referredTo)return void this._dialogService.openAlert({title:"OVC Partner mismatch",message:"Please provide either OVC Partner transfer to or from, not both",disableClose:!0})}this.targetGroup&&(this.entity.extra.targetGroup=this.targetGroup),this.loaderService.open("Saving patient..."),this.entity.id?this.subscribeToSaveResponse(this.patientService.update(this.entity)):(this.entity.dobEstimated&&(this.entity.dateBirth=this.entity.dateRegistration.clone().subtract(this.age,this.ageUnit)),this.subscribeToSaveResponse(this.patientService.create(this.entity)))},t.prototype.subscribeToSaveResponse=function(t){var e=this;this.loaderService.close(),t.subscribe((function(t){return e.onSaveSuccess(t.body)}),(function(t){e.onSaveError(),e.onError(t.message)}))},t.prototype.onSaveSuccess=function(t){this.isSaving=!1,this.notification.showInfo("Patient successfully saved"),this.previousState()},t.prototype.onSaveError=function(){this.isSaving=!1,this.error=!0},t.prototype.onError=function(t){this.notification.showError(t)},t.prototype.isOVCAge=function(){if(this.age&&"years"===this.ageUnit&&this.age>=10&&this.age<=24)return!0;var t=this.entity.dateBirth.clone(),e=this.entity.dateRegistration.clone().diff(t);return e>=10&&e<=24},t.ctorParameters=function(){return[{type:M},{type:s.NotificationService},{type:i.AppLoaderService},{type:m.TdDialogService},{type:o.ActivatedRoute}]},g([e.ViewChild("patientForm",{static:!0}),b("design:type",p.NgForm)],t.prototype,"patientForm",void 0),t=g([e.Component({selector:"lamis-patient-edit",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #patientForm="ngForm">\n            <mat-card class="default">\n                <mat-card-content>\n                    <mat-divider></mat-divider>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Hospital Number</mat-label>\n                                <input matInput [(ngModel)]="entity.hospitalNum" #hospitalNum="ngModel"\n                                       [required]="!entity.id"\n                                       uniqueHospitalNum\n                                       [disabled]="!!entity.id"\n                                       name="hospitalNum"/>\n                                <mat-error\n                                        *ngIf="hospitalNum.errors && (hospitalNum.dirty || hospitalNum.touched) && (hospitalNum.errors.required)">\n                                    Hospital Number is required\n                                </mat-error>\n                                <mat-error\n                                        *ngIf="hospitalNum.errors && (hospitalNum.dirty || hospitalNum.touched) && (hospitalNum.errors.numberExists)">\n                                    Hospital Number is used by another patient\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Unique ID</mat-label>\n                                <input matInput [(ngModel)]="entity.uniqueId" name="uniqueId"/>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6" *ngIf="!!minDateRegistration">\n                            <mat-form-field class="full-width">\n                                <input matInput [matDatepicker]="picker"\n                                       placeholder="Date of Registration/Transfer-In"\n                                       [(ngModel)]="entity.dateRegistration"\n                                       #registration="ngModel"\n                                       [max]="today"\n                                       [min]="minDateRegistration"\n                                       (dateChange)="dateRegistrationChanged($event.value)"\n                                       name="registration"\n                                       required>\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]="picker">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker></mat-datepicker>\n                                <mat-error\n                                        *ngIf="registration.errors && (registration.dirty || registration.touched || !!entity.id) && (registration.errors.required)">\n                                    Date of Registration is required\n                                </mat-error>\n                                <mat-error\n                                        *ngIf="registration.errors && (registration.dirty || registration.touched || !!entity.id) && (registration.errors.min)">\n                                    Date of Registration cannot be before {{minDateRegistration | date: \'dd MMM, yyyy\'}}\n                                </mat-error>\n                                <mat-error\n                                        *ngIf="registration.errors && (registration.dirty || registration.touched || !!entity.id) && (registration.errors.max)">\n                                    Date of Registration cannot be in the future\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Surname</mat-label>\n                                <input matInput [(ngModel)]="entity.surname" #sn="ngModel"\n                                       required\n                                       [minLength]="2"\n                                       name="sn"/>\n                                <mat-error\n                                        *ngIf="sn.errors && (sn.dirty || sn.touched || !!entity.id) && (sn.errors.required)">\n                                    Surname is required\n                                </mat-error>\n                                <mat-error\n                                        *ngIf="sn.errors && (sn.dirty || sn.touched || !!entity.id) && (sn.errors.minLength)">\n                                    Minimum length for Surname is 2 characters\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Other Names</mat-label>\n                                <input matInput [(ngModel)]="entity.otherNames" #on="ngModel"\n                                       required\n                                       [minLength]="5"\n                                       name="on"/>\n                                <mat-error\n                                        *ngIf="on.errors && (on.dirty || on.touched || !!entity.id) && (on.errors.required)">\n                                    Other Names required\n                                </mat-error>\n                                <mat-error\n                                        *ngIf="on.errors && (on.dirty || on.touched || !!entity.id) && (on.errors.minLength)">\n                                    Minimum length for Other Names is 5 characters\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div *ngIf="!entity.id">\n                        <fieldset>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-checkbox [(ngModel)]="entity.dobEstimated" name="est">Age Estimated?\n                                    </mat-checkbox>\n                                </div>\n                                <div class="col-md-6">\n                                    <div *ngIf="entity.dobEstimated" class="row">\n                                        <div class="col-md-6">\n                                            <mat-form-field class="full-width">\n                                                <mat-label>Age at Registration</mat-label>\n                                                <input matInput [(ngModel)]="age" required\n                                                       [min]="2"\n                                                       [max]="70"\n                                                       (change)="estimateDob()"\n                                                       name="age" #age1="ngModel">\n                                                <mat-error\n                                                        *ngIf="age1.errors && (age1.dirty || age1.touched) && (age1.errors.min)">\n                                                    Minimum age is 2\n                                                </mat-error>\n                                                <mat-error\n                                                        *ngIf="age1.errors && (age1.dirty || age1.touched) && (age1.errors.max)">\n                                                    Maximum age is 70\n                                                </mat-error>\n                                                <mat-error\n                                                        *ngIf="age1.errors && (age1.dirty || age1.touched) && (age1.errors.required)">\n                                                    Estimated age is required\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </div>\n                                        <div class="col-md-6">\n                                            <mat-form-field class="full-width">\n                                                <mat-label>Age Units</mat-label>\n                                                <mat-select [(ngModel)]="ageUnit"\n                                                            (selectionChange)="estimateDob()"\n                                                            required name="units" #units="ngModel">\n                                                    <mat-option></mat-option>\n                                                    <mat-option [value]="\'years\'">Year(s)</mat-option>\n                                                    <mat-option [value]="\'months\'">Month(s)</mat-option>\n                                                </mat-select>\n                                                <mat-error\n                                                        *ngIf="units.errors && (units.dirty || units.touched) && (units.errors.required)">\n                                                    Age units is required\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <mat-form-field class="full-width" *ngIf="!entity.dobEstimated">\n                                            <input matInput [matDatepicker]="picker1"\n                                                   placeholder="Date of Birth"\n                                                   [(ngModel)]="entity.dateBirth"\n                                                   [min]="minDob"\n                                                   (dateChange)="dateBirthChanged($event.value)"\n                                                   required\n                                                   [max]="maxDateBirth"\n                                                   #dob1="ngModel"\n                                                   name="dob">\n                                            <mat-datepicker-toggle\n                                                    matSuffix\n                                                    [for]="picker1">\n                                            </mat-datepicker-toggle>\n                                            <mat-datepicker #picker1></mat-datepicker>\n                                            <mat-error\n                                                    *ngIf="dob1.errors && (dob1.dirty || dob1.touched) && (dob1.errors.required)">\n                                                Date of Birth is required\n                                            </mat-error>\n                                        </mat-form-field>\n                                    </div>\n                                </div>\n                            </div>\n                        </fieldset>\n                    </div>\n                    <div *ngIf="entity.id">\n                        <div class="row">\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width" *ngIf="minDob">\n                                    <input matInput [matDatepicker]="picker2"\n                                           placeholder="Date of Birth"\n                                           [(ngModel)]="entity.dateBirth"\n                                           #birth="ngModel"\n                                           (dateChange)="dateBirthChanged($event.value)"\n                                           [max]="maxDateBirth"\n                                           [min]="minDob"\n                                           name="dob"\n                                           required>\n                                    <mat-datepicker-toggle\n                                            matSuffix\n                                            [for]="picker2">\n                                    </mat-datepicker-toggle>\n                                    <mat-datepicker #picker2></mat-datepicker>\n                                    <mat-error\n                                            *ngIf="birth.errors && (birth.dirty || birth.touched || !!entity.id) && (birth.errors.required)">\n                                        Date of Birth is required\n                                    </mat-error>\n                                    <mat-error\n                                            *ngIf="birth.errors && (birth.dirty || birth.touched || !!entity.id) && (birth.errors.max)">\n                                        Date of Birth cannot be after Date of Registration\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Gender</mat-label>\n                                <mat-select [(ngModel)]="entity.gender"\n                                            required name="gender" #gender="ngModel">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'FEMALE\'">Female</mat-option>\n                                    <mat-option [value]="\'MALE\'">Male</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf="gender.errors && (gender.dirty || gender.touched || !!entity.id) && (gender.errors.required)">\n                                    Gender is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Marital Status</mat-label>\n                                <mat-select [(ngModel)]="entity.maritalStatus"\n                                            required name="status" #status="ngModel">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'Single\'">Single</mat-option>\n                                    <mat-option [value]="\'Married\'">Married</mat-option>\n                                    <mat-option [value]="\'Widowed\'">Widowed</mat-option>\n                                    <mat-option [value]="\'Separated\'">Separated</mat-option>\n                                    <mat-option [value]="\'Divorced\'">Divorced</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf="status.errors && (status.dirty || status.touched || !!entity.id) && (status.errors.required)">\n                                    Marital Status is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Job /Occupation Status</mat-label>\n                                <mat-select name="occupation" [(ngModel)]="entity.occupation">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'Unemployed\'">Unemployed</mat-option>\n                                    <mat-option [value]="\'Employed\'">Employed</mat-option>\n                                    <mat-option [value]="\'Student\'">Student</mat-option>\n                                    <mat-option [value]="\'Retired\'">Retired</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Educational Level</mat-label>\n                                <mat-select name="education" [(ngModel)]="entity.education">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'None\'">None</mat-option>\n                                    <mat-option [value]="\'Primary\'">Primary</mat-option>\n                                    <mat-option [value]="\'Senior Secondary\'">Senior Secondary</mat-option>\n                                    <mat-option [value]="\'Quranic\'">Quranic</mat-option>\n                                    <mat-option [value]="\'Junior Secondary\'">Junior Secondary</mat-option>\n                                    <mat-option [value]="\'Post Secondary\'">Post Secondary</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>State of Residence</mat-label>\n                                <mat-select name="state" [(ngModel)]="state"\n                                            [compareWith]="entityCompare"\n                                            (selectionChange)="stateChange($event.value.id)">\n                                    <mat-option></mat-option>\n                                    <mat-option *ngFor="let state of states" [value]="state">{{state.name}}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>LGA of Residence</mat-label>\n                                <mat-select name="lga" [(ngModel)]="entity.lga" required #lga="ngModel"\n                                            [compareWith]="entityCompare">\n                                    <mat-option></mat-option>\n                                    <mat-option *ngFor="let lga of lgas" [value]="lga">{{lga.name}}</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf="lga.errors && (lga.dirty || lga.touched || !!entity.id) && (lga.errors.required)">\n                                    LGA of Residence is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label class="form-label">Address</mat-label>\n                                <textarea name="address" matInput [(ngModel)]="entity.address"\n                                          rows="3"\n                                          required #address="ngModel"></textarea>\n                                <mat-error\n                                        *ngIf="address.errors && (address.dirty || address.touched || !!entity.id) && (address.errors.required)">\n                                    Address is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Telephone Number</mat-label>\n                                <input matInput name="phone" phoneNumber [(ngModel)]="entity.phone" #phone="ngModel"/>\n                                <mat-error\n                                        *ngIf="phone.errors && (phone.dirty || phone.touched || !!entity.id) && (phone.errors.invalidPhone)">\n                                    Invalid phone number\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Target group</mat-label>\n                                <mat-select name="tg" [(ngModel)]="targetGroup"\n                                            required #tg="ngModel">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'CSW\'">CSW</mat-option>\n                                    <mat-option [value]="\'FSW\'">FSW</mat-option>\n                                    <mat-option [value]="\'TRANSGENDER\'">Transgender</mat-option>\n                                    <mat-option [value]="\'MSM\'">MSM</mat-option>\n                                    <mat-option [value]="\'PWID\'">PWID</mat-option>\n                                    <mat-option [value]="\'PRISON\'">Prison</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf="tg.errors && (tg.dirty || tg.touched || !!entity.id) && (tg.errors.required)">\n                                    Target Group is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>HIV Status at Registration</mat-label>\n                                <mat-select name="statusRegistration" [(ngModel)]="entity.statusAtRegistration"\n                                            (selectionChange)="statusChanged()"\n                                            required #status="ngModel">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'HIV_EXPOSED_STATUS_UNKNOWN\'">HIV Exposed Status Unknown\n                                    </mat-option>\n                                    <mat-option [value]="\'HIV_PLUS_NON_ART\'">HIV+ non ART</mat-option>\n                                    <mat-option [value]="\'ART_TRANSFER_IN\'">ART Transfer In</mat-option>\n                                    <mat-option [value]="\'PRE_ART_TRANSFER_IN\'">Pre-ART Transfer In</mat-option>\n                                    <mat-option [value]="\'HIV_NEGATIVE\'">HIV Negative</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf="status.errors && (status.dirty || status.touched || !!entity.id) && (status.errors.required)">\n                                    HIV Status at Registration is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Care Entry Point</mat-label>\n                                <mat-select name="entryPoint" [(ngModel)]="entity.entryPoint"\n                                            #entryPoint="ngModel">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'OPD\'">OPD</mat-option>\n                                    <mat-option [value]="\'In-patient\'">In-patient</mat-option>\n                                    <mat-option [value]="\'HCT\'">HCT</mat-option>\n                                    <mat-option [value]="\'TB DOTS\'">TB DOTS</mat-option>\n                                    <mat-option [value]="\'STI Clinic\'">STI Clinic</mat-option>\n                                    <mat-option [value]="\'PMTCT\'">PMTCT</mat-option>\n                                    <mat-option [value]="\'Transfer-in\'">Transfer-in</mat-option>\n                                    <mat-option [value]="\'Outreach\'">Outreach</mat-option>\n                                    <mat-option [value]="\'OVC Partner\'">OVC Partner</mat-option>\n                                    <mat-option [value]="\'Others\'">Others</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf="entryPoint.errors && (entryPoint.dirty || entryPoint.touched || !!entity.id) && (entryPoint.errors.required)">\n                                    Care Entry Point is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <ng-container *ngIf="prep">\n                        <fieldset>\n                            <legend>PrEP</legend>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>PrEP ID</mat-label>\n                                        <input matInput name="prepId" required [(ngModel)]="prepId" #prepID="ngModel"/>\n                                        <mat-error\n                                                *ngIf="prepID.errors && (prepID.dirty || prepID.touched || !!entity.id) && (prepID.errors.required)">\n                                            PrEP ID is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>Indication for PrEP</mat-label>\n                                        <mat-select name="indication" required #indication="ngModel"\n                                                    [(ngModel)]="indicationForPrep">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]="\'Sero-Discordant Relationship\'">Sero-Discordant\n                                                Relationship\n                                            </mat-option>\n                                            <mat-option [value]="\'On Demand\'">On Demand</mat-option>\n                                        </mat-select>\n                                        <mat-error\n                                                *ngIf="indication.errors && (indication.dirty || indication.touched || !!entity.id) && (indication.errors.required)">\n                                            Indication for PrEP is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-6" *ngIf="indicationForPrep === \'On Demand\'">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>On Demand Type</mat-label>\n                                        <mat-select name="type" required #type="ngModel"\n                                                    [(ngModel)]="onDemandIndication">\n                                            <mat-option></mat-option>\n                                            <mat-option [value]="\'Partner Non-disclosure\'">Partner Non-disclosure\n                                            </mat-option>\n                                            <mat-option [value]="\'Partner unwilling to undergo HIV testing\'">Partner\n                                                unwilling to undergo HIV testing\n                                            </mat-option>\n                                            <mat-option [value]="\'Client unable to negotiate condom use\'">Client unable\n                                                to negotiate condom use\n                                            </mat-option>\n                                            <mat-option [value]="\'Individuals with high risk sexual behaviors\'">\n                                                Individuals with high risk sexual behaviors\n                                            </mat-option>\n                                            <mat-option [value]="\'Others\'">Others</mat-option>\n                                        </mat-select>\n                                        <mat-error\n                                                *ngIf="type.errors && (type.dirty || type.touched || !!entity.id) && (type.errors.required)">\n                                            On Demand is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </fieldset>\n                    </ng-container>\n                    <div class="row" *ngIf="entity.gender === \'FEMALE\'">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Time of HIV Diagnosis</mat-label>\n                                <mat-select name="timeHivDiagnosis" [(ngModel)]="entity.timeHivDiagnosis">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'Previous - Non pregnant\'">Previous - Non pregnant</mat-option>\n                                    <mat-option [value]="\'Previous pregnancy (ANC)\'">Previous pregnancy (ANC)\n                                    </mat-option>\n                                    <mat-option [value]="\'Previous pregnancy (L&amp;D)\'">Previous pregnancy (L&amp;D)\n                                    </mat-option>\n                                    <mat-option [value]="\'Previous pregnancy (PP &lt;72hrs)\'">Previous pregnancy (PP\n                                        &lt;72hrs)\n                                    </mat-option>\n                                    <mat-option [value]="\'ANC\'">ANC</mat-option>\n                                    <mat-option [value]="\'Labour\'">Labour</mat-option>\n                                    <mat-option [value]="\'Post Partum &lt;=72hrs\'">Post Partum &lt;=72hrs</mat-option>\n                                    <mat-option [value]="\'Post Partum &gt;72hrs\'">Post Partum &gt;72hrs</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Date enrolled into PMTCT</mat-label>\n                                <input matInput [matDatepicker]="picker3"\n                                       [(ngModel)]="entity.dateEnrolledPMTCT"\n                                       #pmtct="ngModel"\n                                       [max]="entity.dateRegistration"\n                                       [min]="entity.dateBirth"\n                                       name="pmtct">\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]="picker3">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker3></mat-datepicker>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row" *ngIf="entity.gender === \'FEMALE\'">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Pregnancy Status</mat-label>\n                                <mat-select name="pregnancyStatus" [(ngModel)]="entity.pregnancyStatus">\n                                    <mat-option></mat-option>\n                                    <mat-option value="1">Not Pregnant</mat-option>\n                                    <mat-option value="2">Pregnant</mat-option>\n                                    <mat-option value="3">Breastfeeding</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Source of Referral</mat-label>\n                                <mat-select name="sourceReferral" [(ngModel)]="entity.sourceReferral">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'PMTCT outreach\'">PMTCT outreach</mat-option>\n                                    <mat-option [value]="\'Sex worker outreach\'">Sex worker outreach</mat-option>\n                                    <mat-option [value]="\'Medical outpatient\'">Medical outpatient</mat-option>\n                                    <mat-option [value]="\'Youth/Adolescent outreach\'">Youth/Adolescent outreach\n                                    </mat-option>\n                                    <mat-option [value]="\'Private/Commercial Health facility\'">Private/Commercial Health\n                                        facility\n                                    </mat-option>\n                                    <mat-option [value]="\'Under-fives/Immunization clinic\'">Under-fives/Immunization\n                                        clinic\n                                    </mat-option>\n                                    <mat-option [value]="\'External HCT centre\'">External HCT centre</mat-option>\n                                    <mat-option [value]="\'OVC Partner\'">OVC Partner</mat-option>\n                                    <mat-option [value]="\'In-patients\'">In-patients</mat-option>\n                                    <mat-option [value]="\'Self-referral\'">Self-referral</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>Enrollment Setting</mat-label>\n                                <mat-select name="enrollmentSetting" [(ngModel)]="entity.enrollmentSetting"\n                                            [required]="true" #setting="ngModel">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'Facility\'">Facility</mat-option>\n                                    <mat-option [value]="\'Community\'">Community</mat-option>\n                                </mat-select>\n                                <mat-error\n                                        *ngIf="setting.errors && (setting.dirty || setting.touched || !!entity.id) && (setting.errors.required)">\n                                    Enrollment Setting is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class="row">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width"\n                                            *ngIf="minDateConfirmed && entity.statusAtRegistration !== \'HIV_NEGATIVE\'">\n                                <mat-label>Date of Confirmed HIV Test</mat-label>\n                                <input matInput [matDatepicker]="picker2"\n                                       [(ngModel)]="entity.dateConfirmedHiv"\n                                       #time="ngModel"\n                                       [max]="maxDateConfirmed"\n                                       [min]="minDateConfirmed"\n                                       required\n                                       name="time">\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]="picker2">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker2></mat-datepicker>\n                                <mat-error\n                                        *ngIf="time.errors && (time.dirty || time.touched || !!entity.id) && (time.errors.required)">\n                                    Date of Confirmed HIV Test is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <mat-label>TB Status</mat-label>\n                                <mat-select name="tbStatus" [(ngModel)]="entity.tbStatus">\n                                    <mat-option></mat-option>\n                                    <mat-option [value]="\'No sign or symptoms of TB\'">No sign or symptoms of TB\n                                    </mat-option>\n                                    <mat-option [value]="\'TB suspected and referred for evaluation\'">TB suspected and\n                                        referred for evaluation\n                                    </mat-option>\n                                    <mat-option [value]="\'Currently on INH prophylaxis\'">Currently on INH prophylaxis\n                                    </mat-option>\n                                    <mat-option [value]="\'Currently on TB treatment\'">Currently on TB treatment\n                                    </mat-option>\n                                    <mat-option [value]="\'TB positive not on TB drugs\'">TB positive not on TB drugs\n                                    </mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <fieldset>\n                        <legend>Next of kin/Treatment Supporter</legend>\n                        <div class="row">\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width">\n                                    <mat-label>Name</mat-label>\n                                    <input matInput name="nextKin" [(ngModel)]="entity.nextOfKin"/>\n                                </mat-form-field>\n                            </div>\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width">\n                                    <mat-label>Relationship</mat-label>\n                                    <mat-select name="relationKin" [(ngModel)]="entity.nextOfKinRelationship">\n                                        <mat-option></mat-option>\n                                        <mat-option [value]="\'Aunt\'">Aunt</mat-option>\n                                        <mat-option [value]="\'Brother\'">Brother</mat-option>\n                                        <mat-option [value]="\'Cousin\'">Cousin</mat-option>\n                                        <mat-option [value]="\'Daughter\'">Daughter</mat-option>\n                                        <mat-option [value]="\'Father\'">Father</mat-option>\n                                        <mat-option [value]="\'Friend\'">Friend</mat-option>\n                                        <mat-option [value]="\'Grand parent\'">Grand parent</mat-option>\n                                        <mat-option [value]="\'Mother\'">Mother</mat-option>\n                                        <mat-option [value]="\'Sister\'">Sister</mat-option>\n                                        <mat-option [value]="\'Son\'">Son</mat-option>\n                                        <mat-option [value]="\'Spouse\'">Spouse</mat-option>\n                                        <mat-option [value]="\'Treatment Supporter\'">Treatment Supporter</mat-option>\n                                        <mat-option [value]="\'Uncle\'">Uncle</mat-option>\n                                    </mat-select>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                        <div class="row">\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width">\n                                    <mat-label>Address</mat-label>\n                                    <input matInput name="addressKin" [(ngModel)]="entity.nextOfKinAddress"/>\n                                </mat-form-field>\n                            </div>\n                            <div class="col-md-6">\n                                <mat-form-field class="full-width">\n                                    <mat-label>Telephone Number</mat-label>\n                                    <input matInput name="phoneKin" phoneNumber [(ngModel)]="entity.nextOfKinPhone"\n                                           #phone1="ngModel"/>\n                                    <mat-error\n                                            *ngIf="phone1.errors && (phone1.dirty || phone1.touched || !!entity.id) && (phone1.errors.invalidPhone)">\n                                        Invalid phone number\n                                    </mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </fieldset>\n                    <ng-container *ngIf="ovcApplicable">\n                        <fieldset>\n                            <legend>OVC</legend>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>Household Unique No</mat-label>\n                                        <input matInput name="householdUniqueNo" [(ngModel)]="ovc.householdUniqueNo"\n                                               [required]="!!ovc.referredTo || !!ovc.referredFrom"\n                                               #hun="ngModel"/>\n                                        <mat-error\n                                                *ngIf="hun.errors && (hun.dirty || hun.touched || !!entity.id) && (hun.errors.required)">\n                                            Household Unique No is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width"\n                                                    *ngIf="!!ovc.referredFrom || !!ovc.dateReferredFrom || ovcMin">\n                                        <mat-label>Referred To OVC Partner</mat-label>\n                                        <input matInput name="referredTo" [(ngModel)]="ovc.referredTo"\n                                               [required]="!!ovc.dateReferredTo"\n                                               [disabled]="!!ovc.referredFrom || !!ovc.dateReferredFrom"\n                                               #rt="ngModel"/>\n                                        <mat-error\n                                                *ngIf="rt.errors && (rt.dirty || rt.touched) && (rt.errors.required)">\n                                            OVC Partner referred to is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width"\n                                                    *ngIf="!!ovc.referredFrom || !!ovc.dateReferredFrom || ovcMin">\n                                        <mat-label>Date Referred to OVC Partner</mat-label>\n                                        <input matInput [matDatepicker]="picker8"\n                                               [(ngModel)]="ovc.dateReferredTo"\n                                               #drt="ngModel"\n                                               [max]="today"\n                                               [min]="ovcMin"\n                                               [disabled]="!!ovc.referredFrom || !!ovc.dateReferredFrom"\n                                               [required]="!!ovc.referredTo"\n                                               name="drt">\n                                        <mat-datepicker-toggle\n                                                matSuffix\n                                                [for]="picker8">\n                                        </mat-datepicker-toggle>\n                                        <mat-datepicker #picker8></mat-datepicker>\n                                        <mat-error\n                                                *ngIf="drt.errors && (drt.dirty || drt.touched) && (drt.errors.required)">\n                                            Date Referred to OVC Partner is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row">\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width"\n                                                    *ngIf="!!ovc.referredTo || !!ovc.dateReferredTo || ovcMin">\n                                        <mat-label>Referred From OVC Partner</mat-label>\n                                        <input matInput name="referredFrom" [(ngModel)]="ovc.referredFrom"\n                                               [required]="!!ovc.dateReferredFrom"\n                                               [disabled]="!!ovc.referredTo || !!ovc.dateReferredTo"\n                                               #rf="ngModel"/>\n                                        <mat-error\n                                                *ngIf="rf.errors && (rf.dirty || rf.touched) && (rf.errors.required)">\n                                            OVC Partner referred from is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class="col-md-6">\n                                    <mat-form-field class="full-width"\n                                                    *ngIf="!!ovc.referredTo || !!ovc.dateReferredTo || ovcMin">\n                                        <mat-label>Date Referred From OVC Partner</mat-label>\n                                        <input matInput [matDatepicker]="picker9"\n                                               [(ngModel)]="ovc.dateReferredFrom"\n                                               #drf="ngModel"\n                                               [max]="today"\n                                               [min]="ovcMin"\n                                               [disabled]="!!ovc.referredTo || !!ovc.dateReferredTo"\n                                               [required]="!!ovc.referredFrom"\n                                               name="drf">\n                                        <mat-datepicker-toggle\n                                                matSuffix\n                                                [for]="picker9">\n                                        </mat-datepicker-toggle>\n                                        <mat-datepicker #picker9></mat-datepicker>\n                                        <mat-error\n                                                *ngIf="drf.errors && (drf.dirty || drf.touched) && (drf.errors.required)">\n                                            Date Referred to OVC Partner is required\n                                        </mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class="row" *ngIf="ovc.householdUniqueNo">\n                                <div class="col-md-12">\n                                    <mat-form-field class="full-width">\n                                        <mat-label>Services Provided</mat-label>\n                                        <mat-select name="services" [(ngModel)]="ovc.servicesProvided" multiple>\n                                            <mat-option [value]="\'Emergency Health Services\'">Emergency Health\n                                                Services\n                                            </mat-option>\n                                            <mat-option [value]="\'Educational Support\'">Educational Support</mat-option>\n                                            <mat-option [value]="\'Household Economic Strengthening\'">Household Economic\n                                                Strengthening\n                                            </mat-option>\n                                            <mat-option [value]="\'Nutritional Support\'">Nutritional Support</mat-option>\n                                            <mat-option [value]="\'Health Education\'">Health Education</mat-option>\n                                            <mat-option [value]="\'Water, Sanitation &amp; Hygiene Messaging (WASH)\'">\n                                                Water, Sanitation &amp; Hygiene Messaging (WASH)\n                                            </mat-option>\n                                            <mat-option [value]="\'ART Adherence Support\'">ART Adherence Support\n                                            </mat-option>\n                                            <mat-option [value]="\'Nutrition Assessment, Counseling and Support\'">\n                                                Nutrition Assessment, Counseling and Support\n                                            </mat-option>\n                                            <mat-option [value]="\'Growth Monitoring\'">Growth Monitoring</mat-option>\n                                            <mat-option [value]="\'Emergency Support\'">Emergency Support</mat-option>\n                                            <mat-option [value]="\'School Enrollment/ Re-enrollment\'">School Enrollment/\n                                                Re-enrollment\n                                            </mat-option>\n                                            <mat-option [value]="\'Psychosocial Support\'">Psychosocial Support\n                                            </mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </fieldset>\n                    </ng-container>\n                </mat-card-content>\n                <mat-card-actions class="lamis-edit-form-actions">\n                    <button mat-button type="button" (click)="previousState()">Back</button>\n                    <button mat-raised-button color="primary" (click)="save()"\n                            [disabled]="patientForm.invalid || isSaving || (!!ovc.householdUniqueNo && !(!!ovc.referredFrom || !!ovc.referredTo))">\n                        {{entity.id ? \'Update\' : \'Save\'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n'}),b("design:paramtypes",[M,s.NotificationService,i.AppLoaderService,m.TdDialogService,o.ActivatedRoute])],t)}(),A=function(){function t(t,e){this.patientService=t,this.route=e}return t.prototype.ngOnInit=function(){var t=this;this.route.data.subscribe((function(e){var n=e.entity,i=n&&n.body?n.body:n;t.id=i.id,t.uuid=i.uuid}))},t.prototype.previousState=function(){window.history.back()},t.ctorParameters=function(){return[{type:M},{type:o.ActivatedRoute}]},t=g([e.Component({selector:"detailed-timeline",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <mat-card>\n            <mat-card-header>\n                <mat-card-title>Patient Activity History</mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n                <patient-timeline [patientId]="id" [patientUuid]="uuid" [detailed]="true"></patient-timeline>\n            </mat-card-content>\n            <mat-card-actions class="lamis-edit-form-actions">\n                <button mat-button type="button" (click)="previousState()">Back</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n'}),b("design:paramtypes",[M,o.ActivatedRoute])],t)}(),k=function(){function t(t){this.service=t}return t.prototype.resolve=function(t,e){var n=t.params.id?t.params.id:null;return n?this.service.findByUuid(n).pipe(a.filter((function(t){return t.ok})),a.map((function(t){return t.body}))):f.of({})},t.ctorParameters=function(){return[{type:M}]},t=g([e.Injectable(),b("design:paramtypes",[M])],t)}(),N=[{path:"",data:{title:"Patients",breadcrumb:"PATIENTS"},children:[{path:"",component:R,resolve:{pagingParams:i.PagingParamsResolve},data:{}},{path:":id/view",component:D,resolve:{entity:k},data:{authorities:["ROLE_USER"],title:"Patient Details",breadcrumb:"PATIENT DETAILS"}},{path:"new",component:w,data:{authorities:["ROLE_DEC"],title:"Add Patient",breadcrumb:"ADD PATIENT"}},{path:":id/edit",component:w,resolve:{entity:k},data:{authorities:["ROLE_DEC"],title:"Patient Edit",breadcrumb:"PATIENT EDIT"}},{path:":id/timeline",component:A,resolve:{entity:k},data:{authorities:["ROLE_DEC"],title:"Patient Timeline",breadcrumb:"PATIENT TIMELINE"}}]}],F=function(){function t(){}return g([e.Input(),b("design:type",String)],t.prototype,"title",void 0),g([e.Input(),b("design:type",String)],t.prototype,"icon",void 0),g([e.ViewChild("container",{read:e.ViewContainerRef,static:!0}),b("design:type",e.ViewContainerRef)],t.prototype,"embeddedContainer",void 0),t=g([e.Component({selector:"widget-container",template:"<mat-card class=\"dark-blue-100\">\n    <mat-card-header>\n        <mat-icon mat-card-avatar>{{icon || 'dashboard'}}</mat-icon>\n        <mat-card-title>{{title}}</mat-card-title>\n    </mat-card-header>\n    <mat-divider></mat-divider>\n    <mat-card-content>\n        <ng-container #container></ng-container>\n    </mat-card-content>\n</mat-card>\n",styles:["mat-icon.mat-card-avatar{width:30px;height:30px;font-size:30px}mat-card-title{padding-top:5px!important}"]})],t)}(),q=function(){function t(t,e){this.http=t,this.serverUrl=e,this.resourceUrl="",this.resourceUrl=e.SERVER_API_URL+"/api"}return t.prototype.deleteObservation=function(t,e){return this.http.delete(this.resourceUrl+"/"+t+"/"+e,{observe:"response"})},t.prototype.getObservation=function(t,e){return this.http.get(this.resourceUrl+"/"+t+"/by-uuid/"+e,{observe:"response"})},t.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[i.SERVER_API_URL_CONFIG]}]}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(n.HttpClient),e.ɵɵinject(i.SERVER_API_URL_CONFIG))},token:t,providedIn:"root"}),t=g([e.Injectable({providedIn:"root"}),y(1,e.Inject(i.SERVER_API_URL_CONFIG)),b("design:paramtypes",[n.HttpClient,Object])],t)}(),x=function(){function t(t,e,n,i,a){this.patientService=t,this.router=e,this.observationService=n,this._dialogService=i,this.notificationService=a,this.detailed=!1}return t.prototype.ngOnInit=function(){this.loadActivities()},t.prototype.view=function(t,e){this.router.navigate(["/",t,e,"patient",this.patientUuid,"view"])},t.prototype.edit=function(t,e){this.router.navigate(["/",t,e,"patient",this.patientUuid,"edit"])},t.prototype.delete=function(t,e){var n=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this event, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(i){i&&n.observationService.getObservation(t,e).subscribe((function(e){e.body&&n.observationService.deleteObservation(t,e.body.id).subscribe((function(t){t.ok?n.patientService.activities(n.patientId,n.detailed).subscribe((function(t){return n.timeLine=t})):n.notificationService.showError("Error deleting event, please try again")}))}))}))},t.prototype.loadActivities=function(){var t=this;this.patientService.activities(this.patientId,this.detailed).subscribe((function(e){return t.timeLine=e}))},t.ctorParameters=function(){return[{type:M},{type:o.Router},{type:q},{type:m.TdDialogService},{type:s.NotificationService}]},g([e.Input(),b("design:type",Number)],t.prototype,"patientId",void 0),g([e.Input(),b("design:type",String)],t.prototype,"patientUuid",void 0),g([e.Input(),b("design:type",Boolean)],t.prototype,"detailed",void 0),t=g([e.Component({selector:"patient-timeline",template:'<a class="mb-1 pb-1 underlined" [routerLink]="[\'/\', \'patients\', patientUuid, \'timeline\']" *ngIf="!detailed">Click here\n    to view detailed History</a>\n<mat-divider></mat-divider>\n<timeline>\n    <timeline-event *ngFor="let period of timeLine" side="right">\n        <timeline-badge>\n            <mat-icon>insert_invitation</mat-icon>\n        </timeline-badge>\n        <timeline-panel>\n            <timeline-header>\n                <h4>{{period.date}}</h4>\n            </timeline-header>\n            <mat-list>\n                <mat-list-item>\n                    <div matLine>\n                        <ng-container *ngFor="let event of period.activities">\n                            <div matLine>\n                                <button mat-icon-button aria-label="Delete event"\n                                        *ngIf="event.deletable"\n                                        (click)="delete(event.path, event.uuid)">\n                                    <mat-icon>delete</mat-icon>\n                                </button>\n                                <button mat-icon-button aria-label="View event"\n                                        *ngIf="event.viewable"\n                                        (click)="view(event.path, event.uuid)">\n                                    <mat-icon>remove_red_eye</mat-icon>\n                                </button>\n                                <button mat-icon-button aria-label="Edit event"\n                                        *ngIf="event.editable"\n                                        (click)="edit(event.path, event.uuid)">\n                                    <mat-icon>edit</mat-icon>\n                                </button>\n                            </div>\n                            <a mat-line matTooltip="{{event.name}}">{{event.name}}</a>\n                            <mat-divider></mat-divider>\n                        </ng-container>\n                    </div>\n                </mat-list-item>\n            </mat-list>\n        </timeline-panel>\n    </timeline-event>\n</timeline>\n'}),b("design:paramtypes",[M,o.Router,q,m.TdDialogService,s.NotificationService])],t)}(),O=function(){function t(){}return t.prototype.ngOnInit=function(){},t=g([e.Component({selector:"timeline",template:'<ul class="timeline">\n    <ng-content></ng-content>\n</ul>\n'})],t)}(),_=function(){function t(t){this.parent=t,this._side="left"}return Object.defineProperty(t.prototype,"side",{set:function(t){this._side=t,this.updateRowClasses(this._side)},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){this.updateRowClasses(this._side)},t.prototype.checkClass=function(t,e){return"left"===t||!t&&!0===e?"":"alternate"!==t&&t||!1!==e?"right"===t?"timeline-inverted":"":"timeline-inverted"},t.prototype.updateRowClasses=function(t){this.oddClass=this.checkClass(t,!0),this.evenClass=this.checkClass(t,!1)},t.ctorParameters=function(){return[{type:O}]},g([e.Input(),b("design:type",String),b("design:paramtypes",[String])],t.prototype,"side",null),t=g([e.Component({selector:"timeline-event",template:'<li class="timeline-event" ng-class-odd="oddClass" ng-class-even="evenClass">\n    <ng-content></ng-content>\n</li>\n'}),b("design:paramtypes",[O])],t)}(),U=function(){function t(t){this.event=t}return t.ctorParameters=function(){return[{type:_}]},t=g([e.Component({selector:"timeline-badge",template:"\n        <div class='timeline-badge'>\n            <ng-content></ng-content>\n        </div>\n    "}),b("design:paramtypes",[_])],t)}(),B=function(){function t(){}return t=g([e.Component({selector:"timeline-footer",template:"\n        <div class='timeline-footer'>\n            <ng-content></ng-content>\n        </div>\n    "})],t)}(),V=function(){function t(){}return t=g([e.Component({selector:"timeline-header",template:"\n        <div class='timeline-header'>\n            <ng-content></ng-content>\n        </div>\n    "})],t)}(),H=function(){function t(t){this.event=t}return t.ctorParameters=function(){return[{type:_}]},t=g([e.Component({selector:"timeline-panel",template:"\n        <div class='timeline-panel'>\n            <ng-content></ng-content>\n        </div>"}),b("design:paramtypes",[_])],t)}(),L=[U,_,B,V,H,O],j=function(){function t(){}return t=g([e.NgModule({declarations:T(L),exports:T(L)})],t)}(),Y=function(){function t(t){this.patientService=t}var n;return n=t,t.prototype.validate=function(t){var e=this;return t.valueChanges.pipe(a.debounceTime(300),a.take(1),a.switchMap((function(t){return e.patientService.existsByHospitalNumber(t)})))},t.ctorParameters=function(){return[{type:M}]},t=n=g([e.Directive({selector:"[uniqueHospitalNum]",providers:[{provide:p.NG_ASYNC_VALIDATORS,useExisting:n,multi:!0}]}),b("design:paramtypes",[M])],t)}(),G=r,W=function(){function t(t){this.patientService=t}return t.prototype.ngOnInit=function(){var t=this;this.patientService.getSummaryForPatient(this.patientId).subscribe((function(e){return t.summaries=e}))},t.prototype.propertiesForSummary=function(t){var e,n,a=[];try{for(var r=S(t.fields),o=r.next();!o.done;o=r.next()){var d=o.value,l=d.type.toLowerCase(),m=void 0;switch(l){case i.FieldType.boolean:m=new s.CardViewBoolItemModel({value:d.value,key:"",label:d.label});break;case i.FieldType.int:m=new s.CardViewIntItemModel({value:d.value,key:"",label:d.label});break;case i.FieldType.float:m=new s.CardViewFloatItemModel({value:d.value,key:"",label:d.label});break;case i.FieldType.date:m=new s.CardViewDateItemModel({value:d.value?G(d.value):null,key:"",label:d.label,format:"dd MMM, yyyy"});break;case i.FieldType.datetime:m=new s.CardViewDatetimeItemModel({value:d.value?G(d.value):null,key:"",label:d.label,format:"dd MMM, yyyy HH:mm"});break;default:m=new s.CardViewTextItemModel({value:d.value,key:"",label:d.label})}a.push(m)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}return a},t.ctorParameters=function(){return[{type:M}]},g([e.Input(),b("design:type",Number)],t.prototype,"patientId",void 0),g([e.Input(),b("design:type",String)],t.prototype,"patientUuid",void 0),g([e.Input(),b("design:type",Array)],t.prototype,"summaries",void 0),t=g([e.Component({selector:"patient-summary-widget",template:'<ng-container *ngIf="summaries">\n    <mat-card *ngFor="let summary of summaries" class="default mb-1 pb-0">\n        <ng-container *ngIf="!!summary.header">\n            <mat-card-title>{{summary.header}}</mat-card-title>\n            <mat-divider></mat-divider>\n        </ng-container>\n        <mat-card-content>\n            <adf-card-view [properties]="propertiesForSummary(summary)"></adf-card-view>\n        </mat-card-content>\n    </mat-card>\n</ng-container>\n'}),b("design:paramtypes",[M])],t)}(),K=function(){function t(){}return t=g([e.NgModule({declarations:[R,D,w,F,x,A,W,Y],imports:[d.CommonModule,u.NgJhipsterModule,i.LamisSharedModule,i.JsonFormModule,v.MatFormioModule,l.MatInputModule,l.MatIconModule,l.MatDividerModule,l.MatCardModule,l.MatSelectModule,l.MatButtonModule,l.MatCheckboxModule,l.MatTabsModule,o.RouterModule.forChild(N),l.MatProgressBarModule,m.CovalentMessageModule,l.MatListModule,l.MatChipsModule,s.CoreModule,m.CovalentDialogsModule,m.CovalentSearchModule,c.NgbPaginationModule,j,p.FormsModule,p.ReactiveFormsModule,i.MatDateFormatModule,h.CustomFormsModule,l.MatAutocompleteModule],exports:[R,D,w],entryComponents:[F,x,W],providers:[k]})],t)}(),z=r,$=function(){function t(t,e,n,i,a){this.patientService=t,this.activatedRoute=e,this.router=n,this.notification=i,this.appLoaderService=a,this.facilities=[],this.statusDates=[],this.today=z(),this.statuses=["TRACED_UNABLE_TO_LOCATE","TRACED_AGREED_TO_RETURN_TO_CARE","DID_NOT_ATTEMPT_TO_TRACE"]}return t.prototype.createEntity=function(){return{}},t.prototype.ngOnInit=function(){var t=this;this.isSaving=!1,this.patientService.getActiveFacility().subscribe((function(e){t.patientService.getAllFacility().subscribe((function(n){t.facilities=n.map((function(t){return t.name})).filter((function(t){return t!=e.name}))}))})),this.activatedRoute.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,void 0===t.entity&&(t.entity=t.createEntity());var i=t.activatedRoute.snapshot.paramMap.get("patientId");t.patientService.findByUuid(i).subscribe((function(e){t.entity.patient=e.body,t.patient=e.body,t.entity.facility=e.body.facility,t.patientService.getStatusDatesByPatient(e.body.id).subscribe((function(e){t.statusDates=e}))})),t.entity.id&&(t.patientService.getStatusName(t.entity.id).subscribe((function(e){return t.status=e})),t.entity&&t.entity.extra&&(t.facilityTransferredTo=t.entity.extra.facilityTransferredTo))}))},t.prototype.change=function(t){t&&(this.facilities=this.facilities.filter((function(e){return e.toLowerCase().includes(t.toLowerCase())})))},t.prototype.filterDates=function(t){var e=!1;return this.statusDates.forEach((function(n){0===t.diff(n,"days")&&(e=!0)})),this.entity.id&&0===t.diff(this.entity.dateStatus,"days")||!e},t.prototype.previousState=function(){window.history.back()},t.prototype.save=function(){this.appLoaderService.open("Saving Client status update..."),this.isSaving=!0,this.entity.extra||(this.entity.extra={}),this.entity.extra.facilityTransferredTo=this.facilityTransferredTo,this.statuses.includes(this.entity.status)&&(this.entity.outcome=this.entity.status,this.entity.status=null),void 0!==this.entity.id?this.subscribeToSaveResponse(this.patientService.updateClientStatus(this.entity)):this.subscribeToSaveResponse(this.patientService.saveClientStatus(this.entity))},t.prototype.subscribeToSaveResponse=function(t){var e=this;t.subscribe((function(t){return e.onSaveSuccess(t.body)}),(function(t){e.appLoaderService.close(),e.onSaveError(),e.onError(t.message)}))},t.prototype.onSaveSuccess=function(t){this.appLoaderService.close(),this.isSaving=!1,this.notification.showInfo("Client status update successfully saved"),this.previousState()},t.prototype.onSaveError=function(){this.isSaving=!1,this.notification.showError("Error saving status update")},t.prototype.onError=function(t){this.isSaving=!1,this.notification.showError(t)},t.ctorParameters=function(){return[{type:M},{type:o.ActivatedRoute},{type:o.Router},{type:s.NotificationService},{type:i.AppLoaderService}]},t=g([e.Component({selector:"client-status",template:'<script src="patient-details.component.ts"><\/script>\n<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #statusForm="ngForm">\n            <mat-card class="default">\n                <mat-card-content *ngIf="patient">\n                    <div>\n                        <mat-form-field class="full-width" *ngIf="entity">\n                            <input matInput [matDatepicker]="picker"\n                                   placeholder="{{entity.id ? \'Date of Status\' : \'Date of New Status\'}}"\n                                   [(ngModel)]="entity.dateStatus"\n                                   [matDatepickerFilter]="filterDates.bind(this)"\n                                   #visit="ngModel"\n                                   [max]="today"\n                                   [min]="patient.dateRegistration"\n                                   name="visit"\n                                   required>\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]="picker">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)">\n                                Date of new status is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)">\n                                Date of new status cannot be before {{entity.patient.dateRegistration}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)">\n                                Date of new status cannot be in the future\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class="full-width">\n                            <mat-select [(ngModel)]="entity.status"\n                                        placeholder="{{entity.id ? \'Status\' : \'New Status\'}}"\n                                        #outcome="ngModel" required name="outcome">\n                                <mat-option></mat-option>\n                                <mat-option [value]="\'ART_TRANSFER_OUT\'">ART Transfer Out</mat-option>\n                                <mat-option [value]="\'PRE_ART_TRANSFER_OUT\'">Pre-ART Transfer Out</mat-option>\n                                <mat-option [value]="\'STOPPED_TREATMENT\'">Stopped Treatment</mat-option>\n                                <mat-option [value]="\'KNOWN_DEATH\'">Died (Confirmed)</mat-option>\n                                <mat-option [value]="\'PREVIOUSLY_UNDOCUMENTED_TRANSFER_CONFIRMED\'">Previously\n                                    Undocumented Patient Transfer (Confirmed)\n                                </mat-option>\n                                <mat-option [value]="\'TRACED_UNABLE_TO_LOCATE\'">Traced Patient (Unable to locate)\n                                </mat-option>\n                                <mat-option [value]="\'TRACED_AGREED_TO_RETURN_TO_CARE\'">Traced Patient and agreed to\n                                    return to care\n                                </mat-option>\n                                <mat-option [value]="\'DID_NOT_ATTEMPT_TO_TRACE\'">Did Not Attempt to Trace Patient\n                                </mat-option>\n                            </mat-select>\n                            <mat-error\n                                    *ngIf="outcome.errors && (outcome.dirty || outcome.touched) && (outcome.errors.required)">\n                                New Status is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class="row" *ngIf="entity.outcome && entity.outcome.indexOf(\'TRACE\') !== -1">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <input matInput [matDatepicker]="picker1"\n                                       placeholder="Date of Tracked"\n                                       [(ngModel)]="entity.dateTracked"\n                                       #tracked="ngModel"\n                                       [min]="entity.patient.dateRegistration"\n                                       [max]="entity.dateStatus"\n                                       name="tracked"\n                                       required>\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]="picker1">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker1></mat-datepicker>\n                                <mat-error\n                                        *ngIf="tracked.errors && (tracked.dirty || tracked.touched) && (tracked.errors.required)">\n                                    Date tracked is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6" *ngIf="entity.outcome === \'TRACED_AGREED_TO_RETURN_TO_CARE\'">\n                            <mat-form-field class="full-width">\n                                <input matInput [matDatepicker]="picker2"\n                                       placeholder="Date Agreed to Return"\n                                       [(ngModel)]="entity.agreedDate"\n                                       #agreed="ngModel"\n                                       [min]="entity.dateStatus"\n                                       name="agreed"\n                                       required>\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]="picker2">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker2></mat-datepicker>\n                                <mat-error\n                                        *ngIf="agreed.errors && (agreed.dirty || agreed.touched) && (agreed.errors.required)">\n                                    Date of agreed to return is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div *ngIf="entity.status === \'ART_TRANSFER_OUT\'">\n                        <mat-form-field class="full-width">\n                            <input matInput type="text" placeholder="Facility Transferred To"\n                                   required name="fac" #fac="ngModel"\n                                   [(ngModel)]="facilityTransferredTo"\n                                   (input)="change($event.target.value)"\n                                   [matAutocomplete]="auto">\n                            <mat-autocomplete #auto="matAutocomplete">\n                                <mat-option *ngFor="let facility of facilities"\n                                            [value]="facility">{{facility}}</mat-option>\n                            </mat-autocomplete>\n                            <mat-error\n                                    *ngIf="fac.errors && (fac.dirty || fac.touched) && (fac.errors.required)">\n                                Facility transferred to is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf="entity.status === \'KNOWN_DEATH\'">\n                        <mat-form-field class="full-width">\n                            <mat-select [(ngModel)]="entity.causeOfDeath"\n                                        placeholder="Cause of Death"\n                                        #death="ngModel" required name="death">\n                                <mat-option></mat-option>\n                                <mat-option [value]="\'HIV disease resulting in TB\'">HIV disease resulting in TB\n                                </mat-option>\n                                <mat-option [value]="\'HIV disease resulting in cancer\'">HIV disease resulting in\n                                    cancer\n                                </mat-option>\n                                <mat-option [value]="\'HIV disease resulting in other infectious and parasitic disease\'">\n                                    HIV disease resulting in other infectious and parasitic disease\n                                </mat-option>\n                                <mat-option\n                                        [value]="\'Other HIV disease resulting in other disease or conditions leading to death\'">\n                                    Other HIV disease resulting in other disease or conditions leading to death\n                                </mat-option>\n                                <mat-option [value]="\'Other natural causes\'">Other natural causes</mat-option>\n                                <mat-option [value]="\'Non-natural causes\'">Non-natural causes</mat-option>\n                                <mat-option [value]="\'Unknown cause\'">Unknown cause</mat-option>\n                            </mat-select>\n                            <mat-error\n                                    *ngIf="death.errors && (death.dirty || death.touched) && (death.errors.required)">\n                                Cause of death is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf="entity.status === \'STOPPED_TREATMENT\'">\n                        <mat-form-field class="full-width">\n                            <mat-select [(ngModel)]="entity.reasonForInterruption"\n                                        placeholder="Reason for Interruption"\n                                        #interrupt="ngModel" required name="interrupt">\n                                <mat-option></mat-option>\n                                <mat-option [value]="\'Toxicity/side effect\'">Toxicity /side effect</mat-option>\n                                <mat-option [value]="\'Pregnancy\'">Pregnancy</mat-option>\n                                <mat-option [value]="\'Treatment failure\'">Treatment failure</mat-option>\n                                <mat-option [value]="\'Poor adherence\'">Poor adherence</mat-option>\n                                <mat-option [value]="\'Illness, hospitalization\'">Illness, hospitalization</mat-option>\n                                <mat-option [value]="\'Drug out of stock\'">Drug out of stock</mat-option>\n                                <mat-option [value]="\'Patient lacks finances\'">Patient lacks finances</mat-option>\n                                <mat-option [value]="\'Other patient decision\'">Other patient decision</mat-option>\n                                <mat-option [value]="\'Planned Rx interruption\'">Planned Rx interruption</mat-option>\n                                <mat-option [value]="\'Other\'">Other</mat-option>\n                            </mat-select>\n                            <mat-error\n                                    *ngIf="interrupt.errors && (interrupt.dirty || interrupt.touched) && (interrupt.errors.required)">\n                                Reason for interruption is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <mat-divider></mat-divider>\n                </mat-card-content>\n                <mat-card-actions class="lamis-edit-form-actions">\n                    <button mat-raised-button type="button" (click)="previousState()">Back</button>\n                    <button mat-raised-button color=\'primary\'\n                            [disabled]="statusForm.invalid"\n                            type="submit">\n                        {{entity.id !== undefined ? \'Update\' : \'Save\'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n'}),b("design:paramtypes",[M,o.ActivatedRoute,o.Router,s.NotificationService,i.AppLoaderService])],t)}(),J=function(){function t(t){this.service=t}return t.prototype.resolve=function(t,e){var n=t.params.id?t.params.id:null;return n?this.service.findClientStatus(n).pipe(a.filter((function(t){return t.ok})),a.map((function(t){return t.body}))):f.of({})},t.ctorParameters=function(){return[{type:M}]},t=g([e.Injectable(),b("design:paramtypes",[M])],t)}(),Q=[{path:"",data:{title:"Clinic Visit",breadcrumb:"CLINIC VISIT"},children:[{path:"patient/:patientId/new",component:$,data:{authorities:["ROLE_DEC"],title:"Update Client Status",breadcrumb:"UPDATE CLIENT STATUS"}},{path:":id/patient/:patientId/edit",component:$,resolve:{entity:J},data:{authorities:["ROLE_DEC"],title:"Client Status Edit",breadcrumb:"CLIENT STATUS EDIT"}}]}],X=function(){function t(){}return t=g([e.NgModule({imports:[d.CommonModule,p.FormsModule,p.ReactiveFormsModule,m.CovalentDialogsModule,i.LamisSharedModule,i.JsonFormModule,v.MatFormioModule,l.MatInputModule,l.MatIconModule,l.MatDividerModule,l.MatCardModule,l.MatSelectModule,l.MatButtonModule,l.MatCheckboxModule,l.MatTabsModule,o.RouterModule.forChild(Q),l.MatProgressBarModule,s.CoreModule,i.MatDateFormatModule],declarations:[$],exports:[$],providers:[J]})],t)}();t.ClientStatusModule=X,t.PatientListComponent=R,t.PatientModule=K,t.PatientService=M,t.ɵa=D,t.ɵb=w,t.ɵc=F,t.ɵd=x,t.ɵe=q,t.ɵf=A,t.ɵg=W,t.ɵh=Y,t.ɵi=k,t.ɵj=N,t.ɵk=j,t.ɵl=U,t.ɵm=_,t.ɵn=O,t.ɵo=B,t.ɵp=V,t.ɵq=H,t.ɵr=J,t.ɵs=Q,t.ɵt=$,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=lamis-patient-1.4.1.umd.min.js.map