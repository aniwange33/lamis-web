!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common/http"),require("@lamis/web-core"),require("rxjs/operators"),require("moment"),require("@angular/router"),require("@alfresco/adf-core"),require("@angular/common"),require("@angular/material"),require("@covalent/core"),require("@ng-bootstrap/ng-bootstrap"),require("ng-jhipster"),require("@angular/forms"),require("rxjs"),require("angular-material-formio"),require("ng2-validation")):"function"==typeof define&&define.amd?define("lamis-patient-1.2.0",["exports","@angular/core","@angular/common/http","@lamis/web-core","rxjs/operators","moment","@angular/router","@alfresco/adf-core","@angular/common","@angular/material","@covalent/core","@ng-bootstrap/ng-bootstrap","ng-jhipster","@angular/forms","rxjs","angular-material-formio","ng2-validation"],e):e(((t=t||self)["lamis-patient-1"]=t["lamis-patient-1"]||{},t["lamis-patient-1"][2]=t["lamis-patient-1"][2]||{},t["lamis-patient-1"][2][0]={}),t.ng.core,t.ng.common.http,t.webCore,t.rxjs.operators,t.moment_,t.ng.router,t.adfCore,t.ng.common,t.ng.material,t.core$1,t.ngBootstrap,t.ngJhipster,t.ng.forms,t.rxjs,t.angularMaterialFormio,t.ng2Validation)}(this,(function(t,e,n,r,i,a,o,s,d,l,m,u,c,p,f,v,h){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */function g(t,e,n,r){var i,a=arguments.length,o=a<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(o=(a<3?i(o):a>3?i(e,n,o):i(e,n))||o);return a>3&&o&&Object.defineProperty(e,n,o),o}function y(t,e){return function(n,r){e(n,r,t)}}function b(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function S(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function C(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,a=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)o.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(i)throw i.error}}return o}function I(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(C(arguments[e]));return t}var M=a,T=function(){function t(t,e,n){this.http=t,this.serverUrl=e,this.authServerProvider=n,this.resourceUrl="",this.resourceSearchUrl="",this.resourceUrl=e.SERVER_API_URL+"/api/patients",this.resourceSearchUrl=e.SERVER_API_URL+"/api/_search/patients"}var a;return a=t,t.prototype.create=function(t){var e=this,n=this.convertDateFromClient(t);return this.http.post(this.resourceUrl,n,{observe:"response"}).pipe(i.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.update=function(t){var e=this,n=this.convertDateFromClient(t);return this.http.put(this.resourceUrl,n,{observe:"response"}).pipe(i.map((function(t){return e.convertDateFromServer(t)})),i.share())},t.prototype.find=function(t){var e=this;return this.http.get(this.resourceUrl+"/"+t,{observe:"response"}).pipe(i.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.findByUuid=function(t){var e=this;return this.http.get(this.resourceUrl+"/by-uuid/"+t,{observe:"response"}).pipe(i.map((function(t){return e.convertDateFromServer(t)})))},t.prototype.query=function(t){var e=this,n=r.createRequestOption(t);return this.http.get(this.resourceUrl,{params:n,observe:"response"}).pipe(i.map((function(t){return e.convertDateArrayFromServer(t)})))},t.prototype.delete=function(t){return this.http.delete(this.resourceUrl+"/"+t,{observe:"response"})},t.prototype.widgets=function(t){return this.http.get(this.resourceUrl+"/"+t+"/widgets",{observe:"body"})},t.prototype.observations=function(t){return this.http.get(this.resourceUrl+"/"+t+"/observations",{observe:"body"})},t.prototype.activities=function(t,e){return this.http.get(this.resourceUrl+"/"+t+"/activities?full="+e,{observe:"body"}).pipe(i.map((function(t){return t.sort((function(t,e){var n=M(t.date,"DD MMM, YYYY");return M(e.date,"DD MMM, YYYY").diff(n)})),t})))},t.prototype.getActiveFacility=function(){return this.http.get("/api/facilities/active")},t.prototype.getStates=function(){return this.http.get("/api/states")},t.prototype.getLgasByState=function(t){return this.http.get("/api/provinces/state/"+t)},t.prototype.getStateByLga=function(t){return this.http.get("/api/provinces/"+t+"/state")},t.prototype.getFacility=function(t){return this.http.get("/api/facilities/"+t)},t.prototype.existsByHospitalNumber=function(t){return this.http.get(this.resourceUrl+"/exists/hospital-number/"+t).pipe(i.map((function(t){return t?{numberExists:!0}:null})))},t.prototype.getStatusDatesByPatient=function(t){return this.http.get("/api/client-statuses/patient/"+t+"/status-dates").pipe(i.map((function(t){return t.forEach((function(t){return M(t)})),t})))},t.prototype.getSummaryForPatient=function(t){return this.http.get(this.resourceUrl+"/"+t+"/summary")},t.prototype.saveClientStatus=function(t){console.log("Status",t);var e=a.convertStatusFromClient(t);return console.log("Copy",e),this.http.post("/api/client-statuses",e,{observe:"response"})},t.prototype.updateClientStatus=function(t){var e=a.convertStatusFromClient(t);return this.http.put("/api/client-statuses",e,{observe:"response"})},t.prototype.findClientStatus=function(t){return this.http.get("/api/client-statuses/by-uuid/"+t,{observe:"response"}).pipe(i.map((function(t){return t.body.dateTracked=null!=t.body.dateTracked?M(t.body.dateTracked):null,t.body.dateStatus=null!=t.body.dateStatus?M(t.body.dateStatus):null,t.body.agreedDate=null!=t.body.agreedDate?M(t.body.agreedDate):null,t})))},t.prototype.currentClientStatus=function(t){return this.http.get("/api/client-statuses/patient/"+t+"/current",{responseType:"text"})},t.prototype.getStatusName=function(t){return this.http.get("/api/client-statuses/"+t+"/name",{responseType:"text"})},t.convertStatusFromClient=function(t){return Object.assign({},t,{dateStatus:null!=t.dateStatus&&t.dateStatus.isValid()?t.dateStatus.format(r.DATE_FORMAT):null,agreedDate:null!=t.agreedDate&&t.agreedDate.isValid()?t.agreedDate.format(r.DATE_FORMAT):null,dateTracked:null!=t.dateTracked&&t.dateTracked.isValid()?t.dateTracked.format(r.DATE_FORMAT):null})},t.prototype.convertDateFromClient=function(t){return Object.assign({},t,{dob:null!=t.dateBirth&&t.dateBirth.isValid()?t.dateBirth.format(r.DATE_FORMAT):null,dateRegistration:null!=t.dateRegistration&&t.dateRegistration.isValid()?t.dateRegistration.format(r.DATE_FORMAT):null,dateStarted:null!=t.dateStarted&&t.dateStarted.isValid()?t.dateStarted.format(r.DATE_FORMAT):null,dateConfirmedHiv:null!=t.dateConfirmedHiv&&t.dateConfirmedHiv.isValid()?t.dateConfirmedHiv.format(r.DATE_FORMAT):null,dateEnrolledPMTCT:null!=t.dateEnrolledPMTCT&&t.dateEnrolledPMTCT.isValid()?t.dateEnrolledPMTCT.format(r.DATE_FORMAT):null,pregnant:2===t.pregnancyStatus,breastfeeding:3===t.pregnancyStatus})},t.prototype.convertDateFromServer=function(t){return t.body&&(t.body.name=t.body.surname+", "+t.body.otherNames,t.body.dateBirth=null!=t.body.dateBirth?M(t.body.dateBirth):null,t.body.dateRegistration=null!=t.body.dateRegistration?M(t.body.dateRegistration):null,t.body.dateConfirmedHiv=null!=t.body.dateConfirmedHiv?M(t.body.dateConfirmedHiv):null,t.body.dateEnrolledPMTCT=null!=t.body.dateEnrolledPMTCT?M(t.body.dateEnrolledPMTCT):null,t.body.dateStarted=null!=t.body.dateStarted?M(t.body.dateStarted):null,t.body.pregnancyStatus=null!=t.body.pregnant&&t.body.pregnant?2:"FEMALE"===t.body.gender?1:null,t.body.pregnancyStatus=null!=t.body.breastfeeding&&t.body.breastfeeding?3:"FEMALE"===t.body.gender?1:null),t},t.prototype.convertDateArrayFromServer=function(t){return t.body&&t.body.forEach((function(t){t.name=t.surname+", "+t.otherNames,t.dateBirth=null!=t.dateBirth?M(t.dateBirth):null,t.dateRegistration=null!=t.dateRegistration?M(t.dateRegistration):null,t.dateStarted=null!=t.dateStarted?M(t.dateStarted):null})),t},t.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[r.SERVER_API_URL_CONFIG]}]},{type:r.AuthServerProvider}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(n.HttpClient),e.ɵɵinject(r.SERVER_API_URL_CONFIG),e.ɵɵinject(r.AuthServerProvider))},token:t,providedIn:"root"}),t=a=g([e.Injectable({providedIn:"root"}),y(1,e.Inject(r.SERVER_API_URL_CONFIG)),b("design:paramtypes",[n.HttpClient,Object,r.AuthServerProvider])],t)}(),R=function(){function t(t,e,n,r){this.patientService=t,this.notification=e,this.router=n,this.activatedRoute=r,this.page=0,this.loading=!1,this.itemsPerPage=10,this.currentSearch="",this.totalItems=0,this.display="list",this.facility={},this.currentSearch=""}return t.prototype.ngOnDestroy=function(){},t.prototype.ngOnInit=function(){var t=this;this.patientService.getActiveFacility().subscribe((function(e){t.facility=e,t.onPageChange(0)}))},t.prototype.searchPatient=function(t){this.currentSearch=t,this.page=0,this.loadAll()},t.prototype.select=function(t){this.path?this.router.navigateByUrl(this.path+"/"+t.obj.uuid):this.router.navigate(["..","patients",t.obj.uuid,"view"],{relativeTo:this.activatedRoute})},t.prototype.onPageChange=function(t){this.page=t,this.loadAll()},t.prototype.loadPage=function(t){this.loadAll()},t.prototype.loadAll=function(){var t=this;this.loading=!0,this.patientService.query({keyword:this.currentSearch,page:this.page>0?this.page-1:0,facilityId:this.facility.id||0,size:this.itemsPerPage,sort:["id","asc"]}).subscribe((function(e){t.onSuccess(e.body,e.headers)}),(function(e){return t.onError(e)}))},t.prototype.onSuccess=function(t,e){this.patients=t,this.totalItems=e.get("X-Total-Count"),this.loading=!1},t.prototype.onError=function(t){this.notification.openSnackMessage(t.message),this.loading=!1},t.ctorParameters=function(){return[{type:T},{type:s.NotificationService},{type:o.Router},{type:o.ActivatedRoute}]},g([e.Input(),b("design:type",String)],t.prototype,"path",void 0),t=g([e.Component({selector:"lamis-patients",template:'<div class="layout">\r\n    <div class="list-container">\r\n        <div class="row">\r\n            <div class="col-md-8 col-md-offset-4">\r\n                <div class="adf-toolbar--spacer"></div>\r\n                <td-search-box backIcon="arrow_back" class="push-right-sm"\r\n                               placeholder="Search here" [debounce]="500"\r\n                               [(ngModel)]="currentSearch"\r\n                               (searchDebounce)="searchPatient($event)"\r\n                               (search)="searchPatient($event)"\r\n                               (clear)="currentSearch = \'\'" flex>\r\n                </td-search-box>\r\n            </div>\r\n        </div>\r\n        <br/>\r\n        <adf-datatable *ngIf="patients"\r\n                       [rows]="patients"\r\n                       [loading]="loading"\r\n                       [display]="display"\r\n                       (rowClick)="select($event.value)">\r\n            <data-columns>\r\n                <data-column key="name" title="Name" sortable="true"></data-column>\r\n                <data-column key="hospitalNum" title="Hospital Number" sortable="true"></data-column>\r\n                <data-column key="uniqueId" title="Unique ID" sortable="true"></data-column>\r\n                <data-column key="gender" title="Gender" sortable="true">\r\n                    <ng-template let-context="$implicit">\r\n                        {{context.row.getValue(\'gender\') === \'MALE\' ? \'Male\' : \'Female\'}}\r\n                    </ng-template>\r\n                </data-column>\r\n                <data-column key="status" title="Current Status" sortable="true"></data-column>\r\n                <data-column key="phone" title="Telephone Number" sortable="true"></data-column>\r\n                <data-column key="address" title="Address" class="full-width ellipsis-cell"></data-column>\r\n            </data-columns>\r\n            <adf-loading-content-template>\r\n                <ng-template>\r\n                    <mat-progress-spinner\r\n                            class="adf-document-list-loading-margin"\r\n                            [color]="\'primary\'"\r\n                            [mode]="\'indeterminate\'">\r\n                    </mat-progress-spinner>\r\n                </ng-template>\r\n            </adf-loading-content-template>\r\n        </adf-datatable>\r\n    </div>\r\n    <adf-empty-content\r\n            *ngIf="!patients"\r\n            icon="blur_on"\r\n            [title]="\'No Patients found\'"\r\n            [subtitle]="\'No Patients matching search criteria or no Patients available\'">\r\n    </adf-empty-content>\r\n        <ngb-pagination [collectionSize]="totalItems"\r\n                        [(page)]="page"\r\n                        [pageSize]="itemsPerPage"\r\n                        [maxSize]="5"\r\n                        size="sm"\r\n                        [rotate]="true"\r\n                        [boundaryLinks]="true"\r\n                        (pageChange)="loadPage(page)">\r\n        </ngb-pagination>\r\n\r\n</div>\r\n<div class="fab-container">\r\n    <button mat-fab\r\n            [matTooltip]="\'Register New Patient\'"\r\n            [routerLink]="[\'new\']">\r\n        <mat-icon>add</mat-icon>\r\n    </button>\r\n</div>\r\n'}),b("design:paramtypes",[T,s.NotificationService,o.Router,o.ActivatedRoute])],t)}(),D=a,E=function(){function t(t,e,n,r,i,a,o,s){this.router=t,this.route=e,this.patientService=n,this.cfr=r,this._dialogService=i,this.notificationService=a,this._viewContainerRef=o,this.renderer2=s,this.template="patient-details",this.properties=[]}return t.prototype.ngOnInit=function(){var t=this;this.route.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,t.patientService.currentClientStatus(n.uuid).subscribe((function(e){t.status=e})),t.attacheWidgets(),t.getObservations()}))},t.prototype.edit=function(){this.router.navigate(["..","edit"],{relativeTo:this.route})},t.prototype.updateStatus=function(){this.router.navigate(["/","client-statuses","patient",this.entity.uuid,"new"])},t.prototype.delete=function(){var t=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this patient, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(e){e&&t.patientService.delete(t.entity.id).subscribe((function(e){e.ok?t.router.navigate(["patients"]):t.notificationService.showError("Error deleting patient, please try again")}))}))},t.prototype.previousState=function(){window.history.back()},t.prototype.getComponentFactory=function(t){return Array.from(this.cfr._factories.values()).find((function(e){return e.componentType.name===t}))},t.prototype.getObservations=function(){var t=this;this.patientService.observations(this.entity.id).subscribe((function(e){return t.observations=e}))},t.prototype.addObservation=function(t){var e=t.path.split("/"),n=["/"];n.push.apply(n,I(e)),n.push("patient",this.entity.uuid,"new"),this.router.navigate(I(n))},t.prototype.attacheWidgets=function(){this.buildWidget("TimelineComponent","Recent Activities","timeline"),this.buildWidget("SummaryWidgetComponent","Patient Summary","account_balance_wallet")},t.prototype.ngOnDestroy=function(){},t.prototype.buildWidget=function(t,e,n){var r=this.getComponentFactory(t);if(void 0!==r){var i=this.getComponentFactory("WidgetContainerComponent"),a=this.container.createComponent(i);if(!a.instance.embeddedContainer){var o=a.instance.constructor.name;throw new TypeError("Trying to render embedded content. "+o+" must have @ViewChild() embeddedContainer defined")}console.log("Created component",a);var s=a.instance.embeddedContainer.createComponent(r);this.renderer2.addClass(a.location.nativeElement,"col-md-6"),a.instance.icon=n,a.instance.title=e;try{s.instance.patientId=this.entity.id,s.instance.patientUuid=this.entity.uuid}catch(t){}}},t.prototype.age=function(t){var e=D().diff(t,"years");return e>0?e+" year(s)":(e=D().diff(t,"months"))>0?e+" month(s)":D().diff(t,"weeks")+" week(s)"},t.ctorParameters=function(){return[{type:o.Router},{type:o.ActivatedRoute},{type:T},{type:e.ComponentFactoryResolver},{type:m.TdDialogService},{type:s.NotificationService},{type:e.ViewContainerRef},{type:e.Renderer2}]},g([e.ViewChild("container",{read:e.ViewContainerRef,static:!0}),b("design:type",e.ViewContainerRef)],t.prototype,"container",void 0),t=g([e.Component({selector:"lamis-patient",template:'<div>\r\n    <mat-card>\r\n        <mat-card class="dark-blue-100 full-width">\r\n            <mat-card-content>\r\n                <div class="row">\r\n                    <div class="col-md-9">\r\n                        <div class="row">\r\n                            <mat-form-field class="col-md-3">\r\n                                <mat-label>Surname</mat-label>\r\n                                <input matInput [value]="entity.surname" disabled style="font-weight: 900">\r\n                            </mat-form-field>\r\n                            <mat-form-field class="col-md-3">\r\n                                <mat-label>Other Names</mat-label>\r\n                                <input matInput [value]="entity.otherNames" disabled style="font-weight: 900">\r\n                            </mat-form-field>\r\n                            <div class="col-md-1"></div>\r\n                            <div class="col-md-3">\r\n                                <span style="font-size: 12px">\r\n                                    {{entity.gender === \'FEMALE\' ? \'Female\' : \'Male\'}} {{age(entity.dateBirth)}}\r\n                                    ({{entity.dateBirth | date: \'dd MMM, yyyy\'}})\r\n                                </span>\r\n                            </div>\r\n                            <mat-form-field class="col-md-2">\r\n                                <mat-label>Hospital Number</mat-label>\r\n                                <input matInput [value]="entity.hospitalNum" disabled style="font-weight: 900">\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="row">\r\n                            <mat-form-field class="col-md-8">\r\n                                <mat-label>Address</mat-label>\r\n                                <input matInput [value]="entity.address" disabled style="font-weight: 800">\r\n                            </mat-form-field>\r\n                            <mat-form-field class="col-md-4">\r\n                                <mat-label>Telephone Number</mat-label>\r\n                                <input matInput [value]="entity.phone || \' \'" disabled style="font-weight: 700">\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="col-md-3">\r\n                        <mat-form-field class="col-md-12">\r\n                            <mat-label>Current Status</mat-label>\r\n                            <input matInput [value]="status" disabled style="font-weight: 800">\r\n                        </mat-form-field>\r\n                        <a (click)="previousState()" class="dark-blue-200">BACK</a>\r\n                    </div>\r\n                </div>\r\n            </mat-card-content>\r\n        </mat-card>\r\n        <div class="">\r\n            <div class="row">\r\n                <div class="col-md-9">\r\n                    <div class="row">\r\n                        <div #container></div>\r\n                    </div>\r\n                </div>\r\n                <div class="col-md-3">\r\n                    <mat-card class="dark-blue-200">\r\n                        <mat-card-header>\r\n                            General Actions\r\n                        </mat-card-header>\r\n                        <mat-divider></mat-divider>\r\n                        <mat-card-content>\r\n                            <mat-nav-list>\r\n                                <mat-list-item *ngFor="let action of observations">\r\n                                    <mat-icon mat-list-icon>{{action.icon || \'dashboard\'}}</mat-icon>\r\n                                    <a mat-line matTooltip="{{action.tooltip || \'\'}}"\r\n                                       (click)="addObservation(action)">{{action.name}}</a>\r\n                                </mat-list-item>\r\n                                <mat-list-item>\r\n                                    <mat-icon mat-list-icon>edit</mat-icon>\r\n                                    <a mat-line matTooltip="Update Patient Status" (click)="updateStatus()">Update\r\n                                        Client Status</a>\r\n                                </mat-list-item>\r\n                                <mat-list-item>\r\n                                    <mat-icon mat-list-icon>edit</mat-icon>\r\n                                    <a mat-line matTooltip="Edit Patient registration information"\r\n                                       (click)="edit()">Edit Registration\r\n                                        Information</a>\r\n                                </mat-list-item>\r\n                                <mat-list-item>\r\n                                    <mat-icon mat-list-icon>delete</mat-icon>\r\n                                    <a mat-line matTooltip="Delete patient" (click)="delete()">Delete Patient</a>\r\n                                </mat-list-item>\r\n                            </mat-nav-list>\r\n                        </mat-card-content>\r\n                    </mat-card>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </mat-card>\r\n</div>\r\n',styles:[".bold{font-weight:700}"]}),b("design:paramtypes",[o.Router,o.ActivatedRoute,T,e.ComponentFactoryResolver,m.TdDialogService,s.NotificationService,e.ViewContainerRef,e.Renderer2])],t)}(),w=a,P=function(){function t(t,e,n,r,i){this.patientService=t,this.notification=e,this.loaderService=n,this.activatedRoute=r,this.formBuilder=i,this.template="patient-edit",this.error=!1,this.today=w(),this.minDob=w().subtract(75,"years"),this.minDateRegistration=w("2008","YYYY"),this.maxDateBirth=w().subtract(2,"months"),this.maxDateConfirmed=w(),this.minDateConfirmed=w("2008","YYYY")}return t.prototype.createEntity=function(){return{}},t.prototype.ngOnInit=function(){var t=this;this.patientService.getActiveFacility().subscribe((function(e){t.entity.facility=e})),this.isSaving=!1,this.activatedRoute.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,void 0===t.entity&&(t.entity=t.createEntity()),t.entity.id&&t.entity.lga&&(t.minDateRegistration=t.entity.dateBirth.clone().add(2,"month"),t.minDateConfirmed=t.entity.dateBirth.clone().add(1,"month"),t.patientService.getStateByLga(t.entity.lga.id).subscribe((function(e){t.state=e,t.stateChange(t.state.id)})))})),this.patientService.getStates().subscribe((function(e){return t.states=e}))},t.prototype.entityCompare=function(t,e){return r.entityCompare(t,e)},t.prototype.estimateDob=function(){if(this.age&&this.ageUnit&&this.entity.dateRegistration){var t=this.entity.dateRegistration;this.entity.dateBirth=t.clone().subtract(this.age,this.ageUnit),this.minDateConfirmed=this.entity.dateBirth.clone().add(1,"months")}},t.prototype.stateChange=function(t){var e=this;this.patientService.getLgasByState(t).subscribe((function(t){return e.lgas=t}))},t.prototype.previousState=function(){window.history.back()},t.prototype.dateBirthChanged=function(t){this.minDateRegistration=t.clone().add(2,"months"),this.minDateConfirmed=t.clone().add(1,"months"),this.minDateRegistration.isBefore(w("2008","YYYY"),"day")&&(this.minDateRegistration=w("2008","YYYY"),this.minDateConfirmed=w("2008","YYYY"))},t.prototype.dateRegistrationChanged=function(t){this.maxDateBirth=t.clone().subtract(2,"months"),this.maxDateConfirmed=t.clone()},t.prototype.save=function(){this.loaderService.open("Saving patient..."),this.isSaving=!0,this.entity.id?this.subscribeToSaveResponse(this.patientService.update(this.entity)):(this.entity.dobEstimated&&(this.entity.dateBirth=this.entity.dateRegistration.clone().subtract(this.age,this.ageUnit)),this.subscribeToSaveResponse(this.patientService.create(this.entity)))},t.prototype.subscribeToSaveResponse=function(t){var e=this;this.loaderService.close(),t.subscribe((function(t){return e.onSaveSuccess(t.body)}),(function(t){e.onSaveError(),e.onError(t.message)}))},t.prototype.onSaveSuccess=function(t){this.isSaving=!1,this.notification.openSnackMessage("Patient successfully saved"),this.previousState()},t.prototype.onSaveError=function(){this.isSaving=!1,this.error=!0},t.prototype.onError=function(t){this.notification.showError(t)},t.ctorParameters=function(){return[{type:T},{type:s.NotificationService},{type:r.AppLoaderService},{type:o.ActivatedRoute},{type:p.FormBuilder}]},t=g([e.Component({selector:"lamis-patient-edit",template:'<div class="lamis-edit-form">\r\n    <div class="lamis-edit-form-container">\r\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #patientForm="ngForm">\r\n            <mat-card class="default">\r\n                <mat-card-content>\r\n                    <mat-divider></mat-divider>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Hospital Number</mat-label>\r\n                                <input matInput [(ngModel)]="entity.hospitalNum" #hospitalNum="ngModel"\r\n                                       [required]="!entity.id"\r\n                                       uniqueHospitalNum\r\n                                       [disabled]="!!entity.id"\r\n                                       name="hospitalNum"/>\r\n                                <mat-error\r\n                                        *ngIf="hospitalNum.errors && (hospitalNum.dirty || hospitalNum.touched) && (hospitalNum.errors.required)">\r\n                                    Hospital Number is required\r\n                                </mat-error>\r\n                                <mat-error\r\n                                        *ngIf="hospitalNum.errors && (hospitalNum.dirty || hospitalNum.touched) && (hospitalNum.errors.numberExists)">\r\n                                    Hospital Number is used by another patient\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Unique ID</mat-label>\r\n                                <input matInput [(ngModel)]="entity.uniqueId" name="uniqueId"/>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6" *ngIf="!!minDateRegistration">\r\n                            <mat-form-field class="full-width">\r\n                                <input matInput [matDatepicker]="picker"\r\n                                       placeholder="Date of Registration/Transfer-In"\r\n                                       [(ngModel)]="entity.dateRegistration"\r\n                                       #registration="ngModel"\r\n                                       [max]="today"\r\n                                       [min]="minDateRegistration"\r\n                                       (dateChange)="dateRegistrationChanged($event.value)"\r\n                                       name="registration"\r\n                                       required>\r\n                                <mat-datepicker-toggle\r\n                                        matSuffix\r\n                                        [for]="picker">\r\n                                </mat-datepicker-toggle>\r\n                                <mat-datepicker #picker></mat-datepicker>\r\n                                <mat-error\r\n                                        *ngIf="registration.errors && (registration.dirty || registration.touched) && (registration.errors.required)">\r\n                                    Date of Registration is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Surname</mat-label>\r\n                                <input matInput [(ngModel)]="entity.surname" #sn="ngModel"\r\n                                       required\r\n                                       [minLength]="2"\r\n                                       name="sn"/>\r\n                                <mat-error\r\n                                        *ngIf="sn.errors && (sn.dirty || sn.touched) && (sn.errors.required)">\r\n                                    Surname is required\r\n                                </mat-error>\r\n                                <mat-error\r\n                                        *ngIf="sn.errors && (sn.dirty || sn.touched) && (sn.errors.minLength)">\r\n                                    Minimum length for Surname is 2 characters\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Other Names</mat-label>\r\n                                <input matInput [(ngModel)]="entity.otherNames" #on="ngModel"\r\n                                       required\r\n                                       [minLength]="5"\r\n                                       name="on"/>\r\n                                <mat-error\r\n                                        *ngIf="on.errors && (on.dirty || on.touched) && (on.errors.required)">\r\n                                    Other Names required\r\n                                </mat-error>\r\n                                <mat-error\r\n                                        *ngIf="on.errors && (on.dirty || on.touched) && (on.errors.minLength)">\r\n                                    Minimum length for Other Names is 5 characters\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div *ngIf="!entity.id">\r\n                        <fieldset>\r\n                            <div class="row">\r\n                                <div class="col-md-6">\r\n                                    <mat-checkbox [(ngModel)]="entity.dobEstimated" name="est">Age Estimated?\r\n                                    </mat-checkbox>\r\n                                </div>\r\n                                <div class="col-md-6">\r\n                                    <div *ngIf="entity.dobEstimated" class="row">\r\n                                        <div class="col-md-6">\r\n                                            <mat-form-field class="full-width">\r\n                                                <mat-label>Age at Registration</mat-label>\r\n                                                <input matInput [(ngModel)]="age" required\r\n                                                       [min]="2"\r\n                                                       [max]="70"\r\n                                                       (change)="estimateDob()"\r\n                                                       name="age" #age1="ngModel">\r\n                                                <mat-error\r\n                                                        *ngIf="age1.errors && (age1.dirty || age1.touched) && (age1.errors.min)">\r\n                                                    Minimum age is 2\r\n                                                </mat-error>\r\n                                                <mat-error\r\n                                                        *ngIf="age1.errors && (age1.dirty || age1.touched) && (age1.errors.max)">\r\n                                                    Maximum age is 70\r\n                                                </mat-error>\r\n                                                <mat-error\r\n                                                        *ngIf="age1.errors && (age1.dirty || age1.touched) && (age1.errors.required)">\r\n                                                    Estimated age is required\r\n                                                </mat-error>\r\n                                            </mat-form-field>\r\n                                        </div>\r\n                                        <div class="col-md-6">\r\n                                            <mat-form-field class="full-width">\r\n                                                <mat-label>Age Units</mat-label>\r\n                                                <mat-select [(ngModel)]="ageUnit"\r\n                                                            (selectionChange)="estimateDob()"\r\n                                                            required name="units" #units="ngModel">\r\n                                                    <mat-option></mat-option>\r\n                                                    <mat-option [value]="\'years\'">Year(s)</mat-option>\r\n                                                    <mat-option [value]="\'months\'">Month(s)</mat-option>\r\n                                                </mat-select>\r\n                                                <mat-error\r\n                                                        *ngIf="units.errors && (units.dirty || units.touched) && (units.errors.required)">\r\n                                                    Age units is required\r\n                                                </mat-error>\r\n                                            </mat-form-field>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <mat-form-field class="full-width" *ngIf="!entity.dobEstimated">\r\n                                            <input matInput [matDatepicker]="picker1"\r\n                                                   placeholder="Date of Birth"\r\n                                                   [(ngModel)]="entity.dateBirth"\r\n                                                   [min]="minDob"\r\n                                                   (dateChange)="dateBirthChanged($event.value)"\r\n                                                   required\r\n                                                   [max]="maxDateBirth"\r\n                                                   #dob1="ngModel"\r\n                                                   name="dob">\r\n                                            <mat-datepicker-toggle\r\n                                                    matSuffix\r\n                                                    [for]="picker1">\r\n                                            </mat-datepicker-toggle>\r\n                                            <mat-datepicker #picker1></mat-datepicker>\r\n                                            <mat-error\r\n                                                    *ngIf="dob1.errors && (dob1.dirty || dob1.touched) && (dob1.errors.required)">\r\n                                                Date of Birth is required\r\n                                            </mat-error>\r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </fieldset>\r\n                    </div>\r\n                    <div *ngIf="entity.id">\r\n                        <div class="row">\r\n                            <div class="col-md-6">\r\n                                <mat-form-field class="full-width" *ngIf="minDob">\r\n                                    <input matInput [matDatepicker]="picker2"\r\n                                           placeholder="Date of Birth"\r\n                                           [(ngModel)]="entity.dateBirth"\r\n                                           #birth="ngModel"\r\n                                           (dateChange)="dateBirthChanged($event.value)"\r\n                                           [max]="maxDateBirth"\r\n                                           [min]="minDob"\r\n                                           name="dob"\r\n                                           required>\r\n                                    <mat-datepicker-toggle\r\n                                            matSuffix\r\n                                            [for]="picker2">\r\n                                    </mat-datepicker-toggle>\r\n                                    <mat-datepicker #picker2></mat-datepicker>\r\n                                    <mat-error\r\n                                            *ngIf="birth.errors && (birth.dirty || birth.touched) && (birth.errors.required)">\r\n                                        Date of Birth is required\r\n                                    </mat-error>\r\n                                    <mat-error\r\n                                            *ngIf="birth.errors && (birth.dirty || birth.touched) && (birth.errors.max)">\r\n                                        Date of Birth cannot be after Date of Registration\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Gender</mat-label>\r\n                                <mat-select [(ngModel)]="entity.gender"\r\n                                            required name="gender" #gender="ngModel">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option [value]="\'FEMALE\'">Female</mat-option>\r\n                                    <mat-option [value]="\'MALE\'">Male</mat-option>\r\n                                </mat-select>\r\n                                <mat-error\r\n                                        *ngIf="gender.errors && (gender.dirty || gender.touched) && (gender.errors.required)">\r\n                                    Gender is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Marital Status</mat-label>\r\n                                <mat-select [(ngModel)]="entity.maritalStatus"\r\n                                            required name="status" #status="ngModel">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option [value]="\'Single\'">Single</mat-option>\r\n                                    <mat-option [value]="\'Married\'">Married</mat-option>\r\n                                    <mat-option [value]="\'Widowed\'">Widowed</mat-option>\r\n                                    <mat-option [value]="\'Separated\'">Separated</mat-option>\r\n                                    <mat-option [value]="\'Divorced\'">Divorced</mat-option>\r\n                                </mat-select>\r\n                                <mat-error\r\n                                        *ngIf="status.errors && (status.dirty || status.touched) && (status.errors.required)">\r\n                                    Marital Status is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Job /Occupation Status</mat-label>\r\n                                <mat-select name="occupation" [(ngModel)]="entity.occupation">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option [value]="\'Unemployed\'">Unemployed</mat-option>\r\n                                    <mat-option [value]="\'Employed\'">Employed</mat-option>\r\n                                    <mat-option [value]="\'Student\'">Student</mat-option>\r\n                                    <mat-option [value]="\'Retired\'">Retired</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Educational Level</mat-label>\r\n                                <mat-select name="education" [(ngModel)]="entity.education">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option [value]="\'None\'">None</mat-option>\r\n                                    <mat-option [value]="\'Primary\'">Primary</mat-option>\r\n                                    <mat-option [value]="\'Senior Secondary\'">Senior Secondary</mat-option>\r\n                                    <mat-option [value]="\'Quranic\'">Quranic</mat-option>\r\n                                    <mat-option [value]="\'Junior Secondary\'">Junior Secondary</mat-option>\r\n                                    <mat-option [value]="\'Post Secondary\'">Post Secondary</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>State of Residence</mat-label>\r\n                                <mat-select name="state" [(ngModel)]="state"\r\n                                            [compareWith]="entityCompare"\r\n                                            (selectionChange)="stateChange($event.value.id)">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option *ngFor="let state of states" [value]="state">{{state.name}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>LGA of Residence</mat-label>\r\n                                <mat-select name="lga" [(ngModel)]="entity.lga" required #lga="ngModel"\r\n                                            [compareWith]="entityCompare">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option *ngFor="let lga of lgas" [value]="lga">{{lga.name}}</mat-option>\r\n                                </mat-select>\r\n                                <mat-error\r\n                                        *ngIf="lga.errors && (lga.dirty || lga.touched) && (lga.errors.required)">\r\n                                    LGA of Residence is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label class="form-label">Address</mat-label>\r\n                                <textarea name="address" matInput [(ngModel)]="entity.address"\r\n                                          rows="3"\r\n                                          required #address="ngModel"></textarea>\r\n                                <mat-error\r\n                                        *ngIf="address.errors && (address.dirty || address.touched) && (address.errors.required)">\r\n                                    Address is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Telephone Number</mat-label>\r\n                                <input matInput name="phone" phoneNumber [(ngModel)]="entity.phone" #phone="ngModel"/>\r\n                                <mat-error\r\n                                        *ngIf="phone.errors && (phone.dirty || phone.touched) && (phone.errors.invalidPhone)">\r\n                                    Invalid phone number\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Care Entry Point</mat-label>\r\n                                <mat-select name="entryPoint" [(ngModel)]="entity.entryPoint"\r\n                                            #entryPoint="ngModel">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option [value]="\'OPD\'">OPD</mat-option>\r\n                                    <mat-option [value]="\'In-patient\'">In-patient</mat-option>\r\n                                    <mat-option [value]="\'HCT\'">HCT</mat-option>\r\n                                    <mat-option [value]="\'TB DOTS\'">TB DOTS</mat-option>\r\n                                    <mat-option [value]="\'STI Clinic\'">STI Clinic</mat-option>\r\n                                    <mat-option [value]="\'PMTCT\'">PMTCT</mat-option>\r\n                                    <mat-option [value]="\'Transfer-in\'">Transfer-in</mat-option>\r\n                                    <mat-option [value]="\'Outreach\'">Outreach</mat-option>\r\n                                    <mat-option [value]="\'CBO\'">CBO</mat-option>\r\n                                    <mat-option [value]="\'Others\'">Others</mat-option>\r\n                                </mat-select>\r\n                                <mat-error\r\n                                        *ngIf="entryPoint.errors && (entryPoint.dirty || entryPoint.touched) && (entryPoint.errors.required)">\r\n                                    Care Entry Point is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width" *ngIf="minDateConfirmed">\r\n                                <mat-label>Date of Confirmed HIV Test</mat-label>\r\n                                <input matInput [matDatepicker]="picker2"\r\n                                       [(ngModel)]="entity.dateConfirmedHiv"\r\n                                       #time="ngModel"\r\n                                       [max]="maxDateConfirmed"\r\n                                       [min]="minDateConfirmed"\r\n                                       required\r\n                                       name="time">\r\n                                <mat-datepicker-toggle\r\n                                        matSuffix\r\n                                        [for]="picker2">\r\n                                </mat-datepicker-toggle>\r\n                                <mat-datepicker #picker2></mat-datepicker>\r\n                                <mat-error\r\n                                        *ngIf="time.errors && (time.dirty || time.touched) && (time.errors.required)">\r\n                                    Date of Confirmed HIV Test is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row" *ngIf="entity.gender === \'FEMALE\'">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Time of HIV Diagnosis</mat-label>\r\n                                <mat-select name="timeHivDiagnosis" [(ngModel)]="entity.timeHivDiagnosis">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option [value]="\'Previous - Non pregnant\'">Previous - Non pregnant</mat-option>\r\n                                    <mat-option [value]="\'Previous pregnancy (ANC)\'">Previous pregnancy (ANC)\r\n                                    </mat-option>\r\n                                    <mat-option [value]="\'Previous pregnancy (L&amp;D)\'">Previous pregnancy (L&amp;D)\r\n                                    </mat-option>\r\n                                    <mat-option [value]="\'Previous pregnancy (PP &lt;72hrs)\'">Previous pregnancy (PP\r\n                                        &lt;72hrs)\r\n                                    </mat-option>\r\n                                    <mat-option [value]="\'ANC\'">ANC</mat-option>\r\n                                    <mat-option [value]="\'Labour\'">Labour</mat-option>\r\n                                    <mat-option [value]="\'Post Partum &lt;=72hrs\'">Post Partum &lt;=72hrs</mat-option>\r\n                                    <mat-option [value]="\'Post Partum &gt;72hrs\'">Post Partum &gt;72hrs</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Date enrolled into PMTCT</mat-label>\r\n                                <input matInput [matDatepicker]="picker3"\r\n                                       [(ngModel)]="entity.dateEnrolledPMTCT"\r\n                                       #pmtct="ngModel"\r\n                                       [max]="entity.dateRegistration"\r\n                                       [min]="entity.dateBirth"\r\n                                       name="pmtct">\r\n                                <mat-datepicker-toggle\r\n                                        matSuffix\r\n                                        [for]="picker3">\r\n                                </mat-datepicker-toggle>\r\n                                <mat-datepicker #picker3></mat-datepicker>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row" *ngIf="entity.gender === \'FEMALE\'">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Pregnancy Status</mat-label>\r\n                                <mat-select name="pregnancyStatus" [(ngModel)]="entity.pregnancyStatus">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option value="1">Not Pregnant</mat-option>\r\n                                    <mat-option value="2">Pregnant</mat-option>\r\n                                    <mat-option value="3">Breastfeeding</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Source of Referral</mat-label>\r\n                                <mat-select name="sourceReferral" [(ngModel)]="entity.sourceReferral">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option [value]="\'PMTCT outreach\'">PMTCT outreach</mat-option>\r\n                                    <mat-option [value]="\'Sex worker outreach\'">Sex worker outreach</mat-option>\r\n                                    <mat-option [value]="\'Medical outpatient\'">Medical outpatient</mat-option>\r\n                                    <mat-option [value]="\'Youth/Adolescent outreach\'">Youth/Adolescent outreach\r\n                                    </mat-option>\r\n                                    <mat-option [value]="\'Private/Commercial Health facility\'">Private/Commercial Health\r\n                                        facility\r\n                                    </mat-option>\r\n                                    <mat-option [value]="\'Under-fives/Immunization clinic\'">Under-fives/Immunization\r\n                                        clinic\r\n                                    </mat-option>\r\n                                    <mat-option [value]="\'External HCT centre\'">External HCT centre</mat-option>\r\n                                    <mat-option [value]="\'CBO\'">CBO</mat-option>\r\n                                    <mat-option [value]="\'In-patients\'">In-patients</mat-option>\r\n                                    <mat-option [value]="\'Self-referral\'">Self-referral</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>Enrollment Setting</mat-label>\r\n                                <mat-select name="enrollmentSetting" [(ngModel)]="entity.enrollmentSetting"\r\n                                            required #setting="ngModel">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option [value]="\'Facility\'">Facility</mat-option>\r\n                                    <mat-option [value]="\'Community\'">Community</mat-option>\r\n                                </mat-select>\r\n                                <mat-error\r\n                                        *ngIf="setting.errors && (setting.dirty || setting.touched) && (setting.errors.required)">\r\n                                    Enrollment Setting is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>HIV Status at Registration</mat-label>\r\n                                <mat-select name="statusRegistration" [(ngModel)]="entity.statusAtRegistration"\r\n                                            required #status="ngModel">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option [value]="\'HIV_EXPOSED_STATUS_UNKNOWN\'">HIV Exposed Status Unknown\r\n                                    </mat-option>\r\n                                    <mat-option [value]="\'HIV_PLUS_NON_ART\'">HIV+ non ART</mat-option>\r\n                                    <mat-option [value]="\'ART_TRANSFER_IN\'">ART Transfer In</mat-option>\r\n                                    <mat-option [value]="\'PRE_ART_TRANSFER_IN\'">Pre-ART Transfer In</mat-option>\r\n                                </mat-select>\r\n                                <mat-error\r\n                                        *ngIf="status.errors && (status.dirty || status.touched) && (status.errors.required)">\r\n                                    HIV Status at Registration is required\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div class="col-md-6">\r\n                            <mat-form-field class="full-width">\r\n                                <mat-label>TB Status</mat-label>\r\n                                <mat-select name="tbStatus" [(ngModel)]="entity.tbStatus">\r\n                                    <mat-option></mat-option>\r\n                                    <mat-option [value]="\'No sign or symptoms of TB\'">No sign or symptoms of TB\r\n                                    </mat-option>\r\n                                    <mat-option [value]="\'TB suspected and referred for evaluation\'">TB suspected and\r\n                                        referred for evaluation\r\n                                    </mat-option>\r\n                                    <mat-option [value]="\'Currently on INH prophylaxis\'">Currently on INH prophylaxis\r\n                                    </mat-option>\r\n                                    <mat-option [value]="\'Currently on TB treatment\'">Currently on TB treatment\r\n                                    </mat-option>\r\n                                    <mat-option [value]="\'TB positive not on TB drugs\'">TB positive not on TB drugs\r\n                                    </mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <fieldset>\r\n                        <legend>Next of kin/Treatment Supporter</legend>\r\n                        <div class="row">\r\n                            <div class="col-md-6">\r\n                                <mat-form-field class="full-width">\r\n                                    <mat-label>Name</mat-label>\r\n                                    <input matInput name="nextKin" [(ngModel)]="entity.nextOfKin"/>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div class="col-md-6">\r\n                                <mat-form-field class="full-width">\r\n                                    <mat-label>Relationship</mat-label>\r\n                                    <mat-select name="relationKin" [(ngModel)]="entity.nextOfKinRelationship">\r\n                                        <mat-option></mat-option>\r\n                                        <mat-option [value]="\'Aunt\'">Aunt</mat-option>\r\n                                        <mat-option [value]="\'Brother\'">Brother</mat-option>\r\n                                        <mat-option [value]="\'Cousin\'">Cousin</mat-option>\r\n                                        <mat-option [value]="\'Daughter\'">Daughter</mat-option>\r\n                                        <mat-option [value]="\'Father\'">Father</mat-option>\r\n                                        <mat-option [value]="\'Friend\'">Friend</mat-option>\r\n                                        <mat-option [value]="\'Grand parent\'">Grand parent</mat-option>\r\n                                        <mat-option [value]="\'Mother\'">Mother</mat-option>\r\n                                        <mat-option [value]="\'Sister\'">Sister</mat-option>\r\n                                        <mat-option [value]="\'Son\'">Son</mat-option>\r\n                                        <mat-option [value]="\'Spouse\'">Spouse</mat-option>\r\n                                        <mat-option [value]="\'Treatment Supporter\'">Treatment Supporter</mat-option>\r\n                                        <mat-option [value]="\'Uncle\'">Uncle</mat-option>\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div class="row">\r\n                            <div class="col-md-6">\r\n                                <mat-form-field class="full-width">\r\n                                    <mat-label>Address</mat-label>\r\n                                    <input matInput name="addressKin" [(ngModel)]="entity.nextOfKinAddress"/>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div class="col-md-6">\r\n                                <mat-form-field class="full-width">\r\n                                    <mat-label>Telephone Number</mat-label>\r\n                                    <input matInput name="phoneKin" phoneNumber [(ngModel)]="entity.nextOfKinPhone" #phone1="ngModel"/>\r\n                                    <mat-error\r\n                                            *ngIf="phone1.errors && (phone1.dirty || phone1.touched) && (phone1.errors.invalidPhone)">\r\n                                        Invalid phone number\r\n                                    </mat-error>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </fieldset>\r\n                </mat-card-content>\r\n                <mat-card-actions class="lamis-edit-form-actions">\r\n                    <button mat-button type="button" (click)="previousState()">Back</button>\r\n                    <button mat-raised-button color="primary" (click)="save()"\r\n                            [disabled]="patientForm.invalid || isSaving">{{entity.id ? \'Update\' : \'Save\'}}\r\n                    </button>\r\n                </mat-card-actions>\r\n            </mat-card>\r\n        </form>\r\n    </div>\r\n</div>\r\n'}),b("design:paramtypes",[T,s.NotificationService,r.AppLoaderService,o.ActivatedRoute,p.FormBuilder])],t)}(),k=function(){function t(t,e){this.patientService=t,this.route=e}return t.prototype.ngOnInit=function(){var t=this;this.route.data.subscribe((function(e){var n=e.entity,r=n&&n.body?n.body:n;t.id=r.id,t.uuid=r.uuid}))},t.prototype.previousState=function(){window.history.back()},t.ctorParameters=function(){return[{type:T},{type:o.ActivatedRoute}]},t=g([e.Component({selector:"detailed-timeline",template:'<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <mat-card>\n            <mat-card-header>\n                <mat-card-title>Patient Activity History </mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n                <patient-timeline [patientId]="id" [patientUuid]="uuid" [detailed]="true"></patient-timeline>\n            </mat-card-content>\n            <mat-card-actions class="lamis-edit-form-actions">\n                <button mat-button type="button" (click)="previousState()">Back</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n'}),b("design:paramtypes",[T,o.ActivatedRoute])],t)}(),A=function(){function t(t){this.service=t}return t.prototype.resolve=function(t,e){var n=t.params.id?t.params.id:null;return n?this.service.findByUuid(n).pipe(i.filter((function(t){return t.ok})),i.map((function(t){return t.body}))):f.of({})},t.ctorParameters=function(){return[{type:T}]},t=g([e.Injectable(),b("design:paramtypes",[T])],t)}(),N=[{path:"",data:{title:"Patients",breadcrumb:"PATIENTS"},children:[{path:"",component:R,resolve:{pagingParams:r.PagingParamsResolve},data:{}},{path:":id/view",component:E,resolve:{entity:A},data:{authorities:["ROLE_USER"],title:"Patient Details",breadcrumb:"PATIENT DETAILS"}},{path:"new",component:P,data:{authorities:["ROLE_DEC"],title:"Add Patient",breadcrumb:"ADD PATIENT"}},{path:":id/edit",component:P,resolve:{entity:A},data:{authorities:["ROLE_DEC"],title:"Patient Edit",breadcrumb:"PATIENT EDIT"}},{path:":id/timeline",component:k,resolve:{entity:A},data:{authorities:["ROLE_DEC"],title:"Patient Timeline",breadcrumb:"PATIENT TIMELINE"}}]}],_=function(){function t(){}return g([e.Input(),b("design:type",String)],t.prototype,"title",void 0),g([e.Input(),b("design:type",String)],t.prototype,"icon",void 0),g([e.ViewChild("container",{read:e.ViewContainerRef,static:!0}),b("design:type",e.ViewContainerRef)],t.prototype,"embeddedContainer",void 0),t=g([e.Component({selector:"widget-container",template:"<mat-card class=\"dark-blue-100\">\n    <mat-card-header>\n        <mat-icon mat-card-avatar>{{icon || 'dashboard'}}</mat-icon>\n        <mat-card-title>{{title}}</mat-card-title>\n    </mat-card-header>\n    <mat-divider></mat-divider>\n    <mat-card-content>\n        <ng-container #container></ng-container>\n    </mat-card-content>\n</mat-card>\n",styles:["mat-icon.mat-card-avatar{width:30px;height:30px;font-size:30px}mat-card-title{padding-top:5px!important}"]})],t)}(),O=function(){function t(t,e){this.http=t,this.serverUrl=e,this.resourceUrl="",this.resourceUrl=e.SERVER_API_URL+"/api"}return t.prototype.deleteObservation=function(t,e){return this.http.delete(this.resourceUrl+"/"+t+"/"+e,{observe:"response"})},t.prototype.getObservation=function(t,e){return this.http.get(this.resourceUrl+"/"+t+"/by-uuid/"+e,{observe:"response"})},t.ctorParameters=function(){return[{type:n.HttpClient},{type:void 0,decorators:[{type:e.Inject,args:[r.SERVER_API_URL_CONFIG]}]}]},t.ngInjectableDef=e.ɵɵdefineInjectable({factory:function(){return new t(e.ɵɵinject(n.HttpClient),e.ɵɵinject(r.SERVER_API_URL_CONFIG))},token:t,providedIn:"root"}),t=g([e.Injectable({providedIn:"root"}),y(1,e.Inject(r.SERVER_API_URL_CONFIG)),b("design:paramtypes",[n.HttpClient,Object])],t)}(),F=function(){function t(t,e,n,r,i){this.patientService=t,this.router=e,this.observationService=n,this._dialogService=r,this.notificationService=i,this.detailed=!1}return t.prototype.ngOnInit=function(){this.loadActivities()},t.prototype.view=function(t,e){this.router.navigate(["/",t,e,"patient",this.patientUuid,"view"])},t.prototype.edit=function(t,e){this.router.navigate(["/",t,e,"patient",this.patientUuid,"edit"])},t.prototype.delete=function(t,e){var n=this;this._dialogService.openConfirm({title:"Confirm",message:"Do you want to delete this event, action cannot be reversed?",cancelButton:"No",acceptButton:"Yes",width:"500px"}).afterClosed().subscribe((function(r){r&&n.observationService.getObservation(t,e).subscribe((function(e){e.body&&n.observationService.deleteObservation(t,e.body.id).subscribe((function(t){t.ok?n.patientService.activities(n.patientId,n.detailed).subscribe((function(t){return n.timeLine=t})):n.notificationService.showError("Error deleting event, please try again")}))}))}))},t.prototype.loadActivities=function(){var t=this;this.patientService.activities(this.patientId,this.detailed).subscribe((function(e){return t.timeLine=e}))},t.ctorParameters=function(){return[{type:T},{type:o.Router},{type:O},{type:m.TdDialogService},{type:s.NotificationService}]},g([e.Input(),b("design:type",Number)],t.prototype,"patientId",void 0),g([e.Input(),b("design:type",String)],t.prototype,"patientUuid",void 0),g([e.Input(),b("design:type",Boolean)],t.prototype,"detailed",void 0),t=g([e.Component({selector:"patient-timeline",template:'<a class="mb-1 pb-1" [routerLink]="[\'/\', \'patients\', patientUuid, \'timeline\']" *ngIf="!detailed">Detailed History</a>\n<mat-divider></mat-divider>\n<timeline>\n    <timeline-event *ngFor="let period of timeLine" side="right">\n        <timeline-badge>\n            <mat-icon>insert_invitation</mat-icon>\n        </timeline-badge>\n        <timeline-panel>\n            <timeline-header>\n                <h4>{{period.date}}</h4>\n            </timeline-header>\n            <mat-list>\n                <mat-list-item>\n                    <div matLine>\n                        <ng-container *ngFor="let event of period.activities">\n                            <div matLine>\n                                <button mat-icon-button aria-label="Delete event"\n                                        *ngIf="event.deletable"\n                                        (click)="delete(event.path, event.uuid)">\n                                    <mat-icon>delete</mat-icon>\n                                </button>\n                                <button mat-icon-button aria-label="View event"\n                                        *ngIf="event.viewable"\n                                        (click)="view(event.path, event.uuid)">\n                                    <mat-icon>remove_red_eye</mat-icon>\n                                </button>\n                                <button mat-icon-button aria-label="Edit event"\n                                        *ngIf="event.editable"\n                                        (click)="edit(event.path, event.uuid)">\n                                    <mat-icon>edit</mat-icon>\n                                </button>\n                            </div>\n                            <a mat-line matTooltip="{{event.name}}">{{event.name}}</a>\n                            <mat-divider></mat-divider>\n                        </ng-container>\n                    </div>\n                </mat-list-item>\n            </mat-list>\n        </timeline-panel>\n    </timeline-event>\n</timeline>\n'}),b("design:paramtypes",[T,o.Router,O,m.TdDialogService,s.NotificationService])],t)}(),q=function(){function t(){}return t.prototype.ngOnInit=function(){},t=g([e.Component({selector:"timeline",template:'<ul class="timeline">\n    <ng-content></ng-content>\n</ul>\n'})],t)}(),x=function(){function t(t){this.parent=t,this._side="left"}return Object.defineProperty(t.prototype,"side",{set:function(t){this._side=t,this.updateRowClasses(this._side)},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){this.updateRowClasses(this._side)},t.prototype.checkClass=function(t,e){return"left"===t||!t&&!0===e?"":"alternate"!==t&&t||!1!==e?"right"===t?"timeline-inverted":"":"timeline-inverted"},t.prototype.updateRowClasses=function(t){this.oddClass=this.checkClass(t,!0),this.evenClass=this.checkClass(t,!1)},t.ctorParameters=function(){return[{type:q}]},g([e.Input(),b("design:type",String),b("design:paramtypes",[String])],t.prototype,"side",null),t=g([e.Component({selector:"timeline-event",template:'<li class="timeline-event" ng-class-odd="oddClass" ng-class-even="evenClass">\n    <ng-content></ng-content>\n</li>\n'}),b("design:paramtypes",[q])],t)}(),B=function(){function t(t){this.event=t}return t.ctorParameters=function(){return[{type:x}]},t=g([e.Component({selector:"timeline-badge",template:"\n        <div class='timeline-badge'>\n            <ng-content></ng-content>\n        </div>\n    "}),b("design:paramtypes",[x])],t)}(),U=function(){function t(){}return t=g([e.Component({selector:"timeline-footer",template:"\n        <div class='timeline-footer'>\n            <ng-content></ng-content>\n        </div>\n    "})],t)}(),L=function(){function t(){}return t=g([e.Component({selector:"timeline-header",template:"\n        <div class='timeline-header'>\n            <ng-content></ng-content>\n        </div>\n    "})],t)}(),H=function(){function t(t){this.event=t}return t.ctorParameters=function(){return[{type:x}]},t=g([e.Component({selector:"timeline-panel",template:"\n        <div class='timeline-panel'>\n            <ng-content></ng-content>\n        </div>"}),b("design:paramtypes",[x])],t)}(),V=[B,x,U,L,H,q],j=function(){function t(){}return t=g([e.NgModule({declarations:I(V),exports:I(V)})],t)}(),Y=function(){function t(t){this.patientService=t}var n;return n=t,t.prototype.validate=function(t){var e=this;return t.valueChanges.pipe(i.debounceTime(300),i.take(1),i.switchMap((function(t){return e.patientService.existsByHospitalNumber(t)})))},t.ctorParameters=function(){return[{type:T}]},t=n=g([e.Directive({selector:"[uniqueHospitalNum]",providers:[{provide:p.NG_ASYNC_VALIDATORS,useExisting:n,multi:!0}]}),b("design:paramtypes",[T])],t)}(),G=a,W=function(){function t(t){this.patientService=t}return t.prototype.ngOnInit=function(){var t=this;this.patientService.getSummaryForPatient(this.patientId).subscribe((function(e){return t.summaries=e}))},t.prototype.propertiesForSummary=function(t){var e,n,i=[];try{for(var a=S(t.fields),o=a.next();!o.done;o=a.next()){var d=o.value,l=d.type.toLowerCase(),m=void 0;switch(l){case r.FieldType.boolean:m=new s.CardViewBoolItemModel({value:d.value,key:"",label:d.label});break;case r.FieldType.int:m=new s.CardViewIntItemModel({value:d.value,key:"",label:d.label});break;case r.FieldType.float:m=new s.CardViewFloatItemModel({value:d.value,key:"",label:d.label});break;case r.FieldType.date:m=new s.CardViewDateItemModel({value:d.value?G(d.value):null,key:"",label:d.label,format:"dd MMM, yyyy"});break;case r.FieldType.datetime:m=new s.CardViewDatetimeItemModel({value:d.value?G(d.value):null,key:"",label:d.label,format:"dd MMM, yyyy HH:mm"});break;default:m=new s.CardViewTextItemModel({value:d.value,key:"",label:d.label})}i.push(m)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=a.return)&&n.call(a)}finally{if(e)throw e.error}}return i},t.ctorParameters=function(){return[{type:T}]},g([e.Input(),b("design:type",Number)],t.prototype,"patientId",void 0),g([e.Input(),b("design:type",String)],t.prototype,"patientUuid",void 0),g([e.Input(),b("design:type",Array)],t.prototype,"summaries",void 0),t=g([e.Component({selector:"patient-summary-widget",template:'<ng-container *ngIf="summaries">\n    <mat-card *ngFor="let summary of summaries" class="default mb-1 pb-0">\n        <ng-container *ngIf="!!summary.header">\n            <mat-card-title>{{summary.header}}</mat-card-title>\n            <mat-divider></mat-divider>\n        </ng-container>\n        <mat-card-content>\n            <adf-card-view [properties]="propertiesForSummary(summary)"></adf-card-view>\n        </mat-card-content>\n    </mat-card>\n</ng-container>\n'}),b("design:paramtypes",[T])],t)}(),K=function(){function t(){}return t=g([e.NgModule({declarations:[R,E,P,_,F,k,W,Y],imports:[d.CommonModule,c.NgJhipsterModule,r.LamisSharedModule,r.JsonFormModule,v.MatFormioModule,l.MatInputModule,l.MatIconModule,l.MatDividerModule,l.MatCardModule,l.MatSelectModule,l.MatButtonModule,l.MatCheckboxModule,l.MatTabsModule,o.RouterModule.forChild(N),l.MatProgressBarModule,m.CovalentMessageModule,l.MatListModule,l.MatChipsModule,s.CoreModule,m.CovalentDialogsModule,m.CovalentSearchModule,u.NgbPaginationModule,j,p.FormsModule,p.ReactiveFormsModule,r.MatDateFormatModule,h.CustomFormsModule],exports:[R,E,P],entryComponents:[_,F,W],providers:[A]})],t)}(),z=a,$=function(){function t(t,e,n,r,i){this.patientService=t,this.activatedRoute=e,this.router=n,this.notification=r,this.appLoaderService=i,this.statusDates=[],this.today=z(),this.statuses=["TRACED_UNABLE_TO_LOCATE","TRACED_AGREED_TO_RETURN_TO_CARE","DID_NOT_ATTEMPT_TO_TRACE"]}return t.prototype.createEntity=function(){return{}},t.prototype.ngOnInit=function(){var t=this;this.isSaving=!1,this.activatedRoute.data.subscribe((function(e){var n=e.entity;t.entity=n&&n.body?n.body:n,void 0===t.entity&&(t.entity=t.createEntity());var r=t.activatedRoute.snapshot.paramMap.get("patientId");t.patientService.findByUuid(r).subscribe((function(e){t.entity.patient=e.body,t.patient=e.body,t.entity.facility=e.body.facility,t.patientService.getStatusDatesByPatient(e.body.id).subscribe((function(e){t.statusDates=e}))})),t.entity.id&&t.patientService.getStatusName(t.entity.id).subscribe((function(e){return t.status=e}))}))},t.prototype.filterDates=function(t){var e=!1;return this.statusDates.forEach((function(n){0===t.diff(n,"days")&&(e=!0)})),this.entity.id&&0===t.diff(this.entity.dateStatus,"days")||!e},t.prototype.previousState=function(){window.history.back()},t.prototype.save=function(){this.appLoaderService.open("Saving Client status update..."),this.isSaving=!0,this.statuses.includes(this.entity.status)&&(this.entity.outcome=this.entity.status,this.entity.status=null,console.log("Clearing status")),void 0!==this.entity.id?this.subscribeToSaveResponse(this.patientService.updateClientStatus(this.entity)):this.subscribeToSaveResponse(this.patientService.saveClientStatus(this.entity))},t.prototype.subscribeToSaveResponse=function(t){var e=this;t.subscribe((function(t){return e.onSaveSuccess(t.body)}),(function(t){e.appLoaderService.close(),e.onSaveError(),e.onError(t.message)}))},t.prototype.onSaveSuccess=function(t){this.appLoaderService.close(),this.isSaving=!1,this.notification.openSnackMessage("Client status update successfully saved"),this.previousState()},t.prototype.onSaveError=function(){this.isSaving=!1,this.notification.openSnackMessage("Error saving status update")},t.prototype.onError=function(t){this.isSaving=!1,this.notification.showError(t)},t.ctorParameters=function(){return[{type:T},{type:o.ActivatedRoute},{type:o.Router},{type:s.NotificationService},{type:r.AppLoaderService}]},t=g([e.Component({selector:"client-status",template:'<script src="patient-details.component.ts"><\/script>\n<div class="lamis-edit-form">\n    <div class="lamis-edit-form-container">\n        <form name="form" role="form" novalidate (ngSubmit)="save()" #statusForm="ngForm">\n            <mat-card class="default">\n                <mat-card-content *ngIf="patient">\n                    <div>\n                        <mat-form-field class="full-width" *ngIf="entity">\n                            <input matInput [matDatepicker]="picker"\n                                   placeholder="{{entity.id ? \'Date of Status\' : \'Date of New Status\'}}"\n                                   [(ngModel)]="entity.dateStatus"\n                                   [matDatepickerFilter]="filterDates.bind(this)"\n                                   #visit="ngModel"\n                                   [max]="today"\n                                   [min]="patient.dateRegistration"\n                                   name="visit"\n                                   required>\n                            <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]="picker">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.required)">\n                                Date of new status is required\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.min)">\n                                Date of new status cannot be before {{entity.patient.dateRegistration}}\n                            </mat-error>\n                            <mat-error\n                                    *ngIf="visit.errors && (visit.dirty || visit.touched) && (visit.errors.max)">\n                                Date of new status cannot be in the future\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div>\n                        <mat-form-field class="full-width">\n                            <mat-select [(ngModel)]="entity.status"\n                                        placeholder="{{entity.id ? \'Status\' : \'New Status\'}}"\n                                        #outcome="ngModel" required name="outcome">\n                                <mat-option></mat-option>\n                                <mat-option [value]="\'ART_TRANSFER_OUT\'">ART Transfer Out</mat-option>\n                                <mat-option [value]="\'PRE_ART_TRANSFER_OUT\'">Pre-ART Transfer Out</mat-option>\n                                <mat-option [value]="\'STOPPED_TREATMENT\'">Stopped Treatment</mat-option>\n                                <mat-option [value]="\'KNOWN_DEATH\'">Died (Confirmed)</mat-option>\n                                <mat-option [value]="\'PREVIOUSLY_UNDOCUMENTED_TRANSFER_CONFIRMED\'">Previously\n                                    Undocumented Patient Transfer (Confirmed)\n                                </mat-option>\n                                <mat-option [value]="\'TRACED_UNABLE_TO_LOCATE\'">Traced Patient (Unable to locate)\n                                </mat-option>\n                                <mat-option [value]="\'TRACED_AGREED_TO_RETURN_TO_CARE\'">Traced Patient and agreed to\n                                    return to care\n                                </mat-option>\n                                <mat-option [value]="\'DID_NOT_ATTEMPT_TO_TRACE\'">Did Not Attempt to Trace Patient\n                                </mat-option>\n                            </mat-select>\n                            <mat-error\n                                    *ngIf="outcome.errors && (outcome.dirty || outcome.touched) && (outcome.errors.required)">\n                                New Status is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class="row" *ngIf="entity.outcome && entity.outcome.indexOf(\'TRACE\') !== -1">\n                        <div class="col-md-6">\n                            <mat-form-field class="full-width">\n                                <input matInput [matDatepicker]="picker1"\n                                       placeholder="Date of Tracked"\n                                       [(ngModel)]="entity.dateTracked"\n                                       #tracked="ngModel"\n                                       [min]="entity.patient.dateRegistration"\n                                       [max]="entity.dateStatus"\n                                       name="tracked"\n                                       required>\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]="picker1">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker1></mat-datepicker>\n                                <mat-error\n                                        *ngIf="tracked.errors && (tracked.dirty || tracked.touched) && (tracked.errors.required)">\n                                    Date tracked is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class="col-md-6" *ngIf="entity.outcome === \'TRACED_AGREED_TO_RETURN_TO_CARE\'">\n                            <mat-form-field class="full-width">\n                                <input matInput [matDatepicker]="picker2"\n                                       placeholder="Date Agreed to Return"\n                                       [(ngModel)]="entity.agreedDate"\n                                       #agreed="ngModel"\n                                       [min]="entity.dateStatus"\n                                       name="agreed"\n                                       required>\n                                <mat-datepicker-toggle\n                                        matSuffix\n                                        [for]="picker2">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker2></mat-datepicker>\n                                <mat-error\n                                        *ngIf="agreed.errors && (agreed.dirty || agreed.touched) && (agreed.errors.required)">\n                                    Date of agreed to return is required\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div *ngIf="entity.outcome === \'KNOWN_DEATH\'">\n                        <mat-form-field class="full-width">\n                            <mat-select [(ngModel)]="entity.causeOfDeath"\n                                        placeholder="Cause of Death"\n                                        #death="ngModel" required name="death">\n                                <mat-option></mat-option>\n                                <mat-option [value]="\'HIV disease resulting in TB\'">HIV disease resulting in TB</mat-option>\n                                <mat-option [value]="\'HIV disease resulting in cancer\'">HIV disease resulting in cancer</mat-option>\n                                <mat-option [value]="\'HIV disease resulting in other infectious and parasitic disease\'">HIV disease resulting in other infectious and parasitic disease</mat-option>\n                                <mat-option [value]="\'Other HIV disease resulting in other disease or conditions leading to death\'">Other HIV disease resulting in other disease or conditions leading to death</mat-option>\n                                <mat-option [value]="\'Other natural causes\'">Other natural causes</mat-option>\n                                <mat-option [value]="\'Non-natural causes\'">Non-natural causes</mat-option>\n                                <mat-option [value]="\'Unknown cause\'">Unknown cause</mat-option>\n                            </mat-select>\n                            <mat-error\n                                    *ngIf="death.errors && (death.dirty || death.touched) && (death.errors.required)">\n                                Cause of death is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf="entity.outcome === \'STOPPED_TREATMENT\'">\n                        <mat-form-field class="full-width">\n                            <mat-select [(ngModel)]="entity.reasonForInterruption"\n                                        placeholder="Reason for Interruption"\n                                        #interrupt="ngModel" required name="interrupt">\n                                <mat-option></mat-option>\n                                <mat-option [value]="\'Toxicity/side effect\'">Toxicity /side effect</mat-option>\n                                <mat-option [value]="\'Pregnancy\'">Pregnancy</mat-option>\n                                <mat-option [value]="\'Treatment failure\'">Treatment failure</mat-option>\n                                <mat-option [value]="\'Poor adherence\'">Poor adherence</mat-option>\n                                <mat-option [value]="\'Illness, hospitalization\'">Illness, hospitalization</mat-option>\n                                <mat-option [value]="\'Drug out of stock\'">Drug out of stock</mat-option>\n                                <mat-option [value]="\'Patient lacks finances\'">Patient lacks finances</mat-option>\n                                <mat-option [value]="\'Other patient decision\'">Other patient decision</mat-option>\n                                <mat-option [value]="\'Planned Rx interruption\'">Planned Rx interruption</mat-option>\n                                <mat-option [value]="\'Other\'">Other</mat-option>\n                            </mat-select>\n                            <mat-error\n                                    *ngIf="interrupt.errors && (interrupt.dirty || interrupt.touched) && (interrupt.errors.required)">\n                                Reason for interruption is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <mat-divider></mat-divider>\n                </mat-card-content>\n                <mat-card-actions class="lamis-edit-form-actions">\n                    <button mat-raised-button type="button" (click)="previousState()">Back</button>\n                    <button mat-raised-button color=\'primary\'\n                            [disabled]="statusForm.invalid"\n                            type="submit">\n                        {{entity.id !== undefined ? \'Update\' : \'Save\'}}\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </form>\n    </div>\n</div>\n'}),b("design:paramtypes",[T,o.ActivatedRoute,o.Router,s.NotificationService,r.AppLoaderService])],t)}(),J=function(){function t(t){this.service=t}return t.prototype.resolve=function(t,e){var n=t.params.id?t.params.id:null;return n?this.service.findClientStatus(n).pipe(i.filter((function(t){return t.ok})),i.map((function(t){return t.body}))):f.of({})},t.ctorParameters=function(){return[{type:T}]},t=g([e.Injectable(),b("design:paramtypes",[T])],t)}(),Q=[{path:"",data:{title:"Clinic Visit",breadcrumb:"CLINIC VISIT"},children:[{path:"patient/:patientId/new",component:$,data:{authorities:["ROLE_DEC"],title:"Update Client Status",breadcrumb:"UPDATE CLIENT STATUS"}},{path:":id/patient/:patientId/edit",component:$,resolve:{entity:J},data:{authorities:["ROLE_DEC"],title:"Client Status Edit",breadcrumb:"CLIENT STATUS EDIT"}}]}],X=function(){function t(){}return t=g([e.NgModule({imports:[d.CommonModule,p.FormsModule,p.ReactiveFormsModule,m.CovalentDialogsModule,r.LamisSharedModule,r.JsonFormModule,v.MatFormioModule,l.MatInputModule,l.MatIconModule,l.MatDividerModule,l.MatCardModule,l.MatSelectModule,l.MatButtonModule,l.MatCheckboxModule,l.MatTabsModule,o.RouterModule.forChild(Q),l.MatProgressBarModule,s.CoreModule,r.MatDateFormatModule],declarations:[$],exports:[$],providers:[J]})],t)}();t.ClientStatusModule=X,t.PatientListComponent=R,t.PatientModule=K,t.PatientService=T,t.ɵa=E,t.ɵb=P,t.ɵc=_,t.ɵd=F,t.ɵe=O,t.ɵf=k,t.ɵg=W,t.ɵh=Y,t.ɵi=A,t.ɵj=N,t.ɵk=j,t.ɵl=B,t.ɵm=x,t.ɵn=q,t.ɵo=U,t.ɵp=L,t.ɵq=H,t.ɵr=J,t.ɵs=Q,t.ɵt=$,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=lamis-patient-1.2.0.umd.min.js.map