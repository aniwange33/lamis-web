{"version":3,"sources":["../../../../../../../../node_modules/tslib/tslib.es6.js","ng://lamis-patient-1.4.1/lib/services/patient.service.ts","ng://lamis-patient-1.4.1/lib/components/patient-list.component.ts","ng://lamis-patient-1.4.1/lib/components/patient-details.component.ts","ng://lamis-patient-1.4.1/lib/components/patient-edit.component.ts","ng://lamis-patient-1.4.1/lib/components/detailed.timeline.component.ts","ng://lamis-patient-1.4.1/lib/services/patient.route.ts","ng://lamis-patient-1.4.1/lib/components/widget-container.component.ts","ng://lamis-patient-1.4.1/lib/services/observation.service.ts","ng://lamis-patient-1.4.1/lib/components/timeline.component.ts","ng://lamis-patient-1.4.1/lib/widget/timeline.widget.ts","ng://lamis-patient-1.4.1/lib/widget/timeline.event.ts","ng://lamis-patient-1.4.1/lib/widget/timeline.badge.ts","ng://lamis-patient-1.4.1/lib/widget/timeline.footer.ts","ng://lamis-patient-1.4.1/lib/widget/timeline.header.ts","ng://lamis-patient-1.4.1/lib/widget/timeline.panel.ts","ng://lamis-patient-1.4.1/lib/widget/timeline.widget.module.ts","ng://lamis-patient-1.4.1/lib/components/unique-hospital-num.validator.ts","ng://lamis-patient-1.4.1/lib/components/summary.widget.component.ts","ng://lamis-patient-1.4.1/lib/patient.module.ts","ng://lamis-patient-1.4.1/lib/components/client-status.component.ts","ng://lamis-patient-1.4.1/lib/services/status.route.ts","ng://lamis-patient-1.4.1/lib/client-status.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","__read","n","e","ar","push","error","__spread","concat","moment","moment_","PatientService","http","serverUrl","authServerProvider","this","resourceUrl","resourceSearchUrl","ovcResourceUrl","SERVER_API_URL","prototype","create","data","_this","patient","convertDateFromClient","post","observe","pipe","map","res","convertDateFromServer","update","put","share","find","id","get","findByUuid","query","req","options","createRequestOption","params","convertDateArrayFromServer","delete","getOVCByPatient","widgets","patientId","observations","activities","detailed","sort","t1","t2","d1","date","diff","getActiveFacility","getAllFacility","getStates","getLgasByState","getStateByLga","getFacility","existsByHospitalNumber","hospitalNum","number","numberExists","getStatusDatesByPatient","forEach","getSummaryForPatient","saveClientStatus","status","console","log","copy","PatientService_1","convertStatusFromClient","updateClientStatus","findClientStatus","body","dateTracked","dateStatus","agreedDate","currentClientStatus","responseType","getStatusName","assign","isValid","format","DATE_FORMAT","dateBirth","dateRegistration","dateStarted","dateConfirmedHiv","dateEnrolledPMTCT","pregnant","pregnancyStatus","breastfeeding","name","surname","otherNames","gender","HttpClient","Inject","args","SERVER_API_URL_CONFIG","AuthServerProvider","Injectable","providedIn","tslib_1.__param","PatientListComponent","patientService","notification","router","activatedRoute","page","loading","itemsPerPage","currentSearch","totalItems","display","facility","ngOnDestroy","ngOnInit","subscribe","onPageChange","searchPatient","search","loadAll","select","path","navigateByUrl","obj","uuid","navigate","relativeTo","pageInfo","loadPage","keyword","facilityId","size","onSuccess","headers","onError","patients","openSnackMessage","message","NotificationService","Router","ActivatedRoute","tslib_1.__decorate","Input","Component","selector","template","PatientDetailsComponent","route","cfr","_dialogService","notificationService","_viewContainerRef","renderer2","properties","_a","entity","attacheWidgets","getObservations","edit","updateStatus","openConfirm","title","cancelButton","acceptButton","width","afterClosed","accept","ok","showError","previousState","window","history","back","getComponentFactory","Array","from","values","x","componentType","addObservation","action","split","parts","apply","buildWidget","componentName","icon","factory","undefined","parentFactory","componentRef","container","createComponent","instance","embeddedContainer","cmpName","constructor","TypeError","instanceRef","addClass","location","nativeElement","patientUuid","age","dob","ComponentFactoryResolver","TdDialogService","ViewContainerRef","Renderer2","ViewChild","read","static","PatientEditComponent","loaderService","ovc","today","minDob","subtract","minDateRegistration","maxDateBirth","maxDateConfirmed","minDateConfirmed","ovcApplicable","prep","createEntity","isSaving","extra","art","ovcMin","clone","lga","add","state","stateChange","targetGroup","indicationForPrep","prepId","onDemandIndication","householdUniqueNo","referredTo","referredFrom","dateReferredTo","dateReferredFrom","servicesProvided","isAfter","patientForm","form","setErrors","invalid","markAllAsTouched","states","entityCompare","e1","e2","estimateDob","ageUnit","lgas","statusChanged","statusAtRegistration","registered","dateBirthChanged","isBefore","dateRegistrationChanged","save","openAlert","disableClose","open","subscribeToSaveResponse","dobEstimated","result","close","onSaveSuccess","onSaveError","showInfo","errorMessage","isOVCAge","AppLoaderService","NgForm","DetailedTimelineComponent","PatientResolve","service","resolve","filter","response","of","ROUTES","breadcrumb","children","component","pagingParams","PagingParamsResolve","authorities","WidgetContainerComponent","ObservationService","deleteObservation","getObservation","TimelineComponent","observationService","loadActivities","view","timeLine","TimelineWidget","TimelineEvent","parent","_side","side","updateRowClasses","checkClass","leftSide","oddClass","evenClass","TimelineBadge","event","TimelineFooter","TimelineHeader","TimelinePanel","COMPONENTS","TimelineWidgetModule","NgModule","declarations","exports","UniqueHospitalNumValidator","validate","control","valueChanges","debounceTime","take","switchMap","UniqueHospitalNumValidator_1","Directive","providers","provide","NG_ASYNC_VALIDATORS","useExisting","multi","SummaryWidgetComponent","summaries","propertiesForSummary","summary","_b","tslib_1.__values","fields","_c","field","dataType","type","toLowerCase","item","FieldType","boolean","CardViewBoolItemModel","label","int","CardViewIntItemModel","float","CardViewFloatItemModel","CardViewDateItemModel","datetime","CardViewDatetimeItemModel","CardViewTextItemModel","PatientModule","imports","CommonModule","NgJhipsterModule","LamisSharedModule","JsonFormModule","MatFormioModule","MatInputModule","MatIconModule","MatDividerModule","MatCardModule","MatSelectModule","MatButtonModule","MatCheckboxModule","MatTabsModule","RouterModule","forChild","MatProgressBarModule","CovalentMessageModule","MatListModule","MatChipsModule","CoreModule","CovalentDialogsModule","CovalentSearchModule","NgbPaginationModule","FormsModule","ReactiveFormsModule","MatDateFormatModule","CustomFormsModule","MatAutocompleteModule","entryComponents","ClientStatusComponent","appLoaderService","facilities","statusDates","statuses","fac","f","snapshot","paramMap","facilityTransferredTo","change","input","includes","filterDates","exists","outcome","StatusResolve","ClientStatusModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {\n    AuthServerProvider,\n    createRequestOption,\n    DATE_FORMAT,\n    SERVER_API_URL_CONFIG,\n    ServerApiUrlConfig\n} from '@lamis/web-core';\nimport {map, share} from 'rxjs/operators';\nimport {OVC, Patient, StatusHistory} from '../model/patient.model';\n\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\nimport {Facility} from '../model/facility.model';\nimport {ValidationErrors} from '@angular/forms';\nimport {Summary} from '../components/summary.widget.component';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Patient>;\ntype EntityArrayResponseType = HttpResponse<Patient[]>;\n\nexport interface PatientActivity {\n    uuid?: string;\n    id?: any;\n    name?: string;\n    icon?: string;\n    path?: string;\n    editable?: boolean;\n    viewable?: boolean;\n    deletable?: boolean;\n}\n\nexport interface PatientTimeline {\n    date?: string;\n    activities?: PatientActivity[];\n}\n\nexport interface PatientWidget {\n    title: string;\n    componentName: string;\n    index: number;\n    icon?: string;\n}\n\nexport interface PatientObservation {\n    name?: string;\n    path?: string;\n    icon?: string;\n    tooltip?: string;\n}\n\n@Injectable({providedIn: 'root'})\nexport class PatientService {\n    public resourceUrl = '';\n    public resourceSearchUrl = '';\n    private ovcResourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig,\n                private authServerProvider: AuthServerProvider) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/patients';\n        this.resourceSearchUrl = serverUrl.SERVER_API_URL + '/api/_search/patients';\n        this.ovcResourceUrl = serverUrl.SERVER_API_URL + '/api/ovcs';\n    }\n\n    create(data: Patient): Observable<EntityResponseType> {\n        const patient = this.convertDateFromClient(data);\n        return this.http\n            .post<Patient>(this.resourceUrl, patient, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(data: Patient): Observable<EntityResponseType> {\n        const patient = this.convertDateFromClient(data);\n        return this.http\n            .put<Patient>(this.resourceUrl, patient, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)),\n                share());\n    }\n\n    find(id: any): Observable<EntityResponseType> {\n        return this.http\n            .get<Patient>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: any): Observable<EntityResponseType> {\n        return this.http\n            .get<Patient>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<Patient[]>(this.resourceUrl, {params: options, observe: 'response'})\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getOVCByPatient(id: number) {\n        return this.http.get<OVC>(`${this.ovcResourceUrl}/patient/${id}`)\n    }\n\n    widgets(patientId: number): Observable<PatientWidget[]> {\n        return this.http.get<PatientWidget[]>(`${this.resourceUrl}/${patientId}/widgets`, {observe: 'body'})\n    }\n\n    observations(patientId: number): Observable<PatientObservation[]> {\n        return this.http.get<PatientObservation[]>(`${this.resourceUrl}/${patientId}/observations`, {\n            observe: 'body'\n        })\n    }\n\n    activities(patientId: number, detailed: boolean): Observable<PatientTimeline[]> {\n        return this.http.get<PatientTimeline[]>(`${this.resourceUrl}/${patientId}/activities?full=${detailed}`, {observe: 'body'})\n            .pipe(map(res => {\n                res.sort((t1, t2) => {\n                    const d1 = moment(t1.date, 'DD MMM, YYYY');\n                    const d2 = moment(t2.date, 'DD MMM, YYYY');\n                    return d2.diff(d1);\n                });\n                return res;\n            }))\n    }\n\n    getActiveFacility() {\n        return this.http.get<Facility>('/api/facilities/active')\n    }\n\n    getAllFacility() {\n        return this.http.get<Facility[]>('/api/facilities')\n    }\n\n    getStates() {\n        return this.http.get<any[]>('/api/states')\n    }\n\n    getLgasByState(id) {\n        return this.http.get<any[]>(`/api/provinces/state/${id}`)\n    }\n\n    getStateByLga(id) {\n        return this.http.get(`/api/provinces/${id}/state`)\n    }\n\n    getFacility(id) {\n        return this.http.get(`/api/facilities/${id}`)\n    }\n\n    existsByHospitalNumber(hospitalNum: string): Observable<ValidationErrors | null> {\n        return this.http.post<boolean>(`${this.resourceUrl}/exists/hospital-number`, {number: hospitalNum})\n            .pipe(map((res => res ? {'numberExists': true} : null)));\n    }\n\n    getStatusDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`/api/client-statuses/patient/${patientId}/status-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            )\n    }\n\n    getSummaryForPatient(id: number) {\n        return this.http.get<Summary[]>(`${this.resourceUrl}/${id}/summary`)\n    }\n\n    saveClientStatus(status: StatusHistory) {\n        console.log('Status', status);\n        const copy = PatientService.convertStatusFromClient(status);\n        console.log('Copy', copy);\n        return this.http.post<StatusHistory>('/api/client-statuses', copy, {observe: 'response'})\n    }\n\n    updateClientStatus(status: StatusHistory) {\n        const copy = PatientService.convertStatusFromClient(status);\n        return this.http.put<StatusHistory>('/api/client-statuses', copy, {observe: 'response'})\n    }\n\n    findClientStatus(id) {\n        return this.http.get<StatusHistory>(`/api/client-statuses/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<StatusHistory>) => {\n                res.body.dateTracked = res.body.dateTracked != null ? moment(res.body.dateTracked) : null;\n                res.body.dateStatus = res.body.dateStatus != null ? moment(res.body.dateStatus) : null;\n                res.body.agreedDate = res.body.agreedDate != null ? moment(res.body.agreedDate) : null;\n                return res;\n            }))\n    }\n\n    currentClientStatus(patientId: string) {\n        return this.http.get(`/api/client-statuses/patient/${patientId}/current`, {responseType: 'text'})\n    }\n\n    getStatusName(id: number) {\n        return this.http.get(`/api/client-statuses/${id}/name`, {responseType: 'text'})\n    }\n\n    private static convertStatusFromClient(status: StatusHistory): StatusHistory {\n        const copy: StatusHistory = Object.assign({}, status, {\n                dateStatus: status.dateStatus != null && status.dateStatus.isValid() ? status.dateStatus.format(DATE_FORMAT) : null,\n                agreedDate: status.agreedDate != null && status.agreedDate.isValid() ? status.agreedDate.format(DATE_FORMAT) : null,\n                dateTracked: status.dateTracked != null && status.dateTracked.isValid() ? status.dateTracked.format(DATE_FORMAT) : null,\n            }\n        );\n        return copy;\n    }\n\n    protected convertDateFromClient(patient: Patient): Patient {\n        const copy: Patient = Object.assign({}, patient, {\n            dateBirth: patient.dateBirth != null && patient.dateBirth.isValid() ? patient.dateBirth.format(DATE_FORMAT) : null,\n            dateRegistration: patient.dateRegistration != null && patient.dateRegistration.isValid() ? patient.dateRegistration.format(DATE_FORMAT) : null,\n            dateStarted: patient.dateStarted != null && patient.dateStarted.isValid() ? patient.dateStarted.format(DATE_FORMAT) : null,\n            dateConfirmedHiv: patient.dateConfirmedHiv != null && patient.dateConfirmedHiv.isValid() ? patient.dateConfirmedHiv.format(DATE_FORMAT) : null,\n            dateEnrolledPMTCT: patient.dateEnrolledPMTCT != null && patient.dateEnrolledPMTCT.isValid() ? patient.dateEnrolledPMTCT.format(DATE_FORMAT) : null,\n            pregnant: patient.pregnancyStatus === 2,\n            breastfeeding: patient.pregnancyStatus === 3\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.name = res.body.surname + ', ' + res.body.otherNames;\n            res.body.dateBirth = res.body.dateBirth != null ? moment(res.body.dateBirth) : null;\n            res.body.dateRegistration = res.body.dateRegistration != null ? moment(res.body.dateRegistration) : null;\n            res.body.dateConfirmedHiv = res.body.dateConfirmedHiv != null ? moment(res.body.dateConfirmedHiv) : null;\n            res.body.dateEnrolledPMTCT = res.body.dateEnrolledPMTCT != null ? moment(res.body.dateEnrolledPMTCT) : null;\n            res.body.dateStarted = res.body.dateStarted != null ? moment(res.body.dateStarted) : null;\n            res.body.pregnancyStatus = res.body.pregnant != null && res.body.pregnant ? 2 : res.body.gender === 'FEMALE' ? 1 : null;\n            res.body.pregnancyStatus = res.body.breastfeeding != null && res.body.breastfeeding ? 3 : res.body.gender === 'FEMALE' ? 1 : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((patient: Patient) => {\n                patient.name = patient.surname + ', ' + patient.otherNames;\n                patient.dateBirth = patient.dateBirth != null ? moment(patient.dateBirth) : null;\n                patient.dateRegistration = patient.dateRegistration != null ? moment(patient.dateRegistration) : null;\n                patient.dateStarted = patient.dateStarted != null ? moment(patient.dateStarted) : null;\n            });\n        }\n        return res;\n    }\n}\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {PatientService} from '../services/patient.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {Patient} from '../model/patient.model';\nimport {Facility} from '../model/facility.model';\n\n@Component({\n    selector: 'lamis-patients',\n    templateUrl: './patient-list.component.html'\n})\nexport class PatientListComponent implements OnInit, OnDestroy {\n    @Input()\n    path: string;\n    page = 0;\n    patients: Patient[];\n    loading = false;\n    public itemsPerPage: number = 10;\n    public currentSearch: string = '';\n    totalItems = 0;\n    display = 'list';\n    facility: Facility = {};\n\n    constructor(private patientService: PatientService,\n                protected notification: NotificationService,\n                protected router: Router,\n                protected activatedRoute: ActivatedRoute) {\n        this.currentSearch = '';\n    }\n\n    ngOnDestroy(): void {\n    }\n\n    ngOnInit(): void {\n        this.patientService.getActiveFacility().subscribe(res => {\n            this.facility = res;\n            this.onPageChange(0);\n        })\n    }\n\n    searchPatient(search: any) {\n        this.currentSearch = search;\n        this.page = 0;\n        this.loadAll();\n    }\n\n\n    public select(data: any): any {\n        if (!!this.path) {\n            this.router.navigateByUrl(`${this.path}/${data.obj.uuid}`)\n        } else {\n            this.router.navigate(['..', 'patients', data.obj.uuid, 'view'], {relativeTo: this.activatedRoute});\n        }\n    }\n\n    onPageChange(pageInfo) {\n        this.page = pageInfo;\n        this.loadAll();\n    }\n\n    loadPage(page: number) {\n        this.loadAll();\n    }\n\n    loadAll() {\n        this.loading = true;\n        this.patientService.query({\n            keyword: this.currentSearch,\n            page: this.page > 0 ? this.page - 1 : 0,\n            facilityId: this.facility.id || 0,\n            size: this.itemsPerPage,\n            sort: ['id', 'asc']\n        }).subscribe(\n            (res: any) => {\n                this.onSuccess(res.body, res.headers)\n            },\n            (res: any) => this.onError(res)\n        );\n    }\n\n    protected onSuccess(data: any, headers: any) {\n        this.patients = data;\n        this.totalItems = headers.get('X-Total-Count');\n        this.loading = false;\n    }\n\n    private onError(error: any) {\n        this.notification.openSnackMessage(error.message);\n        this.loading = false;\n    }\n}\n\n","import {\n    Component,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\nimport {Patient} from '../model/patient.model';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {PatientObservation, PatientService, PatientWidget} from '../services/patient.service';\nimport {TdDialogService} from '@covalent/core';\nimport {CardViewItem, NotificationService} from '@alfresco/adf-core';\nimport {Moment} from 'moment';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'lamis-patient',\n    templateUrl: './patient-details.component.html',\n    styleUrls: ['./patient-details.component.scss']\n})\nexport class PatientDetailsComponent implements OnInit, OnDestroy {\n    template = 'patient-details';\n    entity: Patient;\n    observations: PatientObservation[];\n    @ViewChild('container', {read: ViewContainerRef, static: true}) container: ViewContainerRef;\n    properties: CardViewItem[] = [];\n    status: string;\n\n    constructor(private router: Router, private route: ActivatedRoute, private patientService: PatientService,\n                private cfr: ComponentFactoryResolver, private _dialogService: TdDialogService,\n                private notificationService: NotificationService, private _viewContainerRef: ViewContainerRef,\n                private renderer2: Renderer2) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            this.patientService.currentClientStatus(entity.uuid).subscribe(res => {\n                this.status = res;\n            });\n            this.attacheWidgets();\n            this.getObservations();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['..', 'edit'], {relativeTo: this.route});\n    }\n\n    updateStatus() {\n        this.router.navigate(['/', 'client-statuses', 'patient', this.entity.uuid, 'new']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this patient, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.patientService.delete(this.entity.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['patients'])\n                    } else {\n                        this.notificationService.showError('Error deleting patient, please try again')\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    private getComponentFactory(name: string) {\n        const factories = Array.from(this.cfr['_factories'].values());\n        return <ComponentFactory<any>>factories.find((x: any) => x.componentType.name === name);\n    }\n\n    getObservations() {\n        this.patientService.observations(this.entity.id).subscribe((res: PatientObservation[]) => this.observations = res)\n    }\n\n    addObservation(action: PatientObservation) {\n        const path = action.path.split('/');\n        const parts = ['/'];\n        parts.push(...path);\n        parts.push('patient', this.entity.uuid, 'new');\n        this.router.navigate([...parts]);\n    }\n\n    private attacheWidgets() {\n        this.buildWidget('TimelineComponent', 'Recent Activities', 'timeline');\n        this.buildWidget('SummaryWidgetComponent', 'Patient Summary', 'account_balance_wallet');\n        /*this.patientService.widgets(this.entity.id).subscribe((res: PatientWidget[]) => {\n            res.forEach((widget: PatientWidget) => {\n                this.buildWidget(widget.componentName, widget.title, widget.icon);\n            })\n        });*/\n    }\n\n    public ngOnDestroy() {\n    }\n\n    private buildWidget(componentName: string, title: string, icon: string) {\n        const factory = this.getComponentFactory(componentName);\n        if (factory !== undefined) {\n            const parentFactory = this.getComponentFactory('WidgetContainerComponent');\n            const componentRef = this.container.createComponent(parentFactory);\n            if (!componentRef.instance.embeddedContainer) {\n                const cmpName = componentRef.instance.constructor.name;\n                throw new TypeError(`Trying to render embedded content. ${cmpName} must have @ViewChild() embeddedContainer defined`);\n            }\n            console.log('Created component', componentRef);\n            const instanceRef = componentRef.instance.embeddedContainer.createComponent(factory);\n            this.renderer2.addClass(componentRef.location.nativeElement, 'col-md-6');\n            componentRef.instance.icon = icon;\n            componentRef.instance.title = title;\n            try {\n                instanceRef.instance.patientId = this.entity.id;\n                instanceRef.instance.patientUuid = this.entity.uuid;\n            } catch (e) {\n\n            }\n        }\n    }\n\n    age(dob: Moment) {\n        let age = moment().diff(dob, 'years');\n        if (age > 0) {\n            return age + ' year(s)'\n        }\n\n        age = moment().diff(dob, 'months');\n        if (age > 0) {\n            return age + ' month(s)';\n        }\n        return moment().diff(dob, 'weeks') + ' week(s)';\n    }\n}\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {OVC, Patient} from '../model/patient.model';\nimport {PatientService} from '../services/patient.service';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {ActivatedRoute} from '@angular/router';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport * as moment_ from 'moment';\nimport {DurationInputArg2, Moment} from 'moment';\nimport {AppLoaderService, DATE_FORMAT, entityCompare} from '@lamis/web-core';\nimport {TdDialogService} from '@covalent/core';\nimport {NgForm} from '@angular/forms';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'lamis-patient-edit',\n    templateUrl: './patient-edit.component.html'\n})\nexport class PatientEditComponent implements OnInit {\n    @ViewChild('patientForm', {static: true}) public patientForm: NgForm;\n    template = 'patient-edit';\n    entity: Patient;\n    ovc: OVC = {};\n    patient: Patient;\n    isSaving: boolean;\n    error = false;\n    today = moment();\n    minDob = moment().subtract(75, 'years');\n    ovcMin: Moment;\n    minDateRegistration: Moment = moment('1998', 'YYYY');\n    maxDateBirth: Moment = moment().subtract(2, 'months');\n    maxDateConfirmed = moment();\n    minDateConfirmed = moment('1998', 'YYYY');\n    age: number;\n    ageUnit: DurationInputArg2;\n    state: any;\n    states: any[];\n    lgas: any[];\n    ovcApplicable = false;\n    householdUniqueNo: string;\n    referredTo: string;\n    dateReferredTo: Moment;\n    referredFrom: string;\n    dateReferredFrom: Moment;\n    prep: boolean = false;\n    prepId: string;\n    indicationForPrep: string;\n    onDemandIndication: string;\n    targetGroup: string;\n\n    constructor(private patientService: PatientService,\n                protected notification: NotificationService,\n                private loaderService: AppLoaderService,\n                private _dialogService: TdDialogService,\n                protected activatedRoute: ActivatedRoute) {\n    }\n\n    createEntity(): Patient {\n        return <Patient>{};\n    }\n\n    ngOnInit(): void {\n        this.patientService.getActiveFacility().subscribe((res: any) => {\n            this.entity.facility = res;\n        });\n        this.isSaving = false;\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n\n                this.entity.extra = {\n                    art: true\n                }\n            }\n            if (this.entity.id) {\n                this.ovcMin = this.entity.dateBirth.clone();\n            }\n            if (this.entity.id && this.entity.lga) {\n                this.minDateRegistration = this.entity.dateBirth.clone().add(2, 'month');\n                this.minDateConfirmed = this.entity.dateBirth.clone().add(1, 'month');\n                this.patientService.getStateByLga(this.entity.lga.id).subscribe(res => {\n                    this.state = res;\n                    this.stateChange(this.state.id);\n                })\n            }\n            if(this.entity.extra ){\n                this.targetGroup = this.entity.extra.targetGroup\n            }\n            if (this.entity.extra && this.entity.extra.prep) {\n                this.prep = true;\n                this.indicationForPrep = this.entity.extra.prep.indicationForPrep;\n                this.prepId = this.entity.extra.prep.prepId;\n                this.onDemandIndication = this.entity.extra.prep.onDemandIndication;\n            }\n            if (this.entity.extra && this.entity.extra.ovc) {\n                this.ovc.householdUniqueNo = this.entity.extra.ovc.householdUniqueNo;\n                this.ovc.referredTo = this.entity.extra.ovc.referredTo;\n                this.ovc.referredFrom = this.entity.extra.ovc.referredFrom;\n                if (!!this.entity.extra.ovc.dateReferredTo) {\n                    this.ovc.dateReferredTo = moment(this.entity.extra.ovc.dateReferredTo);\n                }\n\n                if (!!this.entity.extra.ovc.dateReferredFrom) {\n                    this.ovc.dateReferredFrom = moment(this.entity.extra.ovc.dateReferredFrom);\n                }\n                if (!this.entity.extra.ovc.servicesProvided) {\n                    this.ovc.servicesProvided = [];\n                }\n            }\n            const date = this.entity.dateBirth && this.entity.dateBirth.clone() || moment('1998-01-01', 'YYYY-MM-DD');\n            if (!moment().subtract(17, 'years').isAfter(date)) {\n                this.ovcApplicable = true;\n            }\n\n            this.patientForm.form.setErrors({'invalid': true});\n            this.patientForm.form.markAllAsTouched();\n        });\n\n        this.patientService.getStates().subscribe(res => this.states = res);\n    }\n\n    entityCompare(e1, e2) {\n        return entityCompare(e1, e2);\n    }\n\n    estimateDob() {\n        if (this.age && this.ageUnit && this.entity.dateRegistration) {\n            const dateRegistration = this.entity.dateRegistration;\n            this.entity.dateBirth = dateRegistration.clone().subtract(this.age, this.ageUnit);\n            this.ovcMin = this.entity.dateBirth.clone();\n            this.minDateConfirmed = this.entity.dateBirth.clone().add(1, 'months');\n            this.ovcApplicable = !this.entity.dateRegistration.clone().subtract(17, 'years').isAfter(this.entity.dateBirth);\n        }\n    }\n\n    stateChange(id) {\n        this.patientService.getLgasByState(id).subscribe(res => this.lgas = res)\n    }\n\n    statusChanged() {\n        this.prep = this.entity.statusAtRegistration === 'HIV_NEGATIVE';\n        if (this.prep) {\n            this.entity.extra['art'] = false;\n            this.entity.extra.prep = {\n                registered: true\n            };\n        } else {\n            this.entity.extra['art'] = true;\n            this.entity.extra.prep = {\n                registered: false\n            };\n        }\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    dateBirthChanged(date: Moment) {\n        this.minDateRegistration = date.clone().add(2, 'months');\n        this.minDateConfirmed = date.clone().add(1, 'months');\n        if (this.minDateRegistration.isBefore(moment('1998', 'YYYY'), 'day')) {\n            this.minDateRegistration = moment('1998', 'YYYY');\n            this.minDateConfirmed = moment('1998', 'YYYY');\n        }\n        this.ovcMin = date.clone();\n        if (!!this.entity.dateRegistration) {\n            this.ovcApplicable = !this.entity.dateRegistration.clone().subtract(17, 'years').isAfter(this.entity.dateBirth);\n        }\n    }\n\n    dateRegistrationChanged(date: Moment) {\n        this.maxDateBirth = date.clone().subtract(2, 'months');\n        this.maxDateConfirmed = date.clone();\n\n        if (!!this.entity.dateBirth) {\n            this.ovcApplicable = !this.entity.dateRegistration.clone().subtract(17, 'years').isAfter(this.entity.dateBirth);\n        }\n    }\n\n    save() {\n        //this.progressBar.mode = 'indeterminate';\n        this.isSaving = true;\n        if (this.prep) {\n            if (!this.entity.extra) {\n                this.entity.extra = {};\n            }\n            this.entity.extra.prep = {\n                registered: true,\n                prepId: this.prepId,\n                indicationForPrep: this.indicationForPrep,\n                onDemandIndication: this.onDemandIndication\n            };\n        } else {\n            this.entity.extra.prep = {\n                registered: false\n            };\n        }\n        if (this.ovcApplicable) {\n            if (!this.entity.extra) {\n                this.entity.extra = {};\n            }\n            this.entity.extra.ovc = {};\n            this.entity.extra.ovc = this.ovc;\n            this.entity.extra.ovc.dateReferredFrom = this.ovc.dateReferredFrom != null && this.ovc.dateReferredFrom.isValid() ?\n                this.ovc.dateReferredFrom.format(DATE_FORMAT) : null;\n            this.entity.extra.ovc.dateReferredTo = this.ovc.dateReferredTo != null && this.ovc.dateReferredTo.isValid() ?\n                this.ovc.dateReferredTo.format(DATE_FORMAT) : null;\n\n            if (!!this.ovc.householdUniqueNo && !(!!this.ovc.referredFrom || !!this.ovc.referredTo)) {\n                this._dialogService.openAlert({\n                    title: 'OVC Partner is required',\n                    message: 'Please indicate either OVC Partner transferred to or from',\n                    disableClose: true\n                });\n\n                return\n            }\n\n            if ((!!this.ovc.referredTo || !!this.ovc.referredFrom) && !this.ovc.householdUniqueNo) {\n                this._dialogService.openAlert({\n                    title: 'Household number is required',\n                    message: 'Please indicate Household Unique No',\n                    disableClose: true\n                });\n\n                return\n            }\n\n            if (!!this.ovc.referredFrom && !!this.ovc.referredTo) {\n                this._dialogService.openAlert({\n                    title: 'OVC Partner mismatch',\n                    message: 'Please provide either OVC Partner transfer to or from, not both',\n                    disableClose: true\n                });\n\n                return\n            }\n        }\n        if (this.targetGroup) {\n            this.entity.extra.targetGroup = this.targetGroup;\n        }\n        this.loaderService.open('Saving patient...');\n        if (!this.entity.id) {\n            if (this.entity.dobEstimated) {\n                this.entity.dateBirth = this.entity.dateRegistration.clone().subtract(this.age, this.ageUnit);\n            }\n            this.subscribeToSaveResponse(this.patientService.create(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.patientService.update(this.entity));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        this.loaderService.close();\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.onSaveError();\n                this.onError(res.message)\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.isSaving = false;\n        this.notification.showInfo('Patient successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.error = true;\n        //this.progressBar.mode = 'determinate';\n    }\n\n    protected onError(errorMessage: string) {\n        this.notification.showError(errorMessage);\n    }\n\n\n    isOVCAge() {\n        if (this.age && this.ageUnit === 'years') {\n            if (this.age >= 10 && this.age <= 24) {\n                return true;\n            }\n        }\n\n        const dob = this.entity.dateBirth.clone();\n        const diff = this.entity.dateRegistration.clone().diff(dob);\n\n        return diff >= 10 && diff <= 24;\n    }\n}\n","import {Component, OnInit} from \"@angular/core\";\nimport {PatientService} from \"../services/patient.service\";\nimport {ActivatedRoute} from \"@angular/router\";\n\n@Component({\n    selector: 'detailed-timeline',\n    templateUrl: './detailed.timeline.component.html'\n})\nexport class DetailedTimelineComponent implements OnInit {\n    id: number;\n    uuid: string;\n\n    constructor(private patientService: PatientService, private route: ActivatedRoute) {\n    }\n\n    ngOnInit(): void {\n        this.route.data.subscribe(({entity}) => {\n            const patient = !!entity && entity.body ? entity.body : entity;\n            this.id = patient.id;\n            this.uuid = patient.uuid;\n        });\n    }\n\n    previousState() {\n        window.history.back();\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpResponse} from '@angular/common/http';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes} from '@angular/router';\nimport {PagingParamsResolve, UserRouteAccessService} from '@lamis/web-core';\nimport {Observable, of} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport {PatientService} from './patient.service';\nimport {Patient} from '../model/patient.model';\nimport {PatientDetailsComponent} from '../components/patient-details.component';\nimport {PatientEditComponent} from '../components/patient-edit.component';\nimport {PatientListComponent} from '../components/patient-list.component';\nimport {DetailedTimelineComponent} from '../components/detailed.timeline.component';\n\n@Injectable()\nexport class PatientResolve implements Resolve<Patient> {\n    constructor(private service: PatientService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Patient> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Patient>) => response.ok),\n                map((patient: HttpResponse<Patient>) => patient.body)\n            );\n        }\n        return of(<Patient>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Patients',\n            breadcrumb: 'PATIENTS'\n        },\n        children: [\n            {\n                path: '',\n                component: PatientListComponent,\n                resolve: {\n                    pagingParams: PagingParamsResolve\n                },\n                data: {},\n            },\n            {\n                path: ':id/view',\n                component: PatientDetailsComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Patient Details',\n                    breadcrumb: 'PATIENT DETAILS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'new',\n                component: PatientEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Add Patient',\n                    breadcrumb: 'ADD PATIENT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/edit',\n                component: PatientEditComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Patient Edit',\n                    breadcrumb: 'PATIENT EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/timeline',\n                component: DetailedTimelineComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Patient Timeline',\n                    breadcrumb: 'PATIENT TIMELINE'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import {Component, HostBinding, Input, ViewChild, ViewContainerRef} from '@angular/core';\n\n@Component({\n    selector: 'widget-container',\n    templateUrl: './widget-container.component.html',\n    styleUrls: ['./widget-container.component.scss']\n})\nexport class WidgetContainerComponent {\n    @Input()\n    title: string;\n    @Input()\n    icon: string;\n\n    @ViewChild('container', {read: ViewContainerRef, static: true})\n    embeddedContainer: ViewContainerRef;\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {SERVER_API_URL_CONFIG, ServerApiUrlConfig} from '@lamis/web-core';\n\n@Injectable({providedIn: 'root'})\nexport class ObservationService {\n    resourceUrl: string = '';\n\n    constructor(private http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api';\n    }\n\n    deleteObservation(path: string, id: string) {\n        return this.http.delete(`${this.resourceUrl}/${path}/${id}`, {observe: 'response'})\n    }\n\n    getObservation(path: string, id: string) {\n        return this.http.get<any>(`${this.resourceUrl}/${path}/by-uuid/${id}`, {observe: 'response'})\n    }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {PatientService, PatientTimeline} from '../services/patient.service';\nimport {Router} from '@angular/router';\nimport {TdDialogService} from '@covalent/core';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {ObservationService} from '../services/observation.service';\n\n@Component({\n    selector: 'patient-timeline',\n    templateUrl: './timeline.component.html'\n})\nexport class TimelineComponent implements OnInit {\n    @Input()\n    patientId: number;\n    @Input()\n    patientUuid: string;\n    @Input()\n    detailed: boolean = false;\n    timeLine: PatientTimeline[];\n\n    constructor(private patientService: PatientService, private router: Router, private observationService: ObservationService,\n                private _dialogService: TdDialogService, private notificationService: NotificationService) {\n    }\n\n    ngOnInit(): void {\n        this.loadActivities()\n    }\n\n    view(path: string, id: string) {\n        this.router.navigate(['/', path, id, 'patient', this.patientUuid, 'view'])\n    }\n\n    edit(path: string, id: string) {\n        this.router.navigate(['/', path, id, 'patient', this.patientUuid, 'edit'])\n    }\n\n    delete(path: string, id: string) {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this event, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.observationService.getObservation(path, id).subscribe(obj => {\n                    if (obj.body) {\n                        this.observationService.deleteObservation(path, obj.body.id).subscribe((res) => {\n                            if (res.ok) {\n                                this.patientService.activities(this.patientId, this.detailed).subscribe((res) => this.timeLine = res)\n                            } else {\n                                this.notificationService.showError('Error deleting event, please try again')\n                            }\n                        })\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    loadActivities() {\n        this.patientService.activities(this.patientId, this.detailed).subscribe((res) => this.timeLine = res)\n    }\n}\n","import {Component, OnInit} from \"@angular/core\";\n\n@Component({\n    selector: 'timeline',\n    templateUrl: './timeline.widget.html'\n})\nexport class TimelineWidget implements OnInit {\n    ngOnInit(): void {\n    }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {TimelineWidget} from './timeline.widget';\n\n@Component({\n    selector: 'timeline-event',\n    templateUrl: './timeline.event.html'\n})\nexport class TimelineEvent implements OnInit {\n\n    oddClass;\n    evenClass;\n    _side: string = 'left';\n    @Input()\n    set side(side: string) {\n        this._side = side;\n        this.updateRowClasses(this._side);\n    }\n\n    constructor(private parent: TimelineWidget) {\n    }\n\n    ngOnInit(): void {\n        this.updateRowClasses(this._side);\n    }\n\n    checkClass(side, leftSide) {\n        let leftClass = '';\n        let rightClass = 'timeline-inverted';\n\n        if (side === 'left' || (!side && leftSide === true)) {\n            return leftClass;\n        } else if ((side === 'alternate' || !side) && leftSide === false) {\n            return rightClass;\n        } else if (side === 'right') {\n            return rightClass;\n        } else {\n            return leftClass;\n        }\n    }\n\n    updateRowClasses(value) {\n        this.oddClass = this.checkClass(value, true);\n        this.evenClass = this.checkClass(value, false);\n    }\n}\n","import {Component} from '@angular/core';\nimport {TimelineEvent} from './timeline.event';\n\n@Component({\n    selector: 'timeline-badge',\n    template: `\n        <div class='timeline-badge'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineBadge {\n    constructor(private event: TimelineEvent) {\n    }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'timeline-footer',\n    template: `\n        <div class='timeline-footer'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineFooter {\n\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'timeline-header',\n    template: `\n        <div class='timeline-header'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineHeader {\n\n}\n","import {Component} from '@angular/core';\nimport {TimelineEvent} from './timeline.event';\n\n@Component({\n    selector: 'timeline-panel',\n    template:\n        `\n        <div class='timeline-panel'>\n            <ng-content></ng-content>\n        </div>`\n})\nexport class TimelinePanel {\n    constructor(private event: TimelineEvent) {\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {TimelineWidget} from './timeline.widget';\nimport {TimelineEvent} from './timeline.event';\nimport {TimelineBadge} from './timeline.badge';\nimport {TimelineFooter} from './timeline.footer';\nimport {TimelineHeader} from './timeline.header';\nimport {TimelinePanel} from './timeline.panel';\n\nconst COMPONENTS = [TimelineBadge, TimelineEvent, TimelineFooter, TimelineHeader, TimelinePanel, TimelineWidget];\n\n@NgModule({\n    declarations: [\n        ...COMPONENTS\n    ],\n    exports: [\n        ...COMPONENTS\n    ]\n})\nexport class TimelineWidgetModule {\n\n}\n","import {AbstractControl, AsyncValidator, NG_ASYNC_VALIDATORS, ValidationErrors} from '@angular/forms';\nimport {Directive} from '@angular/core';\nimport {PatientService} from '../services/patient.service';\nimport {Observable, of} from 'rxjs';\nimport {debounceTime, switchMap, take} from 'rxjs/operators';\n\n@Directive({\n    selector: '[uniqueHospitalNum]',\n    providers: [{\n        provide: NG_ASYNC_VALIDATORS,\n        useExisting: UniqueHospitalNumValidator,\n        multi: true\n    }]\n})\nexport class UniqueHospitalNumValidator implements AsyncValidator {\n    constructor(private patientService: PatientService) {\n    }\n\n    validate(control: AbstractControl): Observable<ValidationErrors | null> {\n        return control.valueChanges\n            .pipe(\n                debounceTime(300),\n                take(1),\n                switchMap(value => this.patientService.existsByHospitalNumber(value))\n            );\n    }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewDatetimeItemModel,\n    CardViewFloatItemModel,\n    CardViewIntItemModel,\n    CardViewItem,\n    CardViewTextItemModel\n} from '@alfresco/adf-core';\nimport {FieldType} from '@lamis/web-core';\nimport {PatientService} from '../services/patient.service';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\nexport interface Summary {\n    header?: string;\n    headerClass?: string;\n    fields: Field[];\n}\n\nexport interface Field {\n    type: FieldType;\n    label: string;\n    value: any;\n}\n\n@Component({\n    selector: 'patient-summary-widget',\n    templateUrl: './summary.widget.component.html'\n})\nexport class SummaryWidgetComponent implements OnInit {\n    @Input()\n    patientId: number;\n    @Input()\n    patientUuid: string;\n    @Input()\n\n    summaries: Summary[];\n\n    constructor(private patientService: PatientService) {\n    }\n\n    ngOnInit(): void {\n        this.patientService.getSummaryForPatient(this.patientId).subscribe(res => this.summaries = res)\n    }\n\n    public propertiesForSummary(summary: Summary): Array<CardViewItem> {\n        const properties = [];\n        for (const field of summary.fields) {\n            const dataType = field.type.toLowerCase();\n            let item: CardViewItem;\n            switch (dataType) {\n                case FieldType.boolean:\n                    item = new CardViewBoolItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label\n                    });\n                    break;\n                case FieldType.int:\n                    item = new CardViewIntItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n                    break;\n                case FieldType.float:\n                    item = new CardViewFloatItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n                    break;\n                case FieldType.date:\n                    item = new CardViewDateItemModel({\n                        value: field.value ? moment(field.value) : null,\n                        key: '',\n                        label: field.label,\n                        format: 'dd MMM, yyyy'\n                    });\n                    break;\n                case FieldType.datetime:\n                    item = new CardViewDatetimeItemModel({\n                        value: field.value ? moment(field.value) : null,\n                        key: '',\n                        label: field.label,\n                        format: 'dd MMM, yyyy HH:mm'\n                    });\n                    break;\n                default:\n                    item = new CardViewTextItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n            }\n            properties.push(item);\n        }\n        return properties;\n    }\n}\n","import {CoreModule} from '@alfresco/adf-core';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDividerModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatProgressBarModule,\n    MatSelectModule,\n    MatTabsModule\n} from '@angular/material';\nimport {RouterModule} from '@angular/router';\nimport {CovalentDialogsModule, CovalentMessageModule, CovalentSearchModule} from '@covalent/core';\nimport {JsonFormModule, LamisSharedModule, MatDateFormatModule} from '@lamis/web-core';\nimport {NgbPaginationModule} from '@ng-bootstrap/ng-bootstrap';\nimport {NgJhipsterModule} from 'ng-jhipster';\nimport {PatientDetailsComponent} from './components/patient-details.component';\nimport {PatientEditComponent} from './components/patient-edit.component';\nimport {PatientListComponent} from './components/patient-list.component';\nimport {PatientResolve, ROUTES} from './services/patient.route';\nimport {WidgetContainerComponent} from './components/widget-container.component';\nimport {TimelineComponent} from './components/timeline.component';\nimport {TimelineWidgetModule} from './widget/timeline.widget.module';\nimport {MatFormioModule} from 'angular-material-formio';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {UniqueHospitalNumValidator} from './components/unique-hospital-num.validator';\nimport {CustomFormsModule} from 'ng2-validation';\nimport {DetailedTimelineComponent} from './components/detailed.timeline.component';\nimport {SummaryWidgetComponent} from './components/summary.widget.component';\n\n@NgModule({\n    declarations: [\n        PatientListComponent,\n        PatientDetailsComponent,\n        PatientEditComponent,\n        WidgetContainerComponent,\n        TimelineComponent,\n        DetailedTimelineComponent,\n        SummaryWidgetComponent,\n        UniqueHospitalNumValidator\n    ],\n    imports: [\n        CommonModule,\n        NgJhipsterModule,\n        LamisSharedModule,\n        JsonFormModule,\n        MatFormioModule,\n        MatInputModule,\n        MatIconModule,\n        MatDividerModule,\n        MatCardModule,\n        MatSelectModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatTabsModule,\n        RouterModule.forChild(ROUTES),\n        MatProgressBarModule,\n        CovalentMessageModule,\n        MatListModule,\n        MatChipsModule,\n        CoreModule,\n        CovalentDialogsModule,\n        CovalentSearchModule,\n        NgbPaginationModule,\n        TimelineWidgetModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDateFormatModule,\n        CustomFormsModule,\n        MatAutocompleteModule\n    ],\n    exports: [\n        PatientListComponent,\n        PatientDetailsComponent,\n        PatientEditComponent\n    ],\n    entryComponents: [\n        WidgetContainerComponent,\n        TimelineComponent,\n        SummaryWidgetComponent\n    ],\n    providers: [\n        //PatientService,\n        //ObservationService,\n        PatientResolve\n    ]\n})\nexport class PatientModule {\n}\n","import {Component, OnInit} from '@angular/core';\nimport {PatientService} from '../services/patient.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {NotificationService} from '@alfresco/adf-core';\nimport {AppLoaderService} from '@lamis/web-core';\nimport {Patient, StatusHistory} from '../model/patient.model';\nimport * as moment_ from 'moment';\nimport {Moment} from 'moment';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'client-status',\n    templateUrl: './client-status.component.html'\n})\nexport class ClientStatusComponent implements OnInit {\n    isSaving: boolean;\n    entity: StatusHistory;\n    patient: Patient;\n    status: string;\n    facilities: string[] = [];\n    facilityTransferredTo: string;\n    statusDates: Moment[] = [];\n    today = moment();\n    statuses = ['TRACED_UNABLE_TO_LOCATE', 'TRACED_AGREED_TO_RETURN_TO_CARE', 'DID_NOT_ATTEMPT_TO_TRACE'];\n\n    constructor(private patientService: PatientService, private activatedRoute: ActivatedRoute, private router: Router,\n                private notification: NotificationService, private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): StatusHistory {\n        return <StatusHistory>{};\n    }\n\n    ngOnInit(): void {\n        this.isSaving = false;\n        this.patientService.getActiveFacility().subscribe(fac => {\n            this.patientService.getAllFacility().subscribe(res => {\n                this.facilities = res.map(f => f.name).filter(f => f != fac.name);\n            });\n        });\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.patientService.findByUuid(patientId).subscribe((res) => {\n                this.entity.patient = res.body;\n                this.patient = res.body;\n                this.entity.facility = res.body.facility;\n                this.patientService.getStatusDatesByPatient(res.body.id).subscribe((res) => {\n                    this.statusDates = res;\n                });\n            });\n\n            if (this.entity.id) {\n                this.patientService.getStatusName(this.entity.id).subscribe(res => this.status = res);\n\n                if (this.entity && this.entity.extra) {\n                    this.facilityTransferredTo = this.entity.extra.facilityTransferredTo;\n                }\n            }\n        });\n    }\n\n    change(input: string) {\n        if (input) {\n            this.facilities = this.facilities.filter(f => f.toLowerCase().includes(input.toLowerCase()))\n        }\n    }\n\n    filterDates(date: Moment): boolean {\n        let exists = false;\n\n        this.statusDates.forEach(d => {\n            if (date.diff(d, 'days') === 0) {\n                exists = true;\n            }\n        });\n        return (this.entity.id && date.diff(this.entity.dateStatus, 'days') === 0) || !exists;\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    save() {\n        this.appLoaderService.open('Saving Client status update...');\n        this.isSaving = true;\n        if (!this.entity.extra) {\n            this.entity.extra = {}\n        }\n        this.entity.extra.facilityTransferredTo = this.facilityTransferredTo;\n\n        if (this.statuses.includes(this.entity.status)) {\n            this.entity.outcome = this.entity.status;\n            this.entity.status = null;\n        }\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.patientService.updateClientStatus(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.patientService.saveClientStatus(this.entity));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.appLoaderService.close();\n                this.onSaveError();\n                this.onError(res.message)\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Client status update successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.notification.showError('Error saving status update');\n    }\n\n    protected onError(errorMessage: string) {\n        this.isSaving = false;\n        this.notification.showError(errorMessage);\n    }\n}\n","import {ClientStatusComponent} from '../components/client-status.component';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes} from '@angular/router';\nimport {StatusHistory} from '../model/patient.model';\nimport {PatientService} from './patient.service';\nimport {Observable, of} from 'rxjs';\nimport {Injectable} from '@angular/core';\nimport {filter, map} from 'rxjs/operators';\nimport {HttpResponse} from '@angular/common/http';\n\n@Injectable()\nexport class StatusResolve implements Resolve<StatusHistory> {\n    constructor(private service: PatientService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<StatusHistory> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findClientStatus(id).pipe(\n                filter((response: HttpResponse<StatusHistory>) => response.ok),\n                map((patient: HttpResponse<StatusHistory>) => patient.body)\n            );\n        }\n        return of(<StatusHistory>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Clinic Visit',\n            breadcrumb: 'CLINIC VISIT'\n        },\n        children: [\n            {\n                path: 'patient/:patientId/new',\n                component: ClientStatusComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Update Client Status',\n                    breadcrumb: 'UPDATE CLIENT STATUS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: ClientStatusComponent,\n                resolve: {\n                    entity: StatusResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Client Status Edit',\n                    breadcrumb: 'CLIENT STATUS EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CovalentDialogsModule} from '@covalent/core';\nimport {CoreModule} from '@alfresco/adf-core';\nimport {JsonFormModule, LamisSharedModule, MatDateFormatModule} from '@lamis/web-core';\nimport {MatFormioModule} from 'angular-material-formio';\nimport {RouterModule} from '@angular/router';\nimport {ROUTES, StatusResolve} from './services/status.route';\nimport {\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatDividerModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressBarModule,\n    MatSelectModule,\n    MatTabsModule\n} from '@angular/material';\nimport {ClientStatusComponent} from './components/client-status.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CovalentDialogsModule,\n        LamisSharedModule,\n        JsonFormModule,\n        MatFormioModule,\n        MatInputModule,\n        MatIconModule,\n        MatDividerModule,\n        MatCardModule,\n        MatSelectModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatTabsModule,\n        RouterModule.forChild(ROUTES),\n        MatProgressBarModule,\n        CoreModule,\n        MatDateFormatModule\n    ],\n    declarations: [\n        ClientStatusComponent\n    ],\n    exports: [\n        ClientStatusComponent\n    ],\n    providers: [\n        StatusResolve\n    ]\n})\nexport class ClientStatusModule {\n\n}\n"]}