import * as tslib_1 from "tslib";
var PatientService_1;
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { AuthServerProvider, createRequestOption, DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';
import { map, share } from 'rxjs/operators';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";
const moment = moment_;
let PatientService = PatientService_1 = class PatientService {
    constructor(http, serverUrl, authServerProvider) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.authServerProvider = authServerProvider;
        this.resourceUrl = '';
        this.resourceSearchUrl = '';
        this.ovcResourceUrl = '';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/patients';
        this.resourceSearchUrl = serverUrl.SERVER_API_URL + '/api/_search/patients';
        this.ovcResourceUrl = serverUrl.SERVER_API_URL + '/api/ovcs';
    }
    create(data) {
        const patient = this.convertDateFromClient(data);
        return this.http
            .post(this.resourceUrl, patient, { observe: 'response' })
            .pipe(map((res) => this.convertDateFromServer(res)));
    }
    update(data) {
        const patient = this.convertDateFromClient(data);
        return this.http
            .put(this.resourceUrl, patient, { observe: 'response' })
            .pipe(map((res) => this.convertDateFromServer(res)), share());
    }
    find(id) {
        return this.http
            .get(`${this.resourceUrl}/${id}`, { observe: 'response' })
            .pipe(map((res) => this.convertDateFromServer(res)));
    }
    findByUuid(id) {
        return this.http
            .get(`${this.resourceUrl}/by-uuid/${id}`, { observe: 'response' })
            .pipe(map((res) => this.convertDateFromServer(res)));
    }
    query(req) {
        const options = createRequestOption(req);
        return this.http
            .get(this.resourceUrl, { params: options, observe: 'response' })
            .pipe(map((res) => this.convertDateArrayFromServer(res)));
    }
    delete(id) {
        return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });
    }
    getOVCByPatient(id) {
        return this.http.get(`${this.ovcResourceUrl}/patient/${id}`);
    }
    widgets(patientId) {
        return this.http.get(`${this.resourceUrl}/${patientId}/widgets`, { observe: 'body' });
    }
    observations(patientId) {
        return this.http.get(`${this.resourceUrl}/${patientId}/observations`, {
            observe: 'body'
        });
    }
    activities(patientId, detailed) {
        return this.http.get(`${this.resourceUrl}/${patientId}/activities?full=${detailed}`, { observe: 'body' })
            .pipe(map(res => {
            res.sort((t1, t2) => {
                const d1 = moment(t1.date, 'DD MMM, YYYY');
                const d2 = moment(t2.date, 'DD MMM, YYYY');
                return d2.diff(d1);
            });
            return res;
        }));
    }
    getActiveFacility() {
        return this.http.get('/api/facilities/active');
    }
    getAllFacility() {
        return this.http.get('/api/facilities');
    }
    getStates() {
        return this.http.get('/api/states');
    }
    getLgasByState(id) {
        return this.http.get(`/api/provinces/state/${id}`);
    }
    getStateByLga(id) {
        return this.http.get(`/api/provinces/${id}/state`);
    }
    getFacility(id) {
        return this.http.get(`/api/facilities/${id}`);
    }
    existsByHospitalNumber(hospitalNum) {
        return this.http.post(`${this.resourceUrl}/exists/hospital-number`, { number: hospitalNum })
            .pipe(map((res => res ? { 'numberExists': true } : null)));
    }
    getStatusDatesByPatient(patientId) {
        return this.http.get(`/api/client-statuses/patient/${patientId}/status-dates`)
            .pipe(map((res) => {
            res.forEach(d => moment(d));
            return res;
        }));
    }
    getSummaryForPatient(id) {
        return this.http.get(`${this.resourceUrl}/${id}/summary`);
    }
    saveClientStatus(status) {
        console.log('Status', status);
        const copy = PatientService_1.convertStatusFromClient(status);
        console.log('Copy', copy);
        return this.http.post('/api/client-statuses', copy, { observe: 'response' });
    }
    updateClientStatus(status) {
        const copy = PatientService_1.convertStatusFromClient(status);
        return this.http.put('/api/client-statuses', copy, { observe: 'response' });
    }
    findClientStatus(id) {
        return this.http.get(`/api/client-statuses/by-uuid/${id}`, { observe: 'response' })
            .pipe(map((res) => {
            res.body.dateTracked = res.body.dateTracked != null ? moment(res.body.dateTracked) : null;
            res.body.dateStatus = res.body.dateStatus != null ? moment(res.body.dateStatus) : null;
            res.body.agreedDate = res.body.agreedDate != null ? moment(res.body.agreedDate) : null;
            return res;
        }));
    }
    currentClientStatus(patientId) {
        return this.http.get(`/api/client-statuses/patient/${patientId}/current`, { responseType: 'text' });
    }
    getStatusName(id) {
        return this.http.get(`/api/client-statuses/${id}/name`, { responseType: 'text' });
    }
    static convertStatusFromClient(status) {
        const copy = Object.assign({}, status, {
            dateStatus: status.dateStatus != null && status.dateStatus.isValid() ? status.dateStatus.format(DATE_FORMAT) : null,
            agreedDate: status.agreedDate != null && status.agreedDate.isValid() ? status.agreedDate.format(DATE_FORMAT) : null,
            dateTracked: status.dateTracked != null && status.dateTracked.isValid() ? status.dateTracked.format(DATE_FORMAT) : null,
        });
        return copy;
    }
    convertDateFromClient(patient) {
        const copy = Object.assign({}, patient, {
            dateBirth: patient.dateBirth != null && patient.dateBirth.isValid() ? patient.dateBirth.format(DATE_FORMAT) : null,
            dateRegistration: patient.dateRegistration != null && patient.dateRegistration.isValid() ? patient.dateRegistration.format(DATE_FORMAT) : null,
            dateStarted: patient.dateStarted != null && patient.dateStarted.isValid() ? patient.dateStarted.format(DATE_FORMAT) : null,
            dateConfirmedHiv: patient.dateConfirmedHiv != null && patient.dateConfirmedHiv.isValid() ? patient.dateConfirmedHiv.format(DATE_FORMAT) : null,
            dateEnrolledPMTCT: patient.dateEnrolledPMTCT != null && patient.dateEnrolledPMTCT.isValid() ? patient.dateEnrolledPMTCT.format(DATE_FORMAT) : null,
            pregnant: patient.pregnancyStatus === 2,
            breastfeeding: patient.pregnancyStatus === 3
        });
        return copy;
    }
    convertDateFromServer(res) {
        if (res.body) {
            res.body.name = res.body.surname + ', ' + res.body.otherNames;
            res.body.dateBirth = res.body.dateBirth != null ? moment(res.body.dateBirth) : null;
            res.body.dateRegistration = res.body.dateRegistration != null ? moment(res.body.dateRegistration) : null;
            res.body.dateConfirmedHiv = res.body.dateConfirmedHiv != null ? moment(res.body.dateConfirmedHiv) : null;
            res.body.dateEnrolledPMTCT = res.body.dateEnrolledPMTCT != null ? moment(res.body.dateEnrolledPMTCT) : null;
            res.body.dateStarted = res.body.dateStarted != null ? moment(res.body.dateStarted) : null;
            res.body.pregnancyStatus = res.body.pregnant != null && res.body.pregnant ? 2 : res.body.gender === 'FEMALE' ? 1 : null;
            res.body.pregnancyStatus = res.body.breastfeeding != null && res.body.breastfeeding ? 3 : res.body.gender === 'FEMALE' ? 1 : null;
        }
        return res;
    }
    convertDateArrayFromServer(res) {
        if (res.body) {
            res.body.forEach((patient) => {
                patient.name = patient.surname + ', ' + patient.otherNames;
                patient.dateBirth = patient.dateBirth != null ? moment(patient.dateBirth) : null;
                patient.dateRegistration = patient.dateRegistration != null ? moment(patient.dateRegistration) : null;
                patient.dateStarted = patient.dateStarted != null ? moment(patient.dateStarted) : null;
            });
        }
        return res;
    }
};
PatientService.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Inject, args: [SERVER_API_URL_CONFIG,] }] },
    { type: AuthServerProvider }
];
PatientService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PatientService_Factory() { return new PatientService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG), i0.ɵɵinject(i2.AuthServerProvider)); }, token: PatientService, providedIn: "root" });
PatientService = PatientService_1 = tslib_1.__decorate([
    Injectable({ providedIn: 'root' }),
    tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
    tslib_1.__metadata("design:paramtypes", [HttpClient, Object, AuthServerProvider])
], PatientService);
export { PatientService };
//# sourceMappingURL=data:application/json;base64,