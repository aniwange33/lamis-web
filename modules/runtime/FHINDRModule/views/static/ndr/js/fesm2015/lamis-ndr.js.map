{"version":3,"file":"lamis-ndr.js","sources":["ng://lamis-ndr/lib/services/ndr-converter.service.ts","ng://lamis-ndr/lib/components/ndr-converter.component.ts","ng://lamis-ndr/lib/services/ndr.route.ts","ng://lamis-ndr/lib/ndr.module.ts","ng://lamis-ndr/public_api.ts","ng://lamis-ndr/lamis-ndr.ts"],"sourcesContent":["import { Inject, Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { SERVER_API_URL_CONFIG, ServerApiUrlConfig } from \"@lamis/web-core\";\nimport { Facility } from \"../components/ndr-converter.component\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class NdrConverterService {\n    public resourceUrl = '';\n\n    constructor(private http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/ndr';\n    }\n\n    convert(ids: number[]) {\n        let params = new HttpParams();\n        ids.forEach(id => params = params.append(\"ids\", id.toString()));\n        return this.http.get(`${this.resourceUrl}/run`, {params})\n    }\n\n    listFacilities() {\n        return this.http.get<Facility[]>(`${this.resourceUrl}/list-facilities`)\n    }\n\n    download(name: string): Observable<Blob> {\n        return this.http.get(`${this.resourceUrl}/download/${name}`, {responseType: 'blob'})\n    }\n\n    listFiles() {\n        return this.http.get<string[]>(`${this.resourceUrl}/list-files`)\n    }\n\n    deduplicate() {\n        return this.http.get(`${this.resourceUrl}/remove-duplicates`)\n    }\n}","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NdrConverterService } from \"../services/ndr-converter.service\";\nimport { RxStompService } from \"@stomp/ng2-stompjs\";\nimport { Message } from '@stomp/stompjs';\nimport { Subscription } from \"rxjs\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { saveAs } from 'file-saver';\n\nexport interface Facility {\n    id: number;\n    name: string;\n    selected: boolean;\n}\n\n@Component({\n    selector: 'ndr-converter',\n    templateUrl: './ndr-convert.component.html'\n})\nexport class NdrConverterComponent implements OnInit, OnDestroy {\n    private topicSubscription: Subscription;\n    facilities: Facility[] = [];\n    files: string[];\n    running = false;\n    message: any;\n    finished = false;\n\n    constructor(private ndrService: NdrConverterService, private stompService: RxStompService, private domSanitizer: DomSanitizer) {\n    }\n\n    ngOnInit() {\n        this.ndrService.listFacilities().subscribe(res => this.facilities = res);\n        this.topicSubscription = this.stompService.watch(\"/topic/ndr-status\").subscribe((msg: Message) => {\n            if (msg.body === 'start') {\n                this.running = true\n            } else if (msg.body === 'end') {\n                this.running = false;\n                this.message = \"Conversion finished; download files from Download tab\";\n                this.finished = true;\n                this.ndrService.listFiles().subscribe(res => {\n                    this.files = res;\n                })\n            } else {\n                this.message = msg.body;\n                this.running = true;\n            }\n        })\n    }\n\n    selected(): boolean {\n        return this.facilities.filter(f => f.selected).length > 0\n    }\n\n    download(name: string) {\n        this.ndrService.download(name).subscribe(res => {\n            const file = new File([res], name + '.zip', {type: 'application/octet-stream'});\n            saveAs(file);\n        });\n    }\n\n    tabChanged(event) {\n        if (event.index === 1) {\n            this.ndrService.listFiles().subscribe(res => {\n                this.files = res;\n            })\n        }\n    }\n\n    convert() {\n        let ids = this.facilities.filter(f => f.selected)\n            .map(f => f.id);\n        this.ndrService.convert(ids).subscribe()\n    }\n\n    deduplicate() {\n        this.running = true;\n        this.ndrService.deduplicate().subscribe(res => this.running = false)\n    }\n\n    ngOnDestroy(): void {\n        this.topicSubscription.unsubscribe()\n    }\n}\n","import { Routes } from '@angular/router';\nimport { NdrConverterComponent } from '../components/ndr-converter.component';\n\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'NDR Converter',\n            breadcrumb: 'NDR CONVERTER'\n        },\n        children: [\n            {\n                path: '',\n                component: NdrConverterComponent,\n                data: {\n                    breadcrumb: 'NDR CONVERTER'\n                },\n            }\n        ]\n    }\n];\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatDividerModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatProgressBarModule,\n    MatSelectModule,\n    MatTabsModule\n} from '@angular/material';\nimport { RouterModule } from '@angular/router';\nimport { NdrConverterComponent } from './components/ndr-converter.component';\nimport { NdrConverterService } from \"./services/ndr-converter.service\";\nimport { ROUTES } from \"./services/ndr.route\";\nimport { FormsModule } from \"@angular/forms\";\n\n@NgModule({\n    declarations: [\n        NdrConverterComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatInputModule,\n        MatIconModule,\n        MatDividerModule,\n        MatCardModule,\n        MatSelectModule,\n        MatButtonModule,\n        MatTabsModule,\n        RouterModule.forChild(ROUTES),\n        MatProgressBarModule,\n        MatListModule,\n        MatCheckboxModule\n    ],\n    exports: [\n        NdrConverterComponent\n    ],\n    providers: [\n        NdrConverterService\n    ]\n})\nexport class NdrModule {\n}\n","/*\n * Public API Surface of Patient\n */\n\nexport * from './lib/components/ndr-converter.component';\nexport * from './lib/services/ndr-converter.service';\nexport * from './lib/ndr.module';\nexport * from './lib/services/ndr.route';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["tslib_1.__param"],"mappings":"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"}